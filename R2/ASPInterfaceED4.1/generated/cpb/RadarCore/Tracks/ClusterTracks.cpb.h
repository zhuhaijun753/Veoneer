/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef RADARCORE_TRACKS_CLUSTERTRACKS_INCLUDED
#define RADARCORE_TRACKS_CLUSTERTRACKS_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define RadarCore_Tracks_ClusterTrackModelBox_size                                       (24)
#define RadarCore_Tracks_ClusterTrackMovement_size                                       (36)
#define RadarCore_Tracks_ClusterTrackPosition_size                                       (20)
#define RadarCore_Tracks_ClusterTrack_size                                               ((73 + RadarCore_Tracks_ClusterTrackPosition_size + RadarCore_Tracks_ClusterTrackModelBox_size + RadarCore_Tracks_ClusterTrackMovement_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define RadarCore_Tracks_ClusterTrackList_size                                           (4680)

/* Message IDs (where set with "identifier" option) */
#define RadarCore_Tracks_ClusterTrackList_source                                         4U
#define RadarCore_Tracks_ClusterTrackList_identifier                                     10U
#define RadarCore_Tracks_ClusterTrackList_majorVersion                                   1U
#define RadarCore_Tracks_ClusterTrackList_minorVersion                                   0U

/* Enum definitions */
typedef enum _RadarCore_Tracks_ClusterTrackQualityBits {
    RadarCore_Tracks_ClusterTrackQualityBits_Sliding = 0,
    RadarCore_Tracks_ClusterTrackQualityBits_Fused = 1,
    RadarCore_Tracks_ClusterTrackQualityBits_ConfirmedByRspTracker = 2,
    RadarCore_Tracks_ClusterTrackQualityBits_InsideFreespace = 3,
    RadarCore_Tracks_ClusterTrackQualityBits_OutsideStationaryCloud = 4,
    RadarCore_Tracks_ClusterTrackQualityBits_InsideRearBorder = 5,
    RadarCore_Tracks_ClusterTrackQualityBits_AssociatedWithGoodDetection = 6,
    RadarCore_Tracks_ClusterTrackQualityBits_Ghost = 7,
    RadarCore_Tracks_ClusterTrackQualityBits_MirrorGhost = 8,
    RadarCore_Tracks_ClusterTrackQualityBits_EgoMirrorGhost = 9,
    RadarCore_Tracks_ClusterTrackQualityBits_GhostFromTrackGuardrail = 10,
    RadarCore_Tracks_ClusterTrackQualityBits_OutsideFreespaceGhost = 11,
    RadarCore_Tracks_ClusterTrackQualityBits_RoofGhost = 12,
    RadarCore_Tracks_ClusterTrackQualityBits_TunnelMirrorGhost = 13,
    RadarCore_Tracks_ClusterTrackQualityBits_CompanionGhost = 14,
    RadarCore_Tracks_ClusterTrackQualityBits_AngleJumpCoasting = 15,
    RadarCore_Tracks_ClusterTrackQualityBits_Occluded = 16,
    RadarCore_Tracks_ClusterTrackQualityBits_GoodQuality = 17
} RadarCore_Tracks_ClusterTrackQualityBits;
#define RadarCore_Tracks_ClusterTrackQualityBits_MIN RadarCore_Tracks_ClusterTrackQualityBits_Sliding
#define RadarCore_Tracks_ClusterTrackQualityBits_MAX RadarCore_Tracks_ClusterTrackQualityBits_GoodQuality
#define RadarCore_Tracks_ClusterTrackQualityBits_ARRAYSIZE ((RadarCore_Tracks_ClusterTrackQualityBits)(RadarCore_Tracks_ClusterTrackQualityBits_GoodQuality+1))

typedef enum _RadarCore_Tracks_ClusterTrackMotionClass {
    RadarCore_Tracks_ClusterTrackMotionClass_Unknown = 0,
    RadarCore_Tracks_ClusterTrackMotionClass_Stationary = 1,
    RadarCore_Tracks_ClusterTrackMotionClass_Moving = 2,
    RadarCore_Tracks_ClusterTrackMotionClass_Stopped = 3
} RadarCore_Tracks_ClusterTrackMotionClass;
#define RadarCore_Tracks_ClusterTrackMotionClass_MIN RadarCore_Tracks_ClusterTrackMotionClass_Unknown
#define RadarCore_Tracks_ClusterTrackMotionClass_MAX RadarCore_Tracks_ClusterTrackMotionClass_Stopped
#define RadarCore_Tracks_ClusterTrackMotionClass_ARRAYSIZE ((RadarCore_Tracks_ClusterTrackMotionClass)(RadarCore_Tracks_ClusterTrackMotionClass_Stopped+1))

typedef enum _RadarCore_Tracks_ClusterTrackObjectType {
    RadarCore_Tracks_ClusterTrackObjectType_Unknown = 0,
    RadarCore_Tracks_ClusterTrackObjectType_Car = 1,
    RadarCore_Tracks_ClusterTrackObjectType_Bicycle = 2,
    RadarCore_Tracks_ClusterTrackObjectType_Pedestrian = 3,
    RadarCore_Tracks_ClusterTrackObjectType_Motorcycle = 4,
    RadarCore_Tracks_ClusterTrackObjectType_Truck = 5,
    RadarCore_Tracks_ClusterTrackObjectType_Animal = 6,
    RadarCore_Tracks_ClusterTrackObjectType_Group2Pedestrians = 7,
    RadarCore_Tracks_ClusterTrackObjectType_GroupMultiplePedestians = 8
} RadarCore_Tracks_ClusterTrackObjectType;
#define RadarCore_Tracks_ClusterTrackObjectType_MIN RadarCore_Tracks_ClusterTrackObjectType_Unknown
#define RadarCore_Tracks_ClusterTrackObjectType_MAX RadarCore_Tracks_ClusterTrackObjectType_GroupMultiplePedestians
#define RadarCore_Tracks_ClusterTrackObjectType_ARRAYSIZE ((RadarCore_Tracks_ClusterTrackObjectType)(RadarCore_Tracks_ClusterTrackObjectType_GroupMultiplePedestians+1))

typedef enum _RadarCore_Tracks_ClusterTrackConfidence {
    RadarCore_Tracks_ClusterTrackConfidence_Unknown = 0,
    RadarCore_Tracks_ClusterTrackConfidence_Low = 1,
    RadarCore_Tracks_ClusterTrackConfidence_Medium = 2,
    RadarCore_Tracks_ClusterTrackConfidence_High = 3
} RadarCore_Tracks_ClusterTrackConfidence;
#define RadarCore_Tracks_ClusterTrackConfidence_MIN RadarCore_Tracks_ClusterTrackConfidence_Unknown
#define RadarCore_Tracks_ClusterTrackConfidence_MAX RadarCore_Tracks_ClusterTrackConfidence_High
#define RadarCore_Tracks_ClusterTrackConfidence_ARRAYSIZE ((RadarCore_Tracks_ClusterTrackConfidence)(RadarCore_Tracks_ClusterTrackConfidence_High+1))

typedef enum _RadarCore_Tracks_ClusterTrackElevation {
    RadarCore_Tracks_ClusterTrackElevation_Unknown = 0,
    RadarCore_Tracks_ClusterTrackElevation_Overridable = 1,
    RadarCore_Tracks_ClusterTrackElevation_Relevant = 2,
    RadarCore_Tracks_ClusterTrackElevation_Underridable = 3
} RadarCore_Tracks_ClusterTrackElevation;
#define RadarCore_Tracks_ClusterTrackElevation_MIN RadarCore_Tracks_ClusterTrackElevation_Unknown
#define RadarCore_Tracks_ClusterTrackElevation_MAX RadarCore_Tracks_ClusterTrackElevation_Underridable
#define RadarCore_Tracks_ClusterTrackElevation_ARRAYSIZE ((RadarCore_Tracks_ClusterTrackElevation)(RadarCore_Tracks_ClusterTrackElevation_Underridable+1))

/* Struct definitions */
typedef struct _RadarCore_Tracks_ClusterTrackModelBox {
    /** X
     * X position, center of box
     * Unit: m
     * Scale: 0.01
     * Min: -200
     * Max: 200
     */
    int32_t x;
    /** Y
     * Y position, center of box
     * Unit: m
     * Scale: 0.01
     * Min: -100
     * Max: 100
     */
    int32_t y;
    /** Width
     * Width of the object
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 51
     */
    uint16_t width;
    /** Length
     * Length of the object
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 51
     */
    uint16_t length;
    /** Heading
     * Heading of object
     * Unit: rad
     * Scale: 0.0001
     * Min: -3.15
     * Max: 3.15
     */
    int16_t heading;
} RadarCore_Tracks_ClusterTrackModelBox;

typedef struct _RadarCore_Tracks_ClusterTrackMovement {
    /** XVelocity
     * Absolute X velocity
     * Unit: m/s
     * Scale: 0.01
     * Min: -120
     * Max: 120
     */
    int32_t xVelocity;
    /** YVelocity
     * Absolute Y velocity
     * Unit: m/s
     * Scale: 0.01
     * Min: -120
     * Max: 120
     */
    int32_t yVelocity;
    /** XVelocityStdDev
     * Standard deviation of X velocity
     * Unit: m/s
     * Scale: 0.05
     * Min: 0
     * Max: 3
     */
    uint32_t xVelocityStdDev;
    /** YVelocityStdDev
     * Standard deviation of Y velocity
     * Unit: m/s
     * Scale: 0.05
     * Min: 0
     * Max: 3
     */
    uint32_t yVelocityStdDev;
    /** XAcceleration
     * X acceleration
     * Unit: m/s²
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t xAcceleration;
    /** YAcceleration
     * Y acceleration
     * Unit: m/s²
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t yAcceleration;
} RadarCore_Tracks_ClusterTrackMovement;

typedef struct _RadarCore_Tracks_ClusterTrackPosition {
    /** X
     * X position
     * Unit: m
     * Scale: 0.01
     * Min: -200
     * Max: 200
     */
    int32_t x;
    /** Y
     * Y position
     * Unit: m
     * Scale: 0.01
     * Min: -100
     * Max: 100
     */
    int32_t y;
    /** XStdDev
     * Standard deviation of X
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 5
     */
    uint16_t xStdDev;
    /** YStdDev
     * Standard deviation of Y
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 5
     */
    uint16_t yStdDev;
} RadarCore_Tracks_ClusterTrackPosition;

typedef struct _RadarCore_Tracks_ClusterTrack {
    /** Id
     * A global ID, which is constant as long as the object is tracked. Note! A value of 0 indicates 'no object'
     * Min: 0
     * Max: 65535
     */
    uint16_t id;
    /** ClosestPoint
     * Kalman filtered closest point
     */
    RadarCore_Tracks_ClusterTrackPosition closestPoint;
    /** BoxModel
     * Box model describing the object
     */
    RadarCore_Tracks_ClusterTrackModelBox boxModel;
    /** Movement
     * Movement estimation of object
     */
    RadarCore_Tracks_ClusterTrackMovement movement;
    /** Lifetime
     * Number of cycles the target has been alive. Unknown 0
     * Min: 0
     * Max: 4.29497e+09
     */
    uint32_t lifetime;
    /** StationaryCounter
     * Counts the cycles during which the object is ground stationary (i.e. absolute velocity over ground = 0)
     * Min: 0
     * Max: 65535
     */
    uint16_t stationaryCounter;
    /** ObservationHistory
     * Observation history of tracked object in as 32 bit-field for the last 32 cycles; for each bit: 1 = associated, 0 = not associated; LSB = most recent cycle, MSB = oldest cycle
     * Min: 0
     * Max: 4.29497e+09
     */
    uint32_t observationHistory;
    /** MotionClass
     * Tracked object motion classification
     */
    RadarCore_Tracks_ClusterTrackMotionClass motionClass;
    /** Type
     * Tracked object type classification
     */
    RadarCore_Tracks_ClusterTrackObjectType type;
    /** Confidence
     * Object confidence used in quality manager to provide "Objektgate" (i.e. object quality) tracked object confidence is calculated based on the normalized difference of closest detection to the track's calculated closest point, for range, angle and velocity
     * Min: 0
     * Max: 100
     */
    uint8_t confidence;
    /** ExistanceProbability
     * Confidence tracked object existence. Currently set to the association rate [0..100] over the last 6 cycles
     * Min: 0
     * Max: 100
     */
    uint8_t existanceProbability;
    pb_size_t objectClassConfidence_count;
    /** ObjectClassConfidence
     * Confidence of tracked object type classification, index corresponds to ClusterTrackObjectType
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t objectClassConfidence[9];
    /** Elevation
     * Elevation of the object
     */
    RadarCore_Tracks_ClusterTrackElevation elevation;
    /** ElevationConfidence
     * Confidence the elevation classification is correct
     */
    RadarCore_Tracks_ClusterTrackConfidence elevationConfidence;
    /** QualityBits
     * Bitmask for quality values described by ClusterTrackQualityBits
     * Min: 0
     * Max: 4.29497e+09
     */
    uint32_t qualityBits;
} RadarCore_Tracks_ClusterTrack;

typedef struct _RadarCore_Tracks_ClusterTrackList {
    pb_size_t tracks_count;
    /** Tracks
     * List of cluster tracks
     */
    RadarCore_Tracks_ClusterTrack tracks[30];
} RadarCore_Tracks_ClusterTrackList;

/* Struct field encoding specification for pb */
extern const pb_field_t RadarCore_Tracks_ClusterTrackPosition_fields[5];
extern const pb_field_t RadarCore_Tracks_ClusterTrackModelBox_fields[6];
extern const pb_field_t RadarCore_Tracks_ClusterTrackMovement_fields[7];
extern const pb_field_t RadarCore_Tracks_ClusterTrack_fields[16];
extern const pb_field_t RadarCore_Tracks_ClusterTrackList_fields[2];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* RADARCORE_TRACKS_CLUSTERTRACKS_INCLUDED */
