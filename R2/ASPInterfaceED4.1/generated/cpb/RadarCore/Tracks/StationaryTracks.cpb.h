/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef RADARCORE_TRACKS_STATIONARYTRACKS_INCLUDED
#define RADARCORE_TRACKS_STATIONARYTRACKS_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define RadarCore_Tracks_StationaryTrackMovement_size                                    (12)
#define RadarCore_Tracks_StationaryTrackPosition_size                                    (12)
#define RadarCore_Tracks_StationaryTrack_size                                            ((23 + RadarCore_Tracks_StationaryTrackPosition_size + RadarCore_Tracks_StationaryTrackMovement_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define RadarCore_Tracks_StationaryTrackList_size                                        (1960)

/* Message IDs (where set with "identifier" option) */
#define RadarCore_Tracks_StationaryTrackList_source                                      4U
#define RadarCore_Tracks_StationaryTrackList_identifier                                  11U
#define RadarCore_Tracks_StationaryTrackList_majorVersion                                1U
#define RadarCore_Tracks_StationaryTrackList_minorVersion                                0U

/* Enum definitions */
typedef enum _RadarCore_Tracks_StationaryTrackPropertyBits {
    RadarCore_Tracks_StationaryTrackPropertyBits_Active = 0,
    RadarCore_Tracks_StationaryTrackPropertyBits_Zombie = 1,
    RadarCore_Tracks_StationaryTrackPropertyBits_SlowMoving = 2
} RadarCore_Tracks_StationaryTrackPropertyBits;
#define RadarCore_Tracks_StationaryTrackPropertyBits_MIN RadarCore_Tracks_StationaryTrackPropertyBits_Active
#define RadarCore_Tracks_StationaryTrackPropertyBits_MAX RadarCore_Tracks_StationaryTrackPropertyBits_SlowMoving
#define RadarCore_Tracks_StationaryTrackPropertyBits_ARRAYSIZE ((RadarCore_Tracks_StationaryTrackPropertyBits)(RadarCore_Tracks_StationaryTrackPropertyBits_SlowMoving+1))

typedef enum _RadarCore_Tracks_StationaryTrackElevation {
    RadarCore_Tracks_StationaryTrackElevation_Unknown = 0,
    RadarCore_Tracks_StationaryTrackElevation_NotReady = 1,
    RadarCore_Tracks_StationaryTrackElevation_Overridable = 2,
    RadarCore_Tracks_StationaryTrackElevation_Relevant = 3,
    RadarCore_Tracks_StationaryTrackElevation_Underridable = 4,
    RadarCore_Tracks_StationaryTrackElevation_NoDecision = 5
} RadarCore_Tracks_StationaryTrackElevation;
#define RadarCore_Tracks_StationaryTrackElevation_MIN RadarCore_Tracks_StationaryTrackElevation_Unknown
#define RadarCore_Tracks_StationaryTrackElevation_MAX RadarCore_Tracks_StationaryTrackElevation_NoDecision
#define RadarCore_Tracks_StationaryTrackElevation_ARRAYSIZE ((RadarCore_Tracks_StationaryTrackElevation)(RadarCore_Tracks_StationaryTrackElevation_NoDecision+1))

typedef enum _RadarCore_Tracks_StationaryTrackQuality {
    RadarCore_Tracks_StationaryTrackQuality_Unknown = 0,
    RadarCore_Tracks_StationaryTrackQuality_Low = 1,
    RadarCore_Tracks_StationaryTrackQuality_Medium = 2,
    RadarCore_Tracks_StationaryTrackQuality_High = 3
} RadarCore_Tracks_StationaryTrackQuality;
#define RadarCore_Tracks_StationaryTrackQuality_MIN RadarCore_Tracks_StationaryTrackQuality_Unknown
#define RadarCore_Tracks_StationaryTrackQuality_MAX RadarCore_Tracks_StationaryTrackQuality_High
#define RadarCore_Tracks_StationaryTrackQuality_ARRAYSIZE ((RadarCore_Tracks_StationaryTrackQuality)(RadarCore_Tracks_StationaryTrackQuality_High+1))

/* Struct definitions */
typedef struct _RadarCore_Tracks_StationaryTrackMovement {
    /** XVelocity
     * Filtered absolute longitudinal velocity
     * Unit: m/s
     * Scale: 0.01
     * Min: -120
     * Max: 120
     */
    int32_t xVelocity;
    /** YVelocity
     * Filtered absolute lateral velocity
     * Unit: m/s
     * Scale: 0.01
     * Min: -120
     * Max: 120
     */
    int32_t yVelocity;
} RadarCore_Tracks_StationaryTrackMovement;

typedef struct _RadarCore_Tracks_StationaryTrackPosition {
    /** X
     * Filtered X position
     * Unit: m
     * Scale: 0.01
     * Min: -200
     * Max: 200
     */
    int32_t x;
    /** Y
     * Filtered Y position
     * Unit: m
     * Scale: 0.01
     * Min: -100
     * Max: 100
     */
    int32_t y;
} RadarCore_Tracks_StationaryTrackPosition;

typedef struct _RadarCore_Tracks_StationaryTrack {
    /** Id
     * A global ID, which is constant as long as the object is tracked. Note! A value of 0 indicates 'no object'
     * Min: 0
     * Max: 65535
     */
    uint16_t id;
    /** Position
     * Reference point for object
     */
    RadarCore_Tracks_StationaryTrackPosition position;
    /** Movement
     * Movement estimation of object
     */
    RadarCore_Tracks_StationaryTrackMovement movement;
    /** Lifetime
     * Number of cycles the target has been alive. Unknown 0
     * Min: 0
     * Max: 255
     */
    uint8_t lifetime;
    /** PredictionCounter
     * Number of cycles the target has been predicted
     * Min: 0
     * Max: 255
     */
    uint8_t predictionCounter;
    /** PropertyBits
     * Bitmask for property values described by StationaryTrackPropertyBits
     * Min: 0
     * Max: 7
     */
    uint8_t propertyBits;
    /** Quality
     * Track quality
     */
    RadarCore_Tracks_StationaryTrackQuality quality;
    /** Elevation
     * Elevation Classification from Core Elevation Library
     */
    RadarCore_Tracks_StationaryTrackElevation elevation;
    /** ElevationConfidence
     * Elevation Classification Confidence Level from Core Elevation Library
     */
    RadarCore_Tracks_StationaryTrackQuality elevationConfidence;
} RadarCore_Tracks_StationaryTrack;

typedef struct _RadarCore_Tracks_StationaryTrackList {
    pb_size_t tracks_count;
    /** Tracks
     * List of stationary tracks
     */
    RadarCore_Tracks_StationaryTrack tracks[40];
} RadarCore_Tracks_StationaryTrackList;

/* Struct field encoding specification for pb */
extern const pb_field_t RadarCore_Tracks_StationaryTrackPosition_fields[3];
extern const pb_field_t RadarCore_Tracks_StationaryTrackMovement_fields[3];
extern const pb_field_t RadarCore_Tracks_StationaryTrack_fields[10];
extern const pb_field_t RadarCore_Tracks_StationaryTrackList_fields[2];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* RADARCORE_TRACKS_STATIONARYTRACKS_INCLUDED */
