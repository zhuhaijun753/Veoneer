/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef VISIONCORE_ROAD_LANEOUTPUT_INCLUDED
#define VISIONCORE_ROAD_LANEOUTPUT_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define VisionCore_Road_Clothoid_size                                                    (26)
#define VisionCore_Road_ClothoidVariance_size                                            (20)
#define VisionCore_Road_LaneEvent_size                                                   (14)
#define VisionCore_Road_TemporaryMarkings_size                                           (6)
#define VisionCore_Road_LaneTrack_size                                                   ((57 + VisionCore_Road_Clothoid_size + VisionCore_Road_ClothoidVariance_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_EgoLane_size                                                     ((8 + VisionCore_Road_LaneTrack_size + VisionCore_Road_LaneTrack_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_LaneOutput_size                                                  ((92 + VisionCore_Road_EgoLane_size + VisionCore_Road_EgoLane_size + VisionCore_Road_LaneTrack_size + VisionCore_Road_LaneTrack_size + VisionCore_Road_TemporaryMarkings_size) + PB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define VisionCore_Road_LaneOutput_source                                                2U
#define VisionCore_Road_LaneOutput_identifier                                            201U
#define VisionCore_Road_LaneOutput_majorVersion                                          2U
#define VisionCore_Road_LaneOutput_minorVersion                                          0U

/* Enum definitions */
typedef enum _VisionCore_Road_MarkingStructure {
    VisionCore_Road_MarkingStructure_PaintedMarking = 0,
    VisionCore_Road_MarkingStructure_BottsDots = 1
} VisionCore_Road_MarkingStructure;
#define VisionCore_Road_MarkingStructure_MIN VisionCore_Road_MarkingStructure_PaintedMarking
#define VisionCore_Road_MarkingStructure_MAX VisionCore_Road_MarkingStructure_BottsDots
#define VisionCore_Road_MarkingStructure_ARRAYSIZE ((VisionCore_Road_MarkingStructure)(VisionCore_Road_MarkingStructure_BottsDots+1))

typedef enum _VisionCore_Road_MarkingType {
    VisionCore_Road_MarkingType_Unspecified = 0,
    VisionCore_Road_MarkingType_Solid = 1,
    VisionCore_Road_MarkingType_Dashed = 2,
    VisionCore_Road_MarkingType_SeparationMarking = 3
} VisionCore_Road_MarkingType;
#define VisionCore_Road_MarkingType_MIN VisionCore_Road_MarkingType_Unspecified
#define VisionCore_Road_MarkingType_MAX VisionCore_Road_MarkingType_SeparationMarking
#define VisionCore_Road_MarkingType_ARRAYSIZE ((VisionCore_Road_MarkingType)(VisionCore_Road_MarkingType_SeparationMarking+1))

typedef enum _VisionCore_Road_SecondMarkingType {
    VisionCore_Road_SecondMarkingType_NoSecondMarking = 0,
    VisionCore_Road_SecondMarkingType_SecondSolid = 1,
    VisionCore_Road_SecondMarkingType_SecondDashed = 2,
    VisionCore_Road_SecondMarkingType_SecondSeparationMarking = 3,
    VisionCore_Road_SecondMarkingType_MultipleMarkings = 4
} VisionCore_Road_SecondMarkingType;
#define VisionCore_Road_SecondMarkingType_MIN VisionCore_Road_SecondMarkingType_NoSecondMarking
#define VisionCore_Road_SecondMarkingType_MAX VisionCore_Road_SecondMarkingType_MultipleMarkings
#define VisionCore_Road_SecondMarkingType_ARRAYSIZE ((VisionCore_Road_SecondMarkingType)(VisionCore_Road_SecondMarkingType_MultipleMarkings+1))

typedef enum _VisionCore_Road_LaneTrackingStatus {
    VisionCore_Road_LaneTrackingStatus_NoMarkingDetected = 0,
    VisionCore_Road_LaneTrackingStatus_TrackedDetectedMarking = 1,
    VisionCore_Road_LaneTrackingStatus_CloseRangePredictedMarking = 2,
    VisionCore_Road_LaneTrackingStatus_FarRangePredictedMarking = 3,
    VisionCore_Road_LaneTrackingStatus_PredictedMarking = 4
} VisionCore_Road_LaneTrackingStatus;
#define VisionCore_Road_LaneTrackingStatus_MIN VisionCore_Road_LaneTrackingStatus_NoMarkingDetected
#define VisionCore_Road_LaneTrackingStatus_MAX VisionCore_Road_LaneTrackingStatus_PredictedMarking
#define VisionCore_Road_LaneTrackingStatus_ARRAYSIZE ((VisionCore_Road_LaneTrackingStatus)(VisionCore_Road_LaneTrackingStatus_PredictedMarking+1))

typedef enum _VisionCore_Road_SideSuggestion {
    VisionCore_Road_SideSuggestion_None = 0,
    VisionCore_Road_SideSuggestion_LeftSide = 1,
    VisionCore_Road_SideSuggestion_RightSide = 2,
    VisionCore_Road_SideSuggestion_BothNonParallel = 3,
    VisionCore_Road_SideSuggestion_BothParallel = 4,
    VisionCore_Road_SideSuggestion_BothCoupled = 5
} VisionCore_Road_SideSuggestion;
#define VisionCore_Road_SideSuggestion_MIN VisionCore_Road_SideSuggestion_None
#define VisionCore_Road_SideSuggestion_MAX VisionCore_Road_SideSuggestion_BothCoupled
#define VisionCore_Road_SideSuggestion_ARRAYSIZE ((VisionCore_Road_SideSuggestion)(VisionCore_Road_SideSuggestion_BothCoupled+1))

typedef enum _VisionCore_Road_LaneChange {
    VisionCore_Road_LaneChange_No = 0,
    VisionCore_Road_LaneChange_Left = 1,
    VisionCore_Road_LaneChange_Right = 2
} VisionCore_Road_LaneChange;
#define VisionCore_Road_LaneChange_MIN VisionCore_Road_LaneChange_No
#define VisionCore_Road_LaneChange_MAX VisionCore_Road_LaneChange_Right
#define VisionCore_Road_LaneChange_ARRAYSIZE ((VisionCore_Road_LaneChange)(VisionCore_Road_LaneChange_Right+1))

typedef enum _VisionCore_Road_LaneMarkingColor {
    VisionCore_Road_LaneMarkingColor_White = 0,
    VisionCore_Road_LaneMarkingColor_Yellow = 1,
    VisionCore_Road_LaneMarkingColor_Red = 2,
    VisionCore_Road_LaneMarkingColor_Blue = 3,
    VisionCore_Road_LaneMarkingColor_Orange = 4,
    VisionCore_Road_LaneMarkingColor_Green = 5,
    VisionCore_Road_LaneMarkingColor_Other = 6
} VisionCore_Road_LaneMarkingColor;
#define VisionCore_Road_LaneMarkingColor_MIN VisionCore_Road_LaneMarkingColor_White
#define VisionCore_Road_LaneMarkingColor_MAX VisionCore_Road_LaneMarkingColor_Other
#define VisionCore_Road_LaneMarkingColor_ARRAYSIZE ((VisionCore_Road_LaneMarkingColor)(VisionCore_Road_LaneMarkingColor_Other+1))

typedef enum _VisionCore_Road_LaneEventType {
    VisionCore_Road_LaneEventType_NoEvent = 0,
    VisionCore_Road_LaneEventType_OpeningFork = 1,
    VisionCore_Road_LaneEventType_ClosingFork = 2,
    VisionCore_Road_LaneEventType_MarkingTypeChangeDashedToSolid = 3,
    VisionCore_Road_LaneEventType_MarkingTypeChangeSolidToDashed = 4,
    VisionCore_Road_LaneEventType_MarkingTypeChangeStartOfDashed = 5,
    VisionCore_Road_LaneEventType_MarkingTypeChangeStartOfSolid = 6
} VisionCore_Road_LaneEventType;
#define VisionCore_Road_LaneEventType_MIN VisionCore_Road_LaneEventType_NoEvent
#define VisionCore_Road_LaneEventType_MAX VisionCore_Road_LaneEventType_MarkingTypeChangeStartOfSolid
#define VisionCore_Road_LaneEventType_ARRAYSIZE ((VisionCore_Road_LaneEventType)(VisionCore_Road_LaneEventType_MarkingTypeChangeStartOfSolid+1))

typedef enum _VisionCore_Road_TemporaryMarkingType {
    VisionCore_Road_TemporaryMarkingType_NoTemporaryMarkings = 0,
    VisionCore_Road_TemporaryMarkingType_AmbiguousMarkings = 1,
    VisionCore_Road_TemporaryMarkingType_DynamicTemporaryMarkings = 2
} VisionCore_Road_TemporaryMarkingType;
#define VisionCore_Road_TemporaryMarkingType_MIN VisionCore_Road_TemporaryMarkingType_NoTemporaryMarkings
#define VisionCore_Road_TemporaryMarkingType_MAX VisionCore_Road_TemporaryMarkingType_DynamicTemporaryMarkings
#define VisionCore_Road_TemporaryMarkingType_ARRAYSIZE ((VisionCore_Road_TemporaryMarkingType)(VisionCore_Road_TemporaryMarkingType_DynamicTemporaryMarkings+1))

typedef enum _VisionCore_Road_LaneTrackUnsafeReason {
    VisionCore_Road_LaneTrackUnsafeReason_Unspecified = 0,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidPosition = 1,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidMarkingType = 2,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidDetectionDistance = 3,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidCalibration = 4,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidCnn = 5,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidColor = 6,
    VisionCore_Road_LaneTrackUnsafeReason_InvalidRoadProfile = 7,
    VisionCore_Road_LaneTrackUnsafeReason_Other = 8
} VisionCore_Road_LaneTrackUnsafeReason;
#define VisionCore_Road_LaneTrackUnsafeReason_MIN VisionCore_Road_LaneTrackUnsafeReason_Unspecified
#define VisionCore_Road_LaneTrackUnsafeReason_MAX VisionCore_Road_LaneTrackUnsafeReason_Other
#define VisionCore_Road_LaneTrackUnsafeReason_ARRAYSIZE ((VisionCore_Road_LaneTrackUnsafeReason)(VisionCore_Road_LaneTrackUnsafeReason_Other+1))

typedef enum _VisionCore_Road_LaneEventSide {
    VisionCore_Road_LaneEventSide_Unspecified = 0,
    VisionCore_Road_LaneEventSide_Left = 1,
    VisionCore_Road_LaneEventSide_Right = 2
} VisionCore_Road_LaneEventSide;
#define VisionCore_Road_LaneEventSide_MIN VisionCore_Road_LaneEventSide_Unspecified
#define VisionCore_Road_LaneEventSide_MAX VisionCore_Road_LaneEventSide_Right
#define VisionCore_Road_LaneEventSide_ARRAYSIZE ((VisionCore_Road_LaneEventSide)(VisionCore_Road_LaneEventSide_Right+1))

typedef enum _VisionCore_Road_LaneOperationMode {
    VisionCore_Road_LaneOperationMode_Invalid = 0,
    VisionCore_Road_LaneOperationMode_Mono = 1,
    VisionCore_Road_LaneOperationMode_Stereo = 2
} VisionCore_Road_LaneOperationMode;
#define VisionCore_Road_LaneOperationMode_MIN VisionCore_Road_LaneOperationMode_Invalid
#define VisionCore_Road_LaneOperationMode_MAX VisionCore_Road_LaneOperationMode_Stereo
#define VisionCore_Road_LaneOperationMode_ARRAYSIZE ((VisionCore_Road_LaneOperationMode)(VisionCore_Road_LaneOperationMode_Stereo+1))

/* Struct definitions */
typedef struct _VisionCore_Road_Clothoid {
    /** LateralDistance
     * Lateral distance to the inside of the lane marking [m] (AFAC)(default: 0)
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t lateralDistance;
    /** Heading
     * The heading coefficient of the clothoid model
     * Unit: atan(rad)
     * Scale: 0.000025
     * Min: -0.8192
     * Max: 0.819175
     */
    int16_t heading;
    /** Curvature
     * Horizontal curvature for the start of the first clothoid
     * Unit: 1/m
     * Scale: 0.0000025
     * Min: -0.08192
     * Max: 0.0819175
     */
    int16_t curvature;
    /** CurvatureRate
     * Horizontal curvature rate for the first clothoid
     * Unit: 1/m²
     * Scale: 0.000001
     * Min: -0.032768
     * Max: 0.032767
     */
    int16_t curvatureRate;
    /** TransitionDistance
     * Distance for which second clothoid starts
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 150
     */
    uint16_t transitionDistance;
    /** CurvatureRateSecondClothoid
     * Horizontal curvature rate for the second clothoid
     * Unit: 1/m²
     * Scale: 0.000001
     * Min: -0.032768
     * Max: 0.032767
     */
    int16_t curvatureRateSecondClothoid;
    /** SecondClothoidActive
     * Indicates if second clothoid is used
     */
    bool secondClothoidActive;
} VisionCore_Road_Clothoid;

typedef struct _VisionCore_Road_ClothoidVariance {
    /** LateralDistanceVariance
     * Variance for lateral distance
     * Unit: 1/m²
     * Scale: 0.01
     * Min: -327.68
     * Max: 327.67
     */
    int16_t lateralDistanceVariance;
    /** HeadingVariance
     * Variance for heading
     * Unit: atan(rad)²
     * Scale: 0.000025
     * Min: -0.8192
     * Max: 0.819175
     */
    int16_t headingVariance;
    /** CurvatureVariance
     * Variance for curvature
     * Unit: 1/m²
     * Scale: 0.0000025
     * Min: -0.08192
     * Max: 0.0819175
     */
    int16_t curvatureVariance;
    /** CurvatureRateVariance
     * Variance for curvature rate
     * Unit: 1/m^4
     * Scale: 0.000001
     * Min: -0.032768
     * Max: 0.032767
     */
    int16_t curvatureRateVariance;
    /** CurvatureRateSecondClothoidVariance
     * Variance for second curvature rate
     * Unit: 1/m^4
     * Scale: 0.000001
     * Min: -0.032768
     * Max: 0.032767
     */
    int16_t curvatureRateSecondClothoidVariance;
} VisionCore_Road_ClothoidVariance;

typedef struct _VisionCore_Road_LaneEvent {
    /** Id
     * Unique for the lane event. The same Id can be reused after one output cycle. 0 means None
     * Min: 0
     * Max: 255
     */
    uint8_t id;
    /** LaneTrackId
     * Identifier for the Lane_Track to which the lane event is connected. Related to LaneTrack.id
     * Min: 0
     * Max: 255
     */
    uint8_t laneTrackId;
    /** Distance
     * Distance along the longitudinal axis to the lane event
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 100
     */
    uint16_t distance;
    /** EventType
     * Describes the type of event
     */
    VisionCore_Road_LaneEventType eventType;
    /** Side
     * Side on which the lane event is detected
     */
    VisionCore_Road_LaneEventSide side;
} VisionCore_Road_LaneEvent;

typedef struct _VisionCore_Road_TemporaryMarkings {
    /** Type
     * Describes the type of temporary markings
     */
    VisionCore_Road_TemporaryMarkingType type;
    /** LongitudinalDistance
     * Longitudinal distance to dynamic temporary markings
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 150
     */
    uint16_t longitudinalDistance;
} VisionCore_Road_TemporaryMarkings;

typedef struct _VisionCore_Road_LaneTrack {
    /** Valid
     * True means that LaneTrack describes a valid lane marking
     */
    bool valid;
    /** Id
     * ID nr (default: 255 = SNA, propose change to 0)
     * Min: 0
     * Max: 255
     */
    uint8_t id;
    /** DetectionDistance
     * Longitudinal distance for which the lane is detected
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 150
     */
    uint16_t detectionDistance;
    /** MarkingType
     * Marking type for the lane marking closest to the Ego Vehicle
     */
    VisionCore_Road_MarkingType markingType;
    /** MarkingLength
     * Length of the lane marking, not applicable for continuous markings
     * Unit: m
     * Scale: 0.05
     * Min: 0
     * Max: 12.75
     */
    uint8_t markingLength;
    /** GapLength
     * Length of the gap between lane markings, not applicable for continuous markings
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 25.5
     */
    uint8_t gapLength;
    /** SecondMarkingType
     * Marking type for the second lane marking from the Ego Vehicle
     */
    VisionCore_Road_SecondMarkingType secondMarkingType;
    /** MarkingStructure
     * Describes structure of the first detected lane marker
     */
    VisionCore_Road_MarkingStructure markingStructure;
    /** TrackingStatus
     * Describes detection status
     */
    VisionCore_Road_LaneTrackingStatus trackingStatus;
    /** MarkingWidth
     * Width of first lane marking
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 2.55
     */
    uint8_t markingWidth;
    /** TotalMarkingWidth
     * Width of all lane markings in the marking configuration, e.g. double markings
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 2.55
     */
    uint8_t totalMarkingWidth;
    /** Color
     * Describes the lane marking color
     */
    VisionCore_Road_LaneMarkingColor color;
    /** ModelError
     * Describes how well the measurements are adapted to the model
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 2.55
     */
    uint8_t modelError;
    /** MeasurementQuality
     * Describes quality of the detection
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t measurementQuality;
    /** SelectionConfidence
     * Describes confidence in the track selection
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t selectionConfidence;
    /** DistanceFirstToSecondMarking
     * Distance from first to second lane marking
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 2.55
     */
    uint8_t distanceFirstToSecondMarking;
    /** Clothoid
     * Describes lane marking clothoid
     */
    VisionCore_Road_Clothoid clothoid;
    /** IsSafe
     * True means that the track is safe to use
     */
    bool isSafe;
    /** UnsafeReason
     * Bitfield listing the reasons to why the track is considered to be unsafe. For bit definitions, see TrackUnsafeReasons.
     * Min: 0
     * Max: 255
     */
    uint8_t unsafeReason;
    /** ClothoidVariance
     * Describes lane marking clothoid variance
     */
    VisionCore_Road_ClothoidVariance clothoidVariance;
} VisionCore_Road_LaneTrack;

typedef struct _VisionCore_Road_EgoLane {
    /** Left
     * Left ego lane boundary
     */
    VisionCore_Road_LaneTrack left;
    /** Right
     * Right ego lane boundary
     */
    VisionCore_Road_LaneTrack right;
    /** ParallelDistance
     * Longitudinal distance in which the left and right tracks are parallel
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 150
     */
    uint16_t parallelDistance;
} VisionCore_Road_EgoLane;

typedef struct _VisionCore_Road_LaneOutput {
    /** EgoLane
     * The ego lane
     */
    VisionCore_Road_EgoLane egoLane;
    /** CoupledEgoLane
     * The coupled ego lane
     */
    VisionCore_Road_EgoLane coupledEgoLane;
    /** NeighborLeft
     * Left neighbor lane boundary
     */
    VisionCore_Road_LaneTrack neighborLeft;
    /** NeighborRight
     * Right neighbor lane boundary
     */
    VisionCore_Road_LaneTrack neighborRight;
    pb_size_t events_count;
    /** Events
     * Describes the current lane events
     */
    VisionCore_Road_LaneEvent events[4];
    /** TemporaryMarkings
     * Describes temporary markings
     */
    VisionCore_Road_TemporaryMarkings temporaryMarkings;
    /** SideSuggestion
     * Recommendation of output data to be used by steering assist and similar functions
     */
    VisionCore_Road_SideSuggestion sideSuggestion;
    /** LaneChange
     * Describes the direction of the lane change
     */
    VisionCore_Road_LaneChange laneChange;
    /** FrameDrop
     * True means algorithm has executed without new input data
     */
    bool frameDrop;
    /** BlockageDuration
     * Time with detected blockage
     * Unit: s
     * Min: 0
     * Max: 1800
     */
    uint16_t blockageDuration;
    /** SelfAssessmentFailed
     * True means that the lane self assessment algorithm detected an error
     */
    bool selfAssessmentFailed;
    /** AttentionMarkers
     * True means that the selection mode attention markings has been detected
     */
    bool attentionMarkers;
    /** OperationMode
     * Describes the operation mode
     */
    VisionCore_Road_LaneOperationMode operationMode;
} VisionCore_Road_LaneOutput;

/* Struct field encoding specification for pb */
extern const pb_field_t VisionCore_Road_LaneEvent_fields[6];
extern const pb_field_t VisionCore_Road_Clothoid_fields[8];
extern const pb_field_t VisionCore_Road_ClothoidVariance_fields[6];
extern const pb_field_t VisionCore_Road_LaneTrack_fields[21];
extern const pb_field_t VisionCore_Road_TemporaryMarkings_fields[3];
extern const pb_field_t VisionCore_Road_EgoLane_fields[4];
extern const pb_field_t VisionCore_Road_LaneOutput_fields[14];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_ROAD_LANEOUTPUT_INCLUDED */
