/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef VISIONCORE_ROAD_FREESPACE_INCLUDED
#define VISIONCORE_ROAD_FREESPACE_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#include "VisionCore/Common/Coords.cpb.h"
#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define VisionCore_Road_FreespaceSector_size                                             ((7 + VisionCore_Common_Coord2_m_0_01_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_Freespace_size                                                   (1020)

/* Message IDs (where set with "identifier" option) */
#define VisionCore_Road_Freespace_source                                                 2U
#define VisionCore_Road_Freespace_identifier                                             206U
#define VisionCore_Road_Freespace_majorVersion                                           1U
#define VisionCore_Road_Freespace_minorVersion                                           0U

/* Enum definitions */
typedef enum _VisionCore_Road_FreespaceBoundaryType {
    VisionCore_Road_FreespaceBoundaryType_None = 0,
    VisionCore_Road_FreespaceBoundaryType_RoadUser = 1,
    VisionCore_Road_FreespaceBoundaryType_Traversable = 2,
    VisionCore_Road_FreespaceBoundaryType_NonTraversable = 3,
    VisionCore_Road_FreespaceBoundaryType_Unknown = 4
} VisionCore_Road_FreespaceBoundaryType;
#define VisionCore_Road_FreespaceBoundaryType_MIN VisionCore_Road_FreespaceBoundaryType_None
#define VisionCore_Road_FreespaceBoundaryType_MAX VisionCore_Road_FreespaceBoundaryType_Unknown
#define VisionCore_Road_FreespaceBoundaryType_ARRAYSIZE ((VisionCore_Road_FreespaceBoundaryType)(VisionCore_Road_FreespaceBoundaryType_Unknown+1))

/* Struct definitions */
typedef struct _VisionCore_Road_FreespaceSector {
    /** BoundaryPosition
     * Position of the closest boundary in the sector
     */
    VisionCore_Common_Coord2_m_0_01 boundaryPosition;
    /** Type
     * Type of limitation
     */
    VisionCore_Road_FreespaceBoundaryType type;
    /** Confidence
     * Detection confidence based on CNN classification
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t confidence;
} VisionCore_Road_FreespaceSector;

typedef struct _VisionCore_Road_Freespace {
    pb_size_t sectors_count;
    /** Sectors
     * All freespace sectors, from negative to positive angle / right to left in Vertical FoV. ±30°.
     */
    VisionCore_Road_FreespaceSector sectors[60];
} VisionCore_Road_Freespace;

/* Struct field encoding specification for pb */
extern const pb_field_t VisionCore_Road_FreespaceSector_fields[4];
extern const pb_field_t VisionCore_Road_Freespace_fields[2];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_ROAD_FREESPACE_INCLUDED */
