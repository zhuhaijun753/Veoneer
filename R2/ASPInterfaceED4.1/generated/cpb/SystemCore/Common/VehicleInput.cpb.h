/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef SYSTEMCORE_COMMON_VEHICLEINPUT_INCLUDED
#define SYSTEMCORE_COMMON_VEHICLEINPUT_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define SystemCore_Common_AcceleratorPedal_size                                          (5)
#define SystemCore_Common_BrakeSystem_size                                               (8)
#define SystemCore_Common_FrontWheel_size                                                (14)
#define SystemCore_Common_SafePositionsFrontSeats_size                                   (4)
#define SystemCore_Common_SteeringWheel_size                                             (22)
#define SystemCore_Common_VehicleInput_size                                              ((14 + SystemCore_Common_AcceleratorPedal_size + SystemCore_Common_BrakeSystem_size + SystemCore_Common_SteeringWheel_size + SystemCore_Common_FrontWheel_size + SystemCore_Common_SafePositionsFrontSeats_size) + PB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define SystemCore_Common_VehicleInput_source                                            3U
#define SystemCore_Common_VehicleInput_identifier                                        1U
#define SystemCore_Common_VehicleInput_majorVersion                                      3U
#define SystemCore_Common_VehicleInput_minorVersion                                      1U

/* Enum definitions */
typedef enum _SystemCore_Common_AngleControlLimitState {
    SystemCore_Common_AngleControlLimitState_NotLimited = 0,
    SystemCore_Common_AngleControlLimitState_TorqueLimitUpperReached = 1,
    SystemCore_Common_AngleControlLimitState_TorqueLimitLowerReached = 2,
    SystemCore_Common_AngleControlLimitState_RateLimitReached = 3
} SystemCore_Common_AngleControlLimitState;
#define SystemCore_Common_AngleControlLimitState_MIN SystemCore_Common_AngleControlLimitState_NotLimited
#define SystemCore_Common_AngleControlLimitState_MAX SystemCore_Common_AngleControlLimitState_RateLimitReached
#define SystemCore_Common_AngleControlLimitState_ARRAYSIZE ((SystemCore_Common_AngleControlLimitState)(SystemCore_Common_AngleControlLimitState_RateLimitReached+1))

typedef enum _SystemCore_Common_BrakePedalState {
    SystemCore_Common_BrakePedalState_Undefined = 0,
    SystemCore_Common_BrakePedalState_NotPressed = 1,
    SystemCore_Common_BrakePedalState_Pressed = 2
} SystemCore_Common_BrakePedalState;
#define SystemCore_Common_BrakePedalState_MIN SystemCore_Common_BrakePedalState_Undefined
#define SystemCore_Common_BrakePedalState_MAX SystemCore_Common_BrakePedalState_Pressed
#define SystemCore_Common_BrakePedalState_ARRAYSIZE ((SystemCore_Common_BrakePedalState)(SystemCore_Common_BrakePedalState_Pressed+1))

typedef enum _SystemCore_Common_TurnIndicatorState {
    SystemCore_Common_TurnIndicatorState_Idle = 0,
    SystemCore_Common_TurnIndicatorState_Left = 1,
    SystemCore_Common_TurnIndicatorState_Right = 2
} SystemCore_Common_TurnIndicatorState;
#define SystemCore_Common_TurnIndicatorState_MIN SystemCore_Common_TurnIndicatorState_Idle
#define SystemCore_Common_TurnIndicatorState_MAX SystemCore_Common_TurnIndicatorState_Right
#define SystemCore_Common_TurnIndicatorState_ARRAYSIZE ((SystemCore_Common_TurnIndicatorState)(SystemCore_Common_TurnIndicatorState_Right+1))

/* Struct definitions */
typedef struct _SystemCore_Common_AcceleratorPedal {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** PressedAmount
     * Percentage describing the state of the accelerator pedal
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t pressedAmount;
} SystemCore_Common_AcceleratorPedal;

typedef struct _SystemCore_Common_BrakeSystem {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** BrakePedalState
     * State of the brake pedal
     */
    SystemCore_Common_BrakePedalState brakePedalState;
    /** DecelerationRequest
     * Requested deceleration by driver, positive since it is deceleration and not acceleration
     * Unit: m/sÂ²
     * Scale: 0.01
     * Min: 0
     * Max: 25
     */
    uint16_t decelerationRequest;
} SystemCore_Common_BrakeSystem;

typedef struct _SystemCore_Common_FrontWheel {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** Angle
     * The front wheel angle of the car
     * Unit: rad
     * Scale: 0.0001
     * Min: -1.5
     * Max: 1.5
     */
    int32_t angle;
    /** AngleRate
     * The front wheel angle rate of the car
     * Unit: rad/s
     * Scale: 0.0001
     * Min: -1.5
     * Max: 1.5
     */
    int32_t angleRate;
} SystemCore_Common_FrontWheel;

typedef struct _SystemCore_Common_SafePositionsFrontSeats {
    /** Left
     * Indicates that the person in the left front seat is in a safe position
     */
    bool left;
    /** Right
     * Indicates that the person in the right front seat is in a safe position
     */
    bool right;
} SystemCore_Common_SafePositionsFrontSeats;

typedef struct _SystemCore_Common_SteeringWheel {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** Limited
     * If the function output on the steering is limited
     */
    SystemCore_Common_AngleControlLimitState limited;
    /** Torque
     * The steering wheel torque performed by the driver
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t torque;
    /** FunctionAppliedTorque
     * The steering wheel torque performed by the function
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t functionAppliedTorque;
    /** TotalAppliedTorque
     * The total torque performed by electric power assisted steering, defined at the steering wheel.
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t totalAppliedTorque;
} SystemCore_Common_SteeringWheel;

typedef struct _SystemCore_Common_VehicleInput {
    /** AcceleratorPedal
     * Current accelerator pedal information
     */
    SystemCore_Common_AcceleratorPedal acceleratorPedal;
    /** BrakeSystem
     * Current brake system information
     */
    SystemCore_Common_BrakeSystem brakeSystem;
    /** SteeringWheel
     * Current steering wheel information
     */
    SystemCore_Common_SteeringWheel steeringWheel;
    /** FrontWheel
     * Current front wheel information
     */
    SystemCore_Common_FrontWheel frontWheel;
    /** TurnIndicator
     * Current turn indicator information
     */
    SystemCore_Common_TurnIndicatorState turnIndicator;
    /** DriverDoorOpen
     * Indicates that the driver door is open
     */
    bool driverDoorOpen;
    /** SafePositionsFrontSeats
     * Indicates safety status of driver and passenger seating position
     */
    SystemCore_Common_SafePositionsFrontSeats safePositionsFrontSeats;
} SystemCore_Common_VehicleInput;

/* Struct field encoding specification for pb */
extern const pb_field_t SystemCore_Common_AcceleratorPedal_fields[3];
extern const pb_field_t SystemCore_Common_BrakeSystem_fields[4];
extern const pb_field_t SystemCore_Common_SteeringWheel_fields[6];
extern const pb_field_t SystemCore_Common_FrontWheel_fields[4];
extern const pb_field_t SystemCore_Common_SafePositionsFrontSeats_fields[3];
extern const pb_field_t SystemCore_Common_VehicleInput_fields[8];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* SYSTEMCORE_COMMON_VEHICLEINPUT_INCLUDED */
