/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef ZENUITY_LATERALCONTROL_OUTPUT_INCLUDED
#define ZENUITY_LATERALCONTROL_OUTPUT_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define Zenuity_LateralControl_FrontWheelRequest_size                                    (36)
#define Zenuity_LateralControl_LateralControlOutput_size                                 ((4 + Zenuity_LateralControl_FrontWheelRequest_size) + PB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define Zenuity_LateralControl_LateralControlOutput_source                               1U
#define Zenuity_LateralControl_LateralControlOutput_identifier                           10U
#define Zenuity_LateralControl_LateralControlOutput_majorVersion                         1U
#define Zenuity_LateralControl_LateralControlOutput_minorVersion                         0U

/* Enum definitions */
typedef enum _Zenuity_LateralControl_LateralControlMode {
    Zenuity_LateralControl_LateralControlMode_NoRequest = 0,
    Zenuity_LateralControl_LateralControlMode_TrafficAssist = 1,
    Zenuity_LateralControl_LateralControlMode_Lka = 2,
    Zenuity_LateralControl_LateralControlMode_ElkaRoadEdge = 3,
    Zenuity_LateralControl_LateralControlMode_ElkaFrontObjects = 4,
    Zenuity_LateralControl_LateralControlMode_ElkaBlis = 5
} Zenuity_LateralControl_LateralControlMode;
#define Zenuity_LateralControl_LateralControlMode_MIN Zenuity_LateralControl_LateralControlMode_NoRequest
#define Zenuity_LateralControl_LateralControlMode_MAX Zenuity_LateralControl_LateralControlMode_ElkaBlis
#define Zenuity_LateralControl_LateralControlMode_ARRAYSIZE ((Zenuity_LateralControl_LateralControlMode)(Zenuity_LateralControl_LateralControlMode_ElkaBlis+1))

/* Struct definitions */
typedef struct _Zenuity_LateralControl_FrontWheelRequest {
    /** Angle
     * Wheel angle request
     * Unit: rad
     * Scale: 0.0001
     * Min: -14.5
     * Max: 14.5
     */
    int32_t angle;
    /** AngleRateLimit
     * The front wheel angle rate limit
     * Unit: rad/s
     * Scale: 0.0001
     * Min: -7
     * Max: 7
     */
    int32_t angleRateLimit;
    /** LowerTorqueLimit
     * Minimum value for function applied torque, defined at the steering column
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t lowerTorqueLimit;
    /** UpperLorqueLimit
     * Maximum value for function applied torque, defined at the steering column
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t upperLorqueLimit;
    /** AdditionalTorque
     * The signal can be interpreted as a feed forward signal
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t additionalTorque;
    /** BandwidthScaling
     * The desired bandwidth for the angle controller ranges from 0 (minimum bandwidth) to 1 (maximum bandwidth)
     * Scale: 0.01
     * Min: 0
     * Max: 1
     */
    uint32_t bandwidthScaling;
} Zenuity_LateralControl_FrontWheelRequest;

typedef struct _Zenuity_LateralControl_LateralControlOutput {
    /** Mode
     * Requested lateral actuation mode
     */
    Zenuity_LateralControl_LateralControlMode mode;
    /** FrontWheelRequest
     * Requested front wheel actuation
     */
    Zenuity_LateralControl_FrontWheelRequest frontWheelRequest;
} Zenuity_LateralControl_LateralControlOutput;

/* Struct field encoding specification for pb */
extern const pb_field_t Zenuity_LateralControl_FrontWheelRequest_fields[7];
extern const pb_field_t Zenuity_LateralControl_LateralControlOutput_fields[3];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ZENUITY_LATERALCONTROL_OUTPUT_INCLUDED */
