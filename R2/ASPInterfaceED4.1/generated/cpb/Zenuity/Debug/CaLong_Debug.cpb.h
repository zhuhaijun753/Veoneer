/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef ZENUITY_DEBUG_CALONG_DEBUG_INCLUDED
#define ZENUITY_DEBUG_CALONG_DEBUG_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define Zenuity_Debug_AebGeneralStatusDiagnostic_size                                    (6)
#define Zenuity_Debug_AebInhibitionDiagnostic_size                                       (18)
#define Zenuity_Debug_AebPrimaryTarget_size                                              (4)
#define Zenuity_Debug_BrakingDiagnostic_size                                             (12)
#define Zenuity_Debug_BrakingGainInhibitConditionStatus_size                             (8)
#define Zenuity_Debug_CollisionWarningInhibitConditionStatus_size                        (8)
#define Zenuity_Debug_CollisionWarningStartConditionStatus_size                          (12)
#define Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics_size                             (11)
#define Zenuity_Debug_HighestThreatInfo_size                                             (12)
#define Zenuity_Debug_ObjectManeuverOverlapsHostManeuver_size                            (8)
#define Zenuity_Debug_ThreatAssessmentDiagnosticObject_size                              (79)
#define Zenuity_Debug_ASILThreatAssesmentDiagnostics_size                                ((8 + Zenuity_Debug_ObjectManeuverOverlapsHostManeuver_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define Zenuity_Debug_AllBrakeDiagnostics_size                                           ((4 + Zenuity_Debug_BrakingDiagnostic_size + Zenuity_Debug_BrakingDiagnostic_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define Zenuity_Debug_CollisionWarningDiagnostics_size                                   ((18 + Zenuity_Debug_BrakingGainInhibitConditionStatus_size + Zenuity_Debug_CollisionWarningInhibitConditionStatus_size + Zenuity_Debug_CollisionWarningStartConditionStatus_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define Zenuity_Debug_ThreatAssessmentDiagnostics_size                                   (405)
#define Zenuity_Debug_VruCollisionAvoidanceDiagnostics_size                              ((2 + Zenuity_Debug_HighestThreatInfo_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define Zenuity_Debug_AebDiagnostics_size                                                ((8 + Zenuity_Debug_AllBrakeDiagnostics_size + Zenuity_Debug_AebInhibitionDiagnostic_size + Zenuity_Debug_AebGeneralStatusDiagnostic_size + Zenuity_Debug_AebPrimaryTarget_size) + PB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define Zenuity_Debug_AebDiagnostics_source                                              1U
#define Zenuity_Debug_AebDiagnostics_identifier                                          9001U
#define Zenuity_Debug_AebDiagnostics_majorVersion                                        1U
#define Zenuity_Debug_AebDiagnostics_minorVersion                                        1U
#define Zenuity_Debug_CollisionWarningDiagnostics_source                                 1U
#define Zenuity_Debug_CollisionWarningDiagnostics_identifier                             9002U
#define Zenuity_Debug_CollisionWarningDiagnostics_majorVersion                           1U
#define Zenuity_Debug_CollisionWarningDiagnostics_minorVersion                           2U
#define Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics_source                           1U
#define Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics_identifier                       9003U
#define Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics_majorVersion                     1U
#define Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics_minorVersion                     0U
#define Zenuity_Debug_ThreatAssessmentDiagnostics_source                                 1U
#define Zenuity_Debug_ThreatAssessmentDiagnostics_identifier                             9004U
#define Zenuity_Debug_ThreatAssessmentDiagnostics_majorVersion                           2U
#define Zenuity_Debug_ThreatAssessmentDiagnostics_minorVersion                           0U
#define Zenuity_Debug_ASILThreatAssesmentDiagnostics_source                              1U
#define Zenuity_Debug_ASILThreatAssesmentDiagnostics_identifier                          9005U
#define Zenuity_Debug_ASILThreatAssesmentDiagnostics_majorVersion                        1U
#define Zenuity_Debug_ASILThreatAssesmentDiagnostics_minorVersion                        0U
#define Zenuity_Debug_VruCollisionAvoidanceDiagnostics_source                            1U
#define Zenuity_Debug_VruCollisionAvoidanceDiagnostics_identifier                        9006U
#define Zenuity_Debug_VruCollisionAvoidanceDiagnostics_majorVersion                      2U
#define Zenuity_Debug_VruCollisionAvoidanceDiagnostics_minorVersion                      0U

/* Enum definitions */
typedef enum _Zenuity_Debug_AudioVisualWarningState {
    Zenuity_Debug_AudioVisualWarningState_Unspecified = 0,
    Zenuity_Debug_AudioVisualWarningState_Standby = 1,
    Zenuity_Debug_AudioVisualWarningState_Warning = 2,
    Zenuity_Debug_AudioVisualWarningState_PostWarning = 3,
    Zenuity_Debug_AudioVisualWarningState_Inhibition = 4
} Zenuity_Debug_AudioVisualWarningState;
#define Zenuity_Debug_AudioVisualWarningState_MIN Zenuity_Debug_AudioVisualWarningState_Unspecified
#define Zenuity_Debug_AudioVisualWarningState_MAX Zenuity_Debug_AudioVisualWarningState_Inhibition
#define Zenuity_Debug_AudioVisualWarningState_ARRAYSIZE ((Zenuity_Debug_AudioVisualWarningState)(Zenuity_Debug_AudioVisualWarningState_Inhibition+1))

typedef enum _Zenuity_Debug_BrakeGainState {
    Zenuity_Debug_BrakeGainState_Unspecified = 0,
    Zenuity_Debug_BrakeGainState_Inhibition = 1,
    Zenuity_Debug_BrakeGainState_Standby = 2,
    Zenuity_Debug_BrakeGainState_Requested = 3
} Zenuity_Debug_BrakeGainState;
#define Zenuity_Debug_BrakeGainState_MIN Zenuity_Debug_BrakeGainState_Unspecified
#define Zenuity_Debug_BrakeGainState_MAX Zenuity_Debug_BrakeGainState_Requested
#define Zenuity_Debug_BrakeGainState_ARRAYSIZE ((Zenuity_Debug_BrakeGainState)(Zenuity_Debug_BrakeGainState_Requested+1))

typedef enum _Zenuity_Debug_BrakePulseState {
    Zenuity_Debug_BrakePulseState_Unspecified = 0,
    Zenuity_Debug_BrakePulseState_Inhibition = 1,
    Zenuity_Debug_BrakePulseState_Standby = 2,
    Zenuity_Debug_BrakePulseState_Delayed = 3,
    Zenuity_Debug_BrakePulseState_PulseRequested = 4,
    Zenuity_Debug_BrakePulseState_PostPulseRequest = 5
} Zenuity_Debug_BrakePulseState;
#define Zenuity_Debug_BrakePulseState_MIN Zenuity_Debug_BrakePulseState_Unspecified
#define Zenuity_Debug_BrakePulseState_MAX Zenuity_Debug_BrakePulseState_PostPulseRequest
#define Zenuity_Debug_BrakePulseState_ARRAYSIZE ((Zenuity_Debug_BrakePulseState)(Zenuity_Debug_BrakePulseState_PostPulseRequest+1))

typedef enum _Zenuity_Debug_ObjectTrajectoryInPath {
    Zenuity_Debug_ObjectTrajectoryInPath_Unspecified = 0,
    Zenuity_Debug_ObjectTrajectoryInPath_ActualMotion = 1,
    Zenuity_Debug_ObjectTrajectoryInPath_BrakingForIntervention = 2,
    Zenuity_Debug_ObjectTrajectoryInPath_TurningLeft = 3,
    Zenuity_Debug_ObjectTrajectoryInPath_TurningRight = 4
} Zenuity_Debug_ObjectTrajectoryInPath;
#define Zenuity_Debug_ObjectTrajectoryInPath_MIN Zenuity_Debug_ObjectTrajectoryInPath_Unspecified
#define Zenuity_Debug_ObjectTrajectoryInPath_MAX Zenuity_Debug_ObjectTrajectoryInPath_TurningRight
#define Zenuity_Debug_ObjectTrajectoryInPath_ARRAYSIZE ((Zenuity_Debug_ObjectTrajectoryInPath)(Zenuity_Debug_ObjectTrajectoryInPath_TurningRight+1))

typedef enum _Zenuity_Debug_PostAebStatus {
    Zenuity_Debug_PostAebStatus_Unspecified = 0,
    Zenuity_Debug_PostAebStatus_NotActive = 1,
    Zenuity_Debug_PostAebStatus_PreBraking = 2,
    Zenuity_Debug_PostAebStatus_FullBraking = 3,
    Zenuity_Debug_PostAebStatus_VisionOnlyVruBraking = 4,
    Zenuity_Debug_PostAebStatus_DeniedBeltStatus = 5,
    Zenuity_Debug_PostAebStatus_DeniedFaultManager = 6,
    Zenuity_Debug_PostAebStatus_DeniedSpeedThreshold = 7,
    Zenuity_Debug_PostAebStatus_OverrideByDriver = 8,
    Zenuity_Debug_PostAebStatus_FullBrakingRearObject = 9
} Zenuity_Debug_PostAebStatus;
#define Zenuity_Debug_PostAebStatus_MIN Zenuity_Debug_PostAebStatus_Unspecified
#define Zenuity_Debug_PostAebStatus_MAX Zenuity_Debug_PostAebStatus_FullBrakingRearObject
#define Zenuity_Debug_PostAebStatus_ARRAYSIZE ((Zenuity_Debug_PostAebStatus)(Zenuity_Debug_PostAebStatus_FullBrakingRearObject+1))

typedef enum _Zenuity_Debug_AebTriggeringScenario {
    Zenuity_Debug_AebTriggeringScenario_Unspecified = 0,
    Zenuity_Debug_AebTriggeringScenario_Unknown = 1,
    Zenuity_Debug_AebTriggeringScenario_SingleTarget = 2,
    Zenuity_Debug_AebTriggeringScenario_MultipleTargets = 3,
    Zenuity_Debug_AebTriggeringScenario_EgoTurnAcrossPath = 4,
    Zenuity_Debug_AebTriggeringScenario_OncomingObjectInEgoLane = 5,
    Zenuity_Debug_AebTriggeringScenario_RearObject = 6
} Zenuity_Debug_AebTriggeringScenario;
#define Zenuity_Debug_AebTriggeringScenario_MIN Zenuity_Debug_AebTriggeringScenario_Unspecified
#define Zenuity_Debug_AebTriggeringScenario_MAX Zenuity_Debug_AebTriggeringScenario_RearObject
#define Zenuity_Debug_AebTriggeringScenario_ARRAYSIZE ((Zenuity_Debug_AebTriggeringScenario)(Zenuity_Debug_AebTriggeringScenario_RearObject+1))

typedef enum _Zenuity_Debug_AebDeactivationCause {
    Zenuity_Debug_AebDeactivationCause_Unspecified = 0,
    Zenuity_Debug_AebDeactivationCause_Unknown = 1,
    Zenuity_Debug_AebDeactivationCause_PrimaryTargetNotAvailable = 2,
    Zenuity_Debug_AebDeactivationCause_PrimaryTargetChanged = 3,
    Zenuity_Debug_AebDeactivationCause_LowPrimaryTargetQuality = 4,
    Zenuity_Debug_AebDeactivationCause_StandingStill = 5,
    Zenuity_Debug_AebDeactivationCause_NoBrakingRequired = 6,
    Zenuity_Debug_AebDeactivationCause_HighTtc = 7
} Zenuity_Debug_AebDeactivationCause;
#define Zenuity_Debug_AebDeactivationCause_MIN Zenuity_Debug_AebDeactivationCause_Unspecified
#define Zenuity_Debug_AebDeactivationCause_MAX Zenuity_Debug_AebDeactivationCause_HighTtc
#define Zenuity_Debug_AebDeactivationCause_ARRAYSIZE ((Zenuity_Debug_AebDeactivationCause)(Zenuity_Debug_AebDeactivationCause_HighTtc+1))

typedef enum _Zenuity_Debug_MotionPattern {
    Zenuity_Debug_MotionPattern_Unspecified = 0,
    Zenuity_Debug_MotionPattern_Unknown = 1,
    Zenuity_Debug_MotionPattern_Stationary = 2,
    Zenuity_Debug_MotionPattern_Receding = 3,
    Zenuity_Debug_MotionPattern_Oncoming = 4,
    Zenuity_Debug_MotionPattern_Crossing = 5
} Zenuity_Debug_MotionPattern;
#define Zenuity_Debug_MotionPattern_MIN Zenuity_Debug_MotionPattern_Unspecified
#define Zenuity_Debug_MotionPattern_MAX Zenuity_Debug_MotionPattern_Crossing
#define Zenuity_Debug_MotionPattern_ARRAYSIZE ((Zenuity_Debug_MotionPattern)(Zenuity_Debug_MotionPattern_Crossing+1))

typedef enum _Zenuity_Debug_EmaState {
    Zenuity_Debug_EmaState_Unspecified = 0,
    Zenuity_Debug_EmaState_NotActive = 1,
    Zenuity_Debug_EmaState_AvoidanceActive = 2,
    Zenuity_Debug_EmaState_Waiting = 3,
    Zenuity_Debug_EmaState_ReturnActive = 4,
    Zenuity_Debug_EmaState_ReactivationDelay = 5
} Zenuity_Debug_EmaState;
#define Zenuity_Debug_EmaState_MIN Zenuity_Debug_EmaState_Unspecified
#define Zenuity_Debug_EmaState_MAX Zenuity_Debug_EmaState_ReactivationDelay
#define Zenuity_Debug_EmaState_ARRAYSIZE ((Zenuity_Debug_EmaState)(Zenuity_Debug_EmaState_ReactivationDelay+1))

typedef enum _Zenuity_Debug_ObjectBusType {
    Zenuity_Debug_ObjectBusType_Unspecified = 0,
    Zenuity_Debug_ObjectBusType_Front = 1,
    Zenuity_Debug_ObjectBusType_Side = 2,
    Zenuity_Debug_ObjectBusType_Rear = 3
} Zenuity_Debug_ObjectBusType;
#define Zenuity_Debug_ObjectBusType_MIN Zenuity_Debug_ObjectBusType_Unspecified
#define Zenuity_Debug_ObjectBusType_MAX Zenuity_Debug_ObjectBusType_Rear
#define Zenuity_Debug_ObjectBusType_ARRAYSIZE ((Zenuity_Debug_ObjectBusType)(Zenuity_Debug_ObjectBusType_Rear+1))

typedef enum _Zenuity_Debug_WarningType {
    Zenuity_Debug_WarningType_Off = 0,
    Zenuity_Debug_WarningType_BrakeThreatNumber = 1,
    Zenuity_Debug_WarningType_Aeb = 2,
    Zenuity_Debug_WarningType_Acc = 3,
    Zenuity_Debug_WarningType_ComfortDistance = 4,
    Zenuity_Debug_WarningType_AbnormalAcc = 5
} Zenuity_Debug_WarningType;
#define Zenuity_Debug_WarningType_MIN Zenuity_Debug_WarningType_Off
#define Zenuity_Debug_WarningType_MAX Zenuity_Debug_WarningType_AbnormalAcc
#define Zenuity_Debug_WarningType_ARRAYSIZE ((Zenuity_Debug_WarningType)(Zenuity_Debug_WarningType_AbnormalAcc+1))

/* Struct definitions */
typedef struct _Zenuity_Debug_AebGeneralStatusDiagnostic {
    /** DeactivationCause
     * Describes what cause deactivated the AEB intervention
     */
    Zenuity_Debug_AebDeactivationCause deactivationCause;
    /** PostStatus
     * Status of AEB after an intervention is issued or denied. Describes what is requested or why braking is being denied.
     */
    Zenuity_Debug_PostAebStatus postStatus;
    /** TriggeringCause
     * Indicates which scenario triggered AEB for the current intervention
     */
    Zenuity_Debug_AebTriggeringScenario triggeringCause;
} Zenuity_Debug_AebGeneralStatusDiagnostic;

typedef struct _Zenuity_Debug_AebInhibitionDiagnostic {
    /** AbortIfNotConfirmed
     * Abort AEB if a target is not confirmed
     */
    bool abortIfNotConfirmed;
    /** HostAvoidInhibit */
    bool hostAvoidInhibit;
    /** InhibitActivation */
    bool inhibitActivation;
    /** ObjectDirectionInhibit */
    bool objectDirectionInhibit;
    /** OncomingInhibit
     * Do not brake for oncoming objects
     */
    bool oncomingInhibit;
    /** NotOncomingScenarioInScope */
    bool notOncomingScenarioInScope;
    /** PointOfImpactInhibit */
    bool pointOfImpactInhibit;
    /** RadarOnlyInhibit */
    bool radarOnlyInhibit;
    /** SpeedInhibit
     * Inhibition because of speed threshold
     */
    bool speedInhibit;
} Zenuity_Debug_AebInhibitionDiagnostic;

typedef struct _Zenuity_Debug_AebPrimaryTarget {
    /** ObjectIdForBraking
     * Object which triggered the braking, to be matched with vision_id in ThreatAssessmentDiagnosticObject
     * Min: 0
     * Max: 65535
     */
    uint16_t objectIdForBraking;
} Zenuity_Debug_AebPrimaryTarget;

typedef struct _Zenuity_Debug_BrakingDiagnostic {
    /** AccelerationThreat
     * Acceleration threat exists
     */
    bool accelerationThreat;
    /** BrakingThreat
     * Braking threat exists
     */
    bool brakingThreat;
    /** MultiTargetSteeringThreat
     * Multiple target steering threat exists
     */
    bool multiTargetSteeringThreat;
    /** BrakingConfidence
     * Braking confidence
     */
    bool brakingConfidence;
    /** SingleTargetSteeringThreat
     * Single target steering threat exists
     */
    bool singleTargetSteeringThreat;
    /** SteeringThreat
     * Steering threat exists
     */
    bool steeringThreat;
} Zenuity_Debug_BrakingDiagnostic;

typedef struct _Zenuity_Debug_BrakingGainInhibitConditionStatus {
    /** BrakeGainActive
     * Brake gain is active
     */
    bool brakeGainActive;
    /** BrakeThreatNumberAboveLimit
     * Brake threat number is above the limit
     */
    bool brakeThreatNumberAboveLimit;
    /** DriverPressedBrakePedal
     * Driver pressed the brake pedal
     */
    bool driverPressedBrakePedal;
    /** DriverDecelerationRequestAboveLimit
     * Driver requested a deceleration above the limit
     */
    bool driverDecelerationRequestAboveLimit;
} Zenuity_Debug_BrakingGainInhibitConditionStatus;

typedef struct _Zenuity_Debug_CollisionWarningInhibitConditionStatus {
    /** CwInhibit
     * Collision warning is inhibited
     */
    bool cwInhibit;
    /** BelowLowSpeedLimit
     * Vehicle speed is below the low speed limit
     */
    bool belowLowSpeedLimit;
    /** AboveHighSpeedLimit
     * Vehicle speed is above the high speed limit
     */
    bool aboveHighSpeedLimit;
    /** DisabledByFaultManager
     * Collision warning is disabled by fault manager
     */
    bool disabledByFaultManager;
} Zenuity_Debug_CollisionWarningInhibitConditionStatus;

typedef struct _Zenuity_Debug_CollisionWarningStartConditionStatus {
    /** StartConditionsMet
     * The start conditions are met
     */
    bool startConditionsMet;
    /** BtnBasedWarningDriver
     * BTN Based Warning - Driver
     */
    bool btnBasedWarningDriver;
    /** BtnBaseWarningAcc
     * BTN Based Warning - ACC
     */
    bool btnBaseWarningAcc;
    /** ComfortDistanceWarning
     * Comfort Distance Warning
     */
    bool comfortDistanceWarning;
    /** AbnormalAccelerationWarning
     * Abnormal Acceleration Warning
     */
    bool abnormalAccelerationWarning;
    /** VisionOnlyWarning
     * Vision Only Warning
     */
    bool visionOnlyWarning;
} Zenuity_Debug_CollisionWarningStartConditionStatus;

typedef struct _Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics {
    /** ActivatingLateralJerk
     * Lateral jerk that activated the evasive manoeuvering function
     * Unit: m/s³
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float activatingLateralJerk;
    /** EventIsJustified
     * Evasive manoeuvering is valid
     */
    bool eventIsJustified;
    /** Scenario
     * Motion pattern of the target that activated evasive manoeuvering function
     */
    Zenuity_Debug_MotionPattern scenario;
    /** State
     * State of the evasive manoeuvering function
     */
    Zenuity_Debug_EmaState state;
} Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics;

typedef struct _Zenuity_Debug_HighestThreatInfo {
    /** ObjectId
     * Object ID of the highest threat
     * Min: 0
     * Max: 65535
     */
    uint16_t objectId;
    /** TimeToCollision
     * TTC to highest threat
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 100
     */
    uint16_t timeToCollision;
    /** LateralMargin
     * Lateral margin to highest threat
     * Unit: m
     * Scale: 0.1
     * Min: -1000
     * Max: 1000
     */
    int16_t lateralMargin;
} Zenuity_Debug_HighestThreatInfo;

typedef struct _Zenuity_Debug_ObjectManeuverOverlapsHostManeuver {
    /** ObjectLeftHostLeftOverlap
     * Object turning left, host turning left
     */
    bool objectLeftHostLeftOverlap;
    /** ObjectLeftHostRightOverlap
     * Object turning left, host turning right
     */
    bool objectLeftHostRightOverlap;
    /** ObjectRightHostLeftOverlap
     * Object turning right, host turning left
     */
    bool objectRightHostLeftOverlap;
    /** ObjectRightHostRightOverlap
     * Object turning right, host turning right
     */
    bool objectRightHostRightOverlap;
} Zenuity_Debug_ObjectManeuverOverlapsHostManeuver;

typedef struct _Zenuity_Debug_ThreatAssessmentDiagnosticObject {
    /** ElectronicHorizonUsage
     * Electronic horizon is used
     */
    bool electronicHorizonUsage;
    /** LateralSafetyOffsetToObject
     * Lateral safety offset
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float lateralSafetyOffsetToObject;
    /** LateralInPathOffsetToPredictedObject
     * Lateral in-path offset to predicted object
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float lateralInPathOffsetToPredictedObject;
    /** LateralInPathOffsetToObject
     * Lateral in-path offset to object
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float lateralInPathOffsetToObject;
    /** LongitudinalSafetyOffsetToObject
     * Longitudinal safety offset
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float longitudinalSafetyOffsetToObject;
    /** LoopIndexTa
     * Loop index for ThreatAssessment
     * Min: 0
     * Max: 32
     */
    uint8_t loopIndexTa;
    /** ObjectBusSource
     * Source of object
     */
    Zenuity_Debug_ObjectBusType objectBusSource;
    /** ObjectCenterTimeVectorIndex
     * Time vector index
     * Min: 1
     * Max: 150
     */
    uint16_t objectCenterTimeVectorIndex;
    /** ObjectCosineHeading
     * Cosine of heading
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float objectCosineHeading;
    /** ObjectDirection
     * Direction of object
     */
    Zenuity_Debug_MotionPattern objectDirection;
    /** ObjectInPath
     * Object is in path
     */
    bool objectInPath;
    /** ObjectLateralPositionCenter
     * Lateral position from center
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float objectLateralPositionCenter;
    /** ObjectLength
     * Length of object
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float objectLength;
    /** ObjectLongitudinalPositionCenter
     * Longitudinal position from center
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float objectLongitudinalPositionCenter;
    /** ObjectSineHeading
     * Sine of heading
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float objectSineHeading;
    /** ObjectTrajectoryLastInPath
     * Object trajectory
     */
    Zenuity_Debug_ObjectTrajectoryInPath objectTrajectoryLastInPath;
    /** ObjectWidth
     * Width of object
     * Unit: m
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float objectWidth;
    /** TimeToReachObject
     * Time to reach object
     * Unit: s
     * Min: -3.40282e+38
     * Max: 3.40282e+38
     */
    float timeToReachObject;
    /** VisionId
     * Unique vision object id
     * Min: 0
     * Max: 255
     */
    uint8_t visionId;
} Zenuity_Debug_ThreatAssessmentDiagnosticObject;

typedef struct _Zenuity_Debug_ASILThreatAssesmentDiagnostics {
    /** ValidSensorData
     * Is set to true if the sensor measurements are validated
     */
    bool validSensorData;
    /** SufficientSensorData
     * Is set to true if there are sufficient measurements
     */
    bool sufficientSensorData;
    /** ThreatExists
     * Is set to true if a threat has been valid for a sufficient time
     */
    bool threatExists;
    /** ObjectManeuverOverlapsHostManeuver
     * Indicates if the trajectories of object and host intersect when object and host perform maneuvers
     */
    Zenuity_Debug_ObjectManeuverOverlapsHostManeuver objectManeuverOverlapsHostManeuver;
} Zenuity_Debug_ASILThreatAssesmentDiagnostics;

typedef struct _Zenuity_Debug_AllBrakeDiagnostics {
    /** FullBrake
     * Fullbrake diagnostic bus
     */
    Zenuity_Debug_BrakingDiagnostic fullBrake;
    /** PreBrake
     * Prebrake diagnostic bus
     */
    Zenuity_Debug_BrakingDiagnostic preBrake;
} Zenuity_Debug_AllBrakeDiagnostics;

typedef struct _Zenuity_Debug_CollisionWarningDiagnostics {
    /** BrakeGainInhibitConditionStatus
     * Indicates why brake gain was inhibited
     */
    Zenuity_Debug_BrakingGainInhibitConditionStatus brakeGainInhibitConditionStatus;
    /** BrakeGainState
     * State of brake gain
     */
    Zenuity_Debug_BrakeGainState brakeGainState;
    /** BrakePulseState
     * State of brake pulse
     */
    Zenuity_Debug_BrakePulseState brakePulseState;
    /** InhibitionConditionStatus
     * Indicates why collision warning is inhibited
     */
    Zenuity_Debug_CollisionWarningInhibitConditionStatus inhibitionConditionStatus;
    /** ObjectIdForWarning
     * Object that triggered the warning, to be matched with vision_id in ThreatAssessmentDiagnosticObject
     * Min: 0
     * Max: 65535
     */
    uint16_t objectIdForWarning;
    /** StartConditionStatus
     * Indicates why collision warning is issued
     */
    Zenuity_Debug_CollisionWarningStartConditionStatus startConditionStatus;
    /** WarningState
     * State of collision warning
     */
    Zenuity_Debug_AudioVisualWarningState warningState;
    /** WarningType
     * The type of Collision Warning requested
     */
    Zenuity_Debug_WarningType warningType;
} Zenuity_Debug_CollisionWarningDiagnostics;

typedef struct _Zenuity_Debug_ThreatAssessmentDiagnostics {
    pb_size_t sortedObjects_count;
    /** SortedObjects
     * Diagnostic information for sorted objects in Threat Assessment
     */
    Zenuity_Debug_ThreatAssessmentDiagnosticObject sortedObjects[5];
} Zenuity_Debug_ThreatAssessmentDiagnostics;

typedef struct _Zenuity_Debug_VruCollisionAvoidanceDiagnostics {
    /** HighestThreatInfo
     * Information regarding the selected highest threat object
     */
    Zenuity_Debug_HighestThreatInfo highestThreatInfo;
} Zenuity_Debug_VruCollisionAvoidanceDiagnostics;

typedef struct _Zenuity_Debug_AebDiagnostics {
    /** AllBraking
     * AEB all braking diagnostics
     */
    Zenuity_Debug_AllBrakeDiagnostics allBraking;
    /** Inhibition
     * AEB inhibition diagnostics
     */
    Zenuity_Debug_AebInhibitionDiagnostic inhibition;
    /** Status
     * AEB General diagnostics
     */
    Zenuity_Debug_AebGeneralStatusDiagnostic status;
    /** PrimaryTarget
     * AEB Primary target
     */
    Zenuity_Debug_AebPrimaryTarget primaryTarget;
} Zenuity_Debug_AebDiagnostics;

/* Struct field encoding specification for pb */
extern const pb_field_t Zenuity_Debug_BrakingDiagnostic_fields[7];
extern const pb_field_t Zenuity_Debug_AllBrakeDiagnostics_fields[3];
extern const pb_field_t Zenuity_Debug_AebInhibitionDiagnostic_fields[10];
extern const pb_field_t Zenuity_Debug_AebPrimaryTarget_fields[2];
extern const pb_field_t Zenuity_Debug_AebGeneralStatusDiagnostic_fields[4];
extern const pb_field_t Zenuity_Debug_BrakingGainInhibitConditionStatus_fields[5];
extern const pb_field_t Zenuity_Debug_CollisionWarningInhibitConditionStatus_fields[5];
extern const pb_field_t Zenuity_Debug_CollisionWarningStartConditionStatus_fields[7];
extern const pb_field_t Zenuity_Debug_ThreatAssessmentDiagnosticObject_fields[20];
extern const pb_field_t Zenuity_Debug_ObjectManeuverOverlapsHostManeuver_fields[5];
extern const pb_field_t Zenuity_Debug_HighestThreatInfo_fields[4];
extern const pb_field_t Zenuity_Debug_AebDiagnostics_fields[5];
extern const pb_field_t Zenuity_Debug_CollisionWarningDiagnostics_fields[9];
extern const pb_field_t Zenuity_Debug_EvasiveManoeuvreAssistDiagnostics_fields[5];
extern const pb_field_t Zenuity_Debug_ThreatAssessmentDiagnostics_fields[2];
extern const pb_field_t Zenuity_Debug_ASILThreatAssesmentDiagnostics_fields[5];
extern const pb_field_t Zenuity_Debug_VruCollisionAvoidanceDiagnostics_fields[2];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ZENUITY_DEBUG_CALONG_DEBUG_INCLUDED */
