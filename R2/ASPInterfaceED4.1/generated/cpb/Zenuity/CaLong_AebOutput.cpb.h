/* Automatically generated pb header */
/* Generated by Protocol Buffers - 1 */

#ifndef ZENUITY_CALONG_AEBOUTPUT_INCLUDED
#define ZENUITY_CALONG_AEBOUTPUT_INCLUDED
#include "Tools/CProtobuf/pb.h"
#include "Tools/CProtobuf/pb_decode.h"
#include "Tools/CProtobuf/pb_encode.h"

#include "VisionCore/Common/Coords.cpb.h"
#if PB_PROTO_HEADER_VERSION != 1
#error Regenerate this file with the current version of pb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define Zenuity_CaLong_AebRequest_size                                                   (5)
#define Zenuity_CaLong_CollisionForwardWarningControl_size                               ((25 + VisionCore_Common_Coord2_m_0_01_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define Zenuity_CaLong_CollisionMitigationBrakeRequest_size                              (7)
#define Zenuity_CaLong_StaticDistanceWarningOutput_size                                  (8)
#define Zenuity_CaLong_TimeToThreat_size                                                 (8)
#define Zenuity_CaLong_VruAebOutput_size                                                 (5)
#define Zenuity_CaLong_CollisionMitigationThreatInformation_size                         ((17 + Zenuity_CaLong_TimeToThreat_size + Zenuity_CaLong_AebRequest_size) + PB_VARINT_MAX_ENCODED_SIZE)
#define Zenuity_CaLong_CollisionMitigationSystem_size                                    ((4 + Zenuity_CaLong_CollisionForwardWarningControl_size + Zenuity_CaLong_CollisionMitigationThreatInformation_size) + PB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define Zenuity_CaLong_CollisionMitigationBrakeRequest_source                            1U
#define Zenuity_CaLong_CollisionMitigationBrakeRequest_identifier                        4U
#define Zenuity_CaLong_CollisionMitigationBrakeRequest_majorVersion                      1U
#define Zenuity_CaLong_CollisionMitigationBrakeRequest_minorVersion                      0U
#define Zenuity_CaLong_CollisionMitigationSystem_source                                  1U
#define Zenuity_CaLong_CollisionMitigationSystem_identifier                              1U
#define Zenuity_CaLong_CollisionMitigationSystem_majorVersion                            2U
#define Zenuity_CaLong_CollisionMitigationSystem_minorVersion                            3U
#define Zenuity_CaLong_VruAebOutput_source                                               1U
#define Zenuity_CaLong_VruAebOutput_identifier                                           2U
#define Zenuity_CaLong_VruAebOutput_majorVersion                                         1U
#define Zenuity_CaLong_VruAebOutput_minorVersion                                         0U
#define Zenuity_CaLong_StaticDistanceWarningOutput_source                                1U
#define Zenuity_CaLong_StaticDistanceWarningOutput_identifier                            3U
#define Zenuity_CaLong_StaticDistanceWarningOutput_majorVersion                          1U
#define Zenuity_CaLong_StaticDistanceWarningOutput_minorVersion                          0U

/* Enum definitions */
typedef enum _Zenuity_CaLong_BeltActivationLevel {
    Zenuity_CaLong_BeltActivationLevel_NoActivation = 0,
    Zenuity_CaLong_BeltActivationLevel_ActivationLow = 1,
    Zenuity_CaLong_BeltActivationLevel_ActivationHigh = 2,
    Zenuity_CaLong_BeltActivationLevel_NotInUse = 3
} Zenuity_CaLong_BeltActivationLevel;
#define Zenuity_CaLong_BeltActivationLevel_MIN Zenuity_CaLong_BeltActivationLevel_NoActivation
#define Zenuity_CaLong_BeltActivationLevel_MAX Zenuity_CaLong_BeltActivationLevel_NotInUse
#define Zenuity_CaLong_BeltActivationLevel_ARRAYSIZE ((Zenuity_CaLong_BeltActivationLevel)(Zenuity_CaLong_BeltActivationLevel_NotInUse+1))

typedef enum _Zenuity_CaLong_CollisionThreatLevel {
    Zenuity_CaLong_CollisionThreatLevel_Unknown = 0,
    Zenuity_CaLong_CollisionThreatLevel_ThreatLow = 1,
    Zenuity_CaLong_CollisionThreatLevel_ThreatMedium = 2,
    Zenuity_CaLong_CollisionThreatLevel_ThreatHigh = 3
} Zenuity_CaLong_CollisionThreatLevel;
#define Zenuity_CaLong_CollisionThreatLevel_MIN Zenuity_CaLong_CollisionThreatLevel_Unknown
#define Zenuity_CaLong_CollisionThreatLevel_MAX Zenuity_CaLong_CollisionThreatLevel_ThreatHigh
#define Zenuity_CaLong_CollisionThreatLevel_ARRAYSIZE ((Zenuity_CaLong_CollisionThreatLevel)(Zenuity_CaLong_CollisionThreatLevel_ThreatHigh+1))

typedef enum _Zenuity_CaLong_CaLongObjectType {
    Zenuity_CaLong_CaLongObjectType_Unknown = 0,
    Zenuity_CaLong_CaLongObjectType_Car = 1,
    Zenuity_CaLong_CaLongObjectType_Motorcycle = 2,
    Zenuity_CaLong_CaLongObjectType_Truck = 3,
    Zenuity_CaLong_CaLongObjectType_Pedestrian = 4,
    Zenuity_CaLong_CaLongObjectType_Bicycle = 5,
    Zenuity_CaLong_CaLongObjectType_GeneralObject = 6
} Zenuity_CaLong_CaLongObjectType;
#define Zenuity_CaLong_CaLongObjectType_MIN Zenuity_CaLong_CaLongObjectType_Unknown
#define Zenuity_CaLong_CaLongObjectType_MAX Zenuity_CaLong_CaLongObjectType_GeneralObject
#define Zenuity_CaLong_CaLongObjectType_ARRAYSIZE ((Zenuity_CaLong_CaLongObjectType)(Zenuity_CaLong_CaLongObjectType_GeneralObject+1))

typedef enum _Zenuity_CaLong_DisplayPostEvent {
    Zenuity_CaLong_DisplayPostEvent_NoMessage = 0,
    Zenuity_CaLong_DisplayPostEvent_InterventionLongitudinal = 1,
    Zenuity_CaLong_DisplayPostEvent_InterventionLateral = 2,
    Zenuity_CaLong_DisplayPostEvent_InterventionLongitudinalAndInterventionLateral = 3,
    Zenuity_CaLong_DisplayPostEvent_BrakePulse = 4,
    Zenuity_CaLong_DisplayPostEvent_CriteriaBrakeMessage = 5
} Zenuity_CaLong_DisplayPostEvent;
#define Zenuity_CaLong_DisplayPostEvent_MIN Zenuity_CaLong_DisplayPostEvent_NoMessage
#define Zenuity_CaLong_DisplayPostEvent_MAX Zenuity_CaLong_DisplayPostEvent_CriteriaBrakeMessage
#define Zenuity_CaLong_DisplayPostEvent_ARRAYSIZE ((Zenuity_CaLong_DisplayPostEvent)(Zenuity_CaLong_DisplayPostEvent_CriteriaBrakeMessage+1))

typedef enum _Zenuity_CaLong_ObjectZone {
    Zenuity_CaLong_ObjectZone_None = 0,
    Zenuity_CaLong_ObjectZone_Notification = 1,
    Zenuity_CaLong_ObjectZone_Alert = 2,
    Zenuity_CaLong_ObjectZone_Prefill = 3,
    Zenuity_CaLong_ObjectZone_Cib = 4
} Zenuity_CaLong_ObjectZone;
#define Zenuity_CaLong_ObjectZone_MIN Zenuity_CaLong_ObjectZone_None
#define Zenuity_CaLong_ObjectZone_MAX Zenuity_CaLong_ObjectZone_Cib
#define Zenuity_CaLong_ObjectZone_ARRAYSIZE ((Zenuity_CaLong_ObjectZone)(Zenuity_CaLong_ObjectZone_Cib+1))

/* Struct definitions */
typedef struct _Zenuity_CaLong_AebRequest {
    /** DecelerationEnabled
     * Request to activate AEB braking against forward object
     */
    bool decelerationEnabled;
    /** AvoidanceDeceleration
     * Avoidance deceleration requested longitudinally, along the X-axis if AFAC
     * Unit: m/s²
     * Scale: 0.1
     * Min: 0
     * Max: 13
     */
    uint8_t avoidanceDeceleration;
} Zenuity_CaLong_AebRequest;

typedef struct _Zenuity_CaLong_CollisionForwardWarningControl {
    /** WarningRequest
     * Request to activate collision warning against forward object
     */
    bool warningRequest;
    /** ObjectType
     * The object type that is source of the request to activate collision warning against forward object
     */
    Zenuity_CaLong_CaLongObjectType objectType;
    /** BrakeGainEnabled
     * Request to indicate that the current brake pressure should be amplified
     */
    bool brakeGainEnabled;
    /** BrakeGainRequest
     * Factor to increase brake pressure by
     * Scale: 0.1
     * Min: 0
     * Max: 25.5
     */
    uint8_t brakeGainRequest;
    /** BrakeGainMaxDeceleration
     * Brake gain amplification should not cause the deceleration to be more negative than this value
     * Unit: m/s²
     * Scale: 0.1
     * Min: 0
     * Max: 25.5
     */
    uint8_t brakeGainMaxDeceleration;
    /** TimeToCollision
     * Time to collision for primary target. Set to 100s if no value is available.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 100
     */
    uint16_t timeToCollision;
    /** ObjectId
     * Id of selected object for collision warning. Note that a value of 0 indicates 'no object'.
     * Min: 0
     * Max: 255
     */
    uint8_t objectId;
    /** ObjectPosition
     * Position of selected object for collision warning, expressed in ARAC.
     */
    VisionCore_Common_Coord2_m_0_01 objectPosition;
    /** BrakePulseRequest
     * Brake pulse is a short activation of the brakes to get attention from the driver as part of a CW event. Notifies the driver of the collision warning via a haptic signal.
     */
    bool brakePulseRequest;
    /** WarningRequestRaw
     * Unarbitrated request to activate collision warning against forward object
     */
    bool warningRequestRaw;
} Zenuity_CaLong_CollisionForwardWarningControl;

typedef struct _Zenuity_CaLong_CollisionMitigationBrakeRequest {
    /** DecelerationEnabled
     * Enable deceleration request
     */
    bool decelerationEnabled;
    /** DecelerationRequest
     * Deceleration requested
     * Unit: m/s²
     * Scale: 0.1
     * Min: 0
     * Max: 25.5
     */
    uint8_t decelerationRequest;
    /** StandStillRequest
     * Request to hold the vehicle stationary until driver presses the acceleration pedal
     */
    bool standStillRequest;
} Zenuity_CaLong_CollisionMitigationBrakeRequest;

typedef struct _Zenuity_CaLong_StaticDistanceWarningOutput {
    /** WarningRequest
     * Request to activate static distance warning against forward object
     */
    bool warningRequest;
    /** ObjectId
     * Id of selected object for static distance warning
     * Min: 0
     * Max: 255
     */
    uint8_t objectId;
    /** TimeGap
     * Time gap between host vehicle and object in front
     * Unit: s
     * Scale: 0.1
     * Min: 0
     * Max: 25.5
     */
    uint8_t timeGap;
} Zenuity_CaLong_StaticDistanceWarningOutput;

typedef struct _Zenuity_CaLong_TimeToThreat {
    /** BrakeThreat
     * Time until the driver cannot avoid the threat by braking according to CollisionMitigationSystem predictions
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 5
     */
    uint16_t brakeThreat;
    /** SteeringThreat
     * Time until the driver cannot avoid the threat by steering according to CollisionMitigationSystem predictions
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 5
     */
    uint16_t steeringThreat;
} Zenuity_CaLong_TimeToThreat;

typedef struct _Zenuity_CaLong_VruAebOutput {
    /** PrimaryTargetZone
     * Zone which the VRU object is in
     */
    Zenuity_CaLong_ObjectZone primaryTargetZone;
    /** AvoidanceDeceleration
     * Avoidance deceleration requested
     * Unit: m/s²
     * Scale: 0.1
     * Min: 0
     * Max: 13
     */
    uint8_t avoidanceDeceleration;
} Zenuity_CaLong_VruAebOutput;

typedef struct _Zenuity_CaLong_CollisionMitigationThreatInformation {
    /** BeltActivationLevel
     * A request to activate the electric belts
     */
    Zenuity_CaLong_BeltActivationLevel beltActivationLevel;
    /** CollisionThreatLevel
     * The current collision threat level. Used by vehicle mode management to reduce electrical loads in the car and thus increase system voltage.
     */
    Zenuity_CaLong_CollisionThreatLevel collisionThreatLevel;
    /** DisplayPostEventMessage
     * Request to driver information system to display post event message
     */
    Zenuity_CaLong_DisplayPostEvent displayPostEventMessage;
    /** TimeToBrake
     * Time until a threat causes a braking intervention
     */
    Zenuity_CaLong_TimeToThreat timeToBrake;
    /** RawRequest
     * Raw AEB request and the deceleration request for avoiding the primary target.
     */
    Zenuity_CaLong_AebRequest rawRequest;
    /** ObjectId
     * Id of primary target object for AEB braking. Note that a value of 0 indicates 'no object'.
     * Min: 0
     * Max: 255
     */
    uint8_t objectId;
    /** TimeToCollision
     * Time to collision for primary target. Set to 100s if no value is available.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 100
     */
    uint16_t timeToCollision;
} Zenuity_CaLong_CollisionMitigationThreatInformation;

typedef struct _Zenuity_CaLong_CollisionMitigationSystem {
    /** ForwardWarningControl
     * Examples of driver alerts are audio, visual and haptic (brake pulse) warning
     */
    Zenuity_CaLong_CollisionForwardWarningControl forwardWarningControl;
    /** ThreatInformation */
    Zenuity_CaLong_CollisionMitigationThreatInformation threatInformation;
} Zenuity_CaLong_CollisionMitigationSystem;

/* Struct field encoding specification for pb */
extern const pb_field_t Zenuity_CaLong_TimeToThreat_fields[3];
extern const pb_field_t Zenuity_CaLong_AebRequest_fields[3];
extern const pb_field_t Zenuity_CaLong_CollisionMitigationThreatInformation_fields[8];
extern const pb_field_t Zenuity_CaLong_CollisionForwardWarningControl_fields[11];
extern const pb_field_t Zenuity_CaLong_CollisionMitigationBrakeRequest_fields[4];
extern const pb_field_t Zenuity_CaLong_CollisionMitigationSystem_fields[3];
extern const pb_field_t Zenuity_CaLong_VruAebOutput_fields[3];
extern const pb_field_t Zenuity_CaLong_StaticDistanceWarningOutput_fields[4];
#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ZENUITY_CALONG_AEBOUTPUT_INCLUDED */
