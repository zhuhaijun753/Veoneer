/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef RADARCORE_TRACKS_CLUSTERTRACKS_INCLUDED
#define RADARCORE_TRACKS_CLUSTERTRACKS_INCLUDED

#include "RadarCore/Tracks/ClusterTracks_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define RadarCore_Tracks_ClusterTrackModelBox_size                                       (24)
#define RadarCore_Tracks_ClusterTrackMovement_size                                       (36)
#define RadarCore_Tracks_ClusterTrackPosition_size                                       (20)
#define RadarCore_Tracks_ClusterTrack_size                                               ((73 + RadarCore_Tracks_ClusterTrackPosition_size + RadarCore_Tracks_ClusterTrackModelBox_size + RadarCore_Tracks_ClusterTrackMovement_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define RadarCore_Tracks_ClusterTrackList_size                                           (4680)

/* Message IDs (where set with "identifier" option) */
#define RadarCore_Tracks_ClusterTrackList_source                                         4U
#define RadarCore_Tracks_ClusterTrackList_identifier                                     10U
#define RadarCore_Tracks_ClusterTrackList_majorVersion                                   1U
#define RadarCore_Tracks_ClusterTrackList_minorVersion                                   0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_RadarCore_Tracks_ClusterTrackModelBox_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackModelBox_Raw *const data);
bool decode_RadarCore_Tracks_ClusterTrackModelBox_Raw(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackModelBox_Raw *const data);
bool encode_RadarCore_Tracks_ClusterTrackModelBox(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackModelBox *const data);
bool decode_RadarCore_Tracks_ClusterTrackModelBox(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackModelBox *const data);

bool encode_RadarCore_Tracks_ClusterTrackMovement_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackMovement_Raw *const data);
bool decode_RadarCore_Tracks_ClusterTrackMovement_Raw(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackMovement_Raw *const data);
bool encode_RadarCore_Tracks_ClusterTrackMovement(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackMovement *const data);
bool decode_RadarCore_Tracks_ClusterTrackMovement(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackMovement *const data);

bool encode_RadarCore_Tracks_ClusterTrackPosition_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackPosition_Raw *const data);
bool decode_RadarCore_Tracks_ClusterTrackPosition_Raw(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackPosition_Raw *const data);
bool encode_RadarCore_Tracks_ClusterTrackPosition(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackPosition *const data);
bool decode_RadarCore_Tracks_ClusterTrackPosition(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackPosition *const data);

bool encode_RadarCore_Tracks_ClusterTrack_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrack_Raw *const data);
bool decode_RadarCore_Tracks_ClusterTrack_Raw(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrack_Raw *const data);
bool encode_RadarCore_Tracks_ClusterTrack(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrack *const data);
bool decode_RadarCore_Tracks_ClusterTrack(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrack *const data);

bool encode_RadarCore_Tracks_ClusterTrackList_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackList_Raw *const data);
bool decode_RadarCore_Tracks_ClusterTrackList_Raw(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackList_Raw *const data);
bool encode_RadarCore_Tracks_ClusterTrackList(qpb_ostream_t *const stream, const RadarCore_Tracks_ClusterTrackList *const data);
bool decode_RadarCore_Tracks_ClusterTrackList(qpb_istream_t *const stream, RadarCore_Tracks_ClusterTrackList *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* RADARCORE_TRACKS_CLUSTERTRACKS_INCLUDED */
