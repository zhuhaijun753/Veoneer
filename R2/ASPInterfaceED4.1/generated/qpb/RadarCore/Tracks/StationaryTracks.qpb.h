/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef RADARCORE_TRACKS_STATIONARYTRACKS_INCLUDED
#define RADARCORE_TRACKS_STATIONARYTRACKS_INCLUDED

#include "RadarCore/Tracks/StationaryTracks_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define RadarCore_Tracks_StationaryTrackMovement_size                                    (12)
#define RadarCore_Tracks_StationaryTrackPosition_size                                    (12)
#define RadarCore_Tracks_StationaryTrack_size                                            ((23 + RadarCore_Tracks_StationaryTrackPosition_size + RadarCore_Tracks_StationaryTrackMovement_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define RadarCore_Tracks_StationaryTrackList_size                                        (1960)

/* Message IDs (where set with "identifier" option) */
#define RadarCore_Tracks_StationaryTrackList_source                                      4U
#define RadarCore_Tracks_StationaryTrackList_identifier                                  11U
#define RadarCore_Tracks_StationaryTrackList_majorVersion                                1U
#define RadarCore_Tracks_StationaryTrackList_minorVersion                                0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_RadarCore_Tracks_StationaryTrackMovement_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrackMovement_Raw *const data);
bool decode_RadarCore_Tracks_StationaryTrackMovement_Raw(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrackMovement_Raw *const data);
bool encode_RadarCore_Tracks_StationaryTrackMovement(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrackMovement *const data);
bool decode_RadarCore_Tracks_StationaryTrackMovement(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrackMovement *const data);

bool encode_RadarCore_Tracks_StationaryTrackPosition_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrackPosition_Raw *const data);
bool decode_RadarCore_Tracks_StationaryTrackPosition_Raw(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrackPosition_Raw *const data);
bool encode_RadarCore_Tracks_StationaryTrackPosition(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrackPosition *const data);
bool decode_RadarCore_Tracks_StationaryTrackPosition(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrackPosition *const data);

bool encode_RadarCore_Tracks_StationaryTrack_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrack_Raw *const data);
bool decode_RadarCore_Tracks_StationaryTrack_Raw(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrack_Raw *const data);
bool encode_RadarCore_Tracks_StationaryTrack(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrack *const data);
bool decode_RadarCore_Tracks_StationaryTrack(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrack *const data);

bool encode_RadarCore_Tracks_StationaryTrackList_Raw(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrackList_Raw *const data);
bool decode_RadarCore_Tracks_StationaryTrackList_Raw(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrackList_Raw *const data);
bool encode_RadarCore_Tracks_StationaryTrackList(qpb_ostream_t *const stream, const RadarCore_Tracks_StationaryTrackList *const data);
bool decode_RadarCore_Tracks_StationaryTrackList(qpb_istream_t *const stream, RadarCore_Tracks_StationaryTrackList *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* RADARCORE_TRACKS_STATIONARYTRACKS_INCLUDED */
