/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef VISIONCORE_TRAFFICPARTICIPANTS_OBJECTSOUTPUT_INCLUDED
#define VISIONCORE_TRAFFICPARTICIPANTS_OBJECTSOUTPUT_INCLUDED

#include "VisionCore/TrafficParticipants/ObjectsOutput_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define VisionCore_TrafficParticipants_LaneProperties_size                               (24)
#define VisionCore_TrafficParticipants_ObjectAcceleration_size                           (7)
#define VisionCore_TrafficParticipants_ObjectPosition_size                               (33)
#define VisionCore_TrafficParticipants_ObjectQuality_size                                (24)
#define VisionCore_TrafficParticipants_ObjectSize_size                                   (19)
#define VisionCore_TrafficParticipants_ObjectVelocity_size                               (18)
#define VisionCore_TrafficParticipants_ObjectVisibility_size                             (4)
#define VisionCore_TrafficParticipants_Object_size                                       ((40 + VisionCore_TrafficParticipants_ObjectPosition_size + VisionCore_TrafficParticipants_ObjectVelocity_size + VisionCore_TrafficParticipants_ObjectAcceleration_size + VisionCore_TrafficParticipants_ObjectSize_size + VisionCore_TrafficParticipants_LaneProperties_size + VisionCore_TrafficParticipants_ObjectQuality_size + VisionCore_TrafficParticipants_ObjectVisibility_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_TrafficParticipants_ObjectsOutput_size                                (4300)

/* Message IDs (where set with "identifier" option) */
#define VisionCore_TrafficParticipants_ObjectsOutput_source                              2U
#define VisionCore_TrafficParticipants_ObjectsOutput_identifier                          450U
#define VisionCore_TrafficParticipants_ObjectsOutput_majorVersion                        2U
#define VisionCore_TrafficParticipants_ObjectsOutput_minorVersion                        0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_VisionCore_TrafficParticipants_LaneProperties_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_LaneProperties_Raw *const data);
bool decode_VisionCore_TrafficParticipants_LaneProperties_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_LaneProperties_Raw *const data);
bool encode_VisionCore_TrafficParticipants_LaneProperties(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_LaneProperties *const data);
bool decode_VisionCore_TrafficParticipants_LaneProperties(qpb_istream_t *const stream, VisionCore_TrafficParticipants_LaneProperties *const data);

bool encode_VisionCore_TrafficParticipants_ObjectAcceleration_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectAcceleration_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectAcceleration_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectAcceleration_Raw *const data);
bool encode_VisionCore_TrafficParticipants_ObjectAcceleration(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectAcceleration *const data);
bool decode_VisionCore_TrafficParticipants_ObjectAcceleration(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectAcceleration *const data);

bool encode_VisionCore_TrafficParticipants_ObjectPosition_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectPosition_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectPosition_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectPosition_Raw *const data);
bool encode_VisionCore_TrafficParticipants_ObjectPosition(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectPosition *const data);
bool decode_VisionCore_TrafficParticipants_ObjectPosition(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectPosition *const data);

bool encode_VisionCore_TrafficParticipants_ObjectQuality_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectQuality_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectQuality_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectQuality_Raw *const data);
#define encode_VisionCore_TrafficParticipants_ObjectQuality encode_VisionCore_TrafficParticipants_ObjectQuality_Raw
#define decode_VisionCore_TrafficParticipants_ObjectQuality decode_VisionCore_TrafficParticipants_ObjectQuality_Raw

bool encode_VisionCore_TrafficParticipants_ObjectSize_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectSize_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectSize_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectSize_Raw *const data);
bool encode_VisionCore_TrafficParticipants_ObjectSize(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectSize *const data);
bool decode_VisionCore_TrafficParticipants_ObjectSize(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectSize *const data);

bool encode_VisionCore_TrafficParticipants_ObjectVelocity_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectVelocity_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectVelocity_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectVelocity_Raw *const data);
bool encode_VisionCore_TrafficParticipants_ObjectVelocity(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectVelocity *const data);
bool decode_VisionCore_TrafficParticipants_ObjectVelocity(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectVelocity *const data);

bool encode_VisionCore_TrafficParticipants_ObjectVisibility_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectVisibility_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectVisibility_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectVisibility_Raw *const data);
#define encode_VisionCore_TrafficParticipants_ObjectVisibility encode_VisionCore_TrafficParticipants_ObjectVisibility_Raw
#define decode_VisionCore_TrafficParticipants_ObjectVisibility decode_VisionCore_TrafficParticipants_ObjectVisibility_Raw

bool encode_VisionCore_TrafficParticipants_Object_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_Object_Raw *const data);
bool decode_VisionCore_TrafficParticipants_Object_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_Object_Raw *const data);
bool encode_VisionCore_TrafficParticipants_Object(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_Object *const data);
bool decode_VisionCore_TrafficParticipants_Object(qpb_istream_t *const stream, VisionCore_TrafficParticipants_Object *const data);

bool encode_VisionCore_TrafficParticipants_ObjectsOutput_Raw(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectsOutput_Raw *const data);
bool decode_VisionCore_TrafficParticipants_ObjectsOutput_Raw(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectsOutput_Raw *const data);
bool encode_VisionCore_TrafficParticipants_ObjectsOutput(qpb_ostream_t *const stream, const VisionCore_TrafficParticipants_ObjectsOutput *const data);
bool decode_VisionCore_TrafficParticipants_ObjectsOutput(qpb_istream_t *const stream, VisionCore_TrafficParticipants_ObjectsOutput *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_TRAFFICPARTICIPANTS_OBJECTSOUTPUT_INCLUDED */
