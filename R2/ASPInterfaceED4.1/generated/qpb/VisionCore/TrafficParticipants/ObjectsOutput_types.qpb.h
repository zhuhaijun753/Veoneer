/* Automatically generated qpb types header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef VISIONCORE_TRAFFICPARTICIPANTS_OBJECTSOUTPUT_TYPES_INCLUDED
#define VISIONCORE_TRAFFICPARTICIPANTS_OBJECTSOUTPUT_TYPES_INCLUDED

#include "Tools/QuickProtobuf/qpb_types.h"


#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _VisionCore_TrafficParticipants_ObjectClass {
    VisionCore_TrafficParticipants_ObjectClass_Unspecified = 0,
    VisionCore_TrafficParticipants_ObjectClass_GeneralObject = 1,
    VisionCore_TrafficParticipants_ObjectClass_Car = 2,
    VisionCore_TrafficParticipants_ObjectClass_Truck = 3,
    VisionCore_TrafficParticipants_ObjectClass_Motorcycle = 4,
    VisionCore_TrafficParticipants_ObjectClass_Pedestrian = 5,
    VisionCore_TrafficParticipants_ObjectClass_Bicycle = 6,
    VisionCore_TrafficParticipants_ObjectClass_Animal = 7,
    VisionCore_TrafficParticipants_ObjectClass_RoadConstructionMarker = 8,
    VisionCore_TrafficParticipants_ObjectClass_ConstructionWorkTrailer = 9,
    VisionCore_TrafficParticipants_ObjectClass_OtherVehicle = 10
} VisionCore_TrafficParticipants_ObjectClass;
#define VisionCore_TrafficParticipants_ObjectClass_MIN VisionCore_TrafficParticipants_ObjectClass_Unspecified
#define VisionCore_TrafficParticipants_ObjectClass_MAX VisionCore_TrafficParticipants_ObjectClass_OtherVehicle
#define VisionCore_TrafficParticipants_ObjectClass_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectClass)(VisionCore_TrafficParticipants_ObjectClass_OtherVehicle+1))

typedef enum _VisionCore_TrafficParticipants_ObjectMotionMode {
    VisionCore_TrafficParticipants_ObjectMotionMode_Unspecified = 0,
    VisionCore_TrafficParticipants_ObjectMotionMode_Stationary = 1,
    VisionCore_TrafficParticipants_ObjectMotionMode_Moving = 2,
    VisionCore_TrafficParticipants_ObjectMotionMode_Stopped = 3,
    VisionCore_TrafficParticipants_ObjectMotionMode_Accident = 4
} VisionCore_TrafficParticipants_ObjectMotionMode;
#define VisionCore_TrafficParticipants_ObjectMotionMode_MIN VisionCore_TrafficParticipants_ObjectMotionMode_Unspecified
#define VisionCore_TrafficParticipants_ObjectMotionMode_MAX VisionCore_TrafficParticipants_ObjectMotionMode_Accident
#define VisionCore_TrafficParticipants_ObjectMotionMode_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectMotionMode)(VisionCore_TrafficParticipants_ObjectMotionMode_Accident+1))

typedef enum _VisionCore_TrafficParticipants_ObjectPose {
    VisionCore_TrafficParticipants_ObjectPose_Unknown = 0,
    VisionCore_TrafficParticipants_ObjectPose_Preceding = 1,
    VisionCore_TrafficParticipants_ObjectPose_Oncoming = 2,
    VisionCore_TrafficParticipants_ObjectPose_Lateral = 3
} VisionCore_TrafficParticipants_ObjectPose;
#define VisionCore_TrafficParticipants_ObjectPose_MIN VisionCore_TrafficParticipants_ObjectPose_Unknown
#define VisionCore_TrafficParticipants_ObjectPose_MAX VisionCore_TrafficParticipants_ObjectPose_Lateral
#define VisionCore_TrafficParticipants_ObjectPose_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectPose)(VisionCore_TrafficParticipants_ObjectPose_Lateral+1))

typedef enum _VisionCore_TrafficParticipants_ObjectLaneAssignment {
    VisionCore_TrafficParticipants_ObjectLaneAssignment_Unknown = 0,
    VisionCore_TrafficParticipants_ObjectLaneAssignment_EgoLane = 1,
    VisionCore_TrafficParticipants_ObjectLaneAssignment_LeftLane = 2,
    VisionCore_TrafficParticipants_ObjectLaneAssignment_RightLane = 3,
    VisionCore_TrafficParticipants_ObjectLaneAssignment_MultipleLeft = 4,
    VisionCore_TrafficParticipants_ObjectLaneAssignment_MultipleRight = 5
} VisionCore_TrafficParticipants_ObjectLaneAssignment;
#define VisionCore_TrafficParticipants_ObjectLaneAssignment_MIN VisionCore_TrafficParticipants_ObjectLaneAssignment_Unknown
#define VisionCore_TrafficParticipants_ObjectLaneAssignment_MAX VisionCore_TrafficParticipants_ObjectLaneAssignment_MultipleRight
#define VisionCore_TrafficParticipants_ObjectLaneAssignment_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectLaneAssignment)(VisionCore_TrafficParticipants_ObjectLaneAssignment_MultipleRight+1))

typedef enum _VisionCore_TrafficParticipants_ObjectQualityStatus {
    VisionCore_TrafficParticipants_ObjectQualityStatus_Unknown = 0,
    VisionCore_TrafficParticipants_ObjectQualityStatus_VelocityReliable = 1,
    VisionCore_TrafficParticipants_ObjectQualityStatus_ExistenceValidated = 2,
    VisionCore_TrafficParticipants_ObjectQualityStatus_VelocityReliableAndExistenceValidated = 3
} VisionCore_TrafficParticipants_ObjectQualityStatus;
#define VisionCore_TrafficParticipants_ObjectQualityStatus_MIN VisionCore_TrafficParticipants_ObjectQualityStatus_Unknown
#define VisionCore_TrafficParticipants_ObjectQualityStatus_MAX VisionCore_TrafficParticipants_ObjectQualityStatus_VelocityReliableAndExistenceValidated
#define VisionCore_TrafficParticipants_ObjectQualityStatus_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectQualityStatus)(VisionCore_TrafficParticipants_ObjectQualityStatus_VelocityReliableAndExistenceValidated+1))

typedef enum _VisionCore_TrafficParticipants_ObjectTrackingStatus {
    VisionCore_TrafficParticipants_ObjectTrackingStatus_NotTracked = 0,
    VisionCore_TrafficParticipants_ObjectTrackingStatus_Initialized = 1,
    VisionCore_TrafficParticipants_ObjectTrackingStatus_Tracked = 2,
    VisionCore_TrafficParticipants_ObjectTrackingStatus_Predicted = 3
} VisionCore_TrafficParticipants_ObjectTrackingStatus;
#define VisionCore_TrafficParticipants_ObjectTrackingStatus_MIN VisionCore_TrafficParticipants_ObjectTrackingStatus_NotTracked
#define VisionCore_TrafficParticipants_ObjectTrackingStatus_MAX VisionCore_TrafficParticipants_ObjectTrackingStatus_Predicted
#define VisionCore_TrafficParticipants_ObjectTrackingStatus_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectTrackingStatus)(VisionCore_TrafficParticipants_ObjectTrackingStatus_Predicted+1))

typedef enum _VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus {
    VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Off = 0,
    VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Left = 1,
    VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Right = 2,
    VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Both = 3
} VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus;
#define VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_MIN VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Off
#define VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_MAX VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Both
#define VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus)(VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus_Both+1))

typedef enum _VisionCore_TrafficParticipants_ObjectEdgeVisibility {
    VisionCore_TrafficParticipants_ObjectEdgeVisibility_NotVisible = 0,
    VisionCore_TrafficParticipants_ObjectEdgeVisibility_WasVisible = 1,
    VisionCore_TrafficParticipants_ObjectEdgeVisibility_IsVisible = 2,
    VisionCore_TrafficParticipants_ObjectEdgeVisibility_WasAndIsVisible = 3
} VisionCore_TrafficParticipants_ObjectEdgeVisibility;
#define VisionCore_TrafficParticipants_ObjectEdgeVisibility_MIN VisionCore_TrafficParticipants_ObjectEdgeVisibility_NotVisible
#define VisionCore_TrafficParticipants_ObjectEdgeVisibility_MAX VisionCore_TrafficParticipants_ObjectEdgeVisibility_WasAndIsVisible
#define VisionCore_TrafficParticipants_ObjectEdgeVisibility_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectEdgeVisibility)(VisionCore_TrafficParticipants_ObjectEdgeVisibility_WasAndIsVisible+1))

typedef enum _VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask {
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_IdVerified = 0,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_XVerified = 1,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_XVelocityVerified = 2,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_YVerified = 3,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_YVelocityVerified = 4,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_WidthVerified = 5,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_LengthVerified = 6,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_YawAngleVerified = 7,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_YawRateVerified = 8,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_XStddevVerified = 9,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_YStddevVerified = 10,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_XVelocityStddevVerified = 11,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_YVelocityStddevVerified = 12,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_MotionModeVerified = 13,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_ObjectClassVerified = 14,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_AvailableVerified = 15,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_QualityFeatureApproxErrorVerified = 16,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_QualityTrackingStatusVerified = 17,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_QualityClassificationHistoryVerified = 18,
    VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_QualityDetectionHistoryVerified = 19
} VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask;
#define VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_MIN VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_IdVerified
#define VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_MAX VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_QualityDetectionHistoryVerified
#define VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_ARRAYSIZE ((VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask)(VisionCore_TrafficParticipants_ObjectVerificationStatusBitMask_QualityDetectionHistoryVerified+1))

/* Struct definitions */
typedef struct _VisionCore_TrafficParticipants_LaneProperties_Raw {
    /** LaneOffsetLeft
     * Distance from center of object to closest left lane
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t laneOffsetLeft;
    /** LaneOffsetLeftStdDev
     * The standard deviation of LaneOffsetLeft
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 5
     */
    uint8_t laneOffsetLeftStdDev;
    /** LaneOffsetLeftRate
     * The change rate of the LaneOffsetLeft signal over time
     * Unit: m/s
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t laneOffsetLeftRate;
    /** LaneOffsetRight
     * Distance from center of object to closest right lane
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t laneOffsetRight;
    /** LaneOffsetRightStdDev
     * The standard deviation of LaneOffsetRight
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 5
     */
    uint8_t laneOffsetRightStdDev;
    /** LaneOffsetRightRate
     * The change rate of the LaneOffsetRight signal over time
     * Unit: m/s
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t laneOffsetRightRate;
    /** LaneAssignment
     * Decribes the lane the object is in related to ego vehicle lane
     */
    VisionCore_TrafficParticipants_ObjectLaneAssignment laneAssignment;
} VisionCore_TrafficParticipants_LaneProperties_Raw;

typedef struct _VisionCore_TrafficParticipants_LaneProperties {
    /** LaneOffsetLeft
     * Distance from center of object to closest left lane
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float laneOffsetLeft;
    /** LaneOffsetLeftStdDev
     * The standard deviation of LaneOffsetLeft
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 5
     */
    float laneOffsetLeftStdDev;
    /** LaneOffsetLeftRate
     * The change rate of the LaneOffsetLeft signal over time
     * Unit: m/s
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float laneOffsetLeftRate;
    /** LaneOffsetRight
     * Distance from center of object to closest right lane
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float laneOffsetRight;
    /** LaneOffsetRightStdDev
     * The standard deviation of LaneOffsetRight
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 5
     */
    float laneOffsetRightStdDev;
    /** LaneOffsetRightRate
     * The change rate of the LaneOffsetRight signal over time
     * Unit: m/s
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float laneOffsetRightRate;
    /** LaneAssignment
     * Decribes the lane the object is in related to ego vehicle lane
     */
    VisionCore_TrafficParticipants_ObjectLaneAssignment laneAssignment;
} VisionCore_TrafficParticipants_LaneProperties;

typedef struct _VisionCore_TrafficParticipants_ObjectAcceleration_Raw {
    /** XAcceleration
     * Object absolute acceleration, x coordinate
     * Unit: m/s²
     * Scale: 0.1
     * Min: -15
     * Max: 15
     */
    int16_t xAcceleration;
    /** XAccelerationStdDev
     * Standard deviation of X acceleration
     * Unit: m/s²
     * Scale: 0.1
     * Min: 0
     * Max: 5
     */
    uint8_t xAccelerationStdDev;
} VisionCore_TrafficParticipants_ObjectAcceleration_Raw;

typedef struct _VisionCore_TrafficParticipants_ObjectAcceleration {
    /** XAcceleration
     * Object absolute acceleration, x coordinate
     * Unit: m/s²
     * Resolution: 0.1
     * Min: -15
     * Max: 15
     */
    float xAcceleration;
    /** XAccelerationStdDev
     * Standard deviation of X acceleration
     * Unit: m/s²
     * Resolution: 0.1
     * Min: 0
     * Max: 5
     */
    float xAccelerationStdDev;
} VisionCore_TrafficParticipants_ObjectAcceleration;

typedef struct _VisionCore_TrafficParticipants_ObjectPosition_Raw {
    /** X
     * x coordinate of the center point of the object
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 250
     */
    uint16_t x;
    /** XStdDev
     * Standard deviation of X
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 25
     */
    uint8_t xStdDev;
    /** Y
     * y coordinate of the center point of the object
     * Unit: m
     * Scale: 0.01
     * Min: -100
     * Max: 100
     */
    int16_t y;
    /** YStdDev
     * Standard deviation of Y
     * Unit: m
     * Scale: 0.02
     * Min: 0
     * Max: 5
     */
    uint8_t yStdDev;
    /** XyCorrCoeff
     * The Pearson's correlation coefficient between X and Y
     * Scale: 0.01
     * Min: -1
     * Max: 1
     */
    int16_t xyCorrCoeff;
    /** Z
     * Z-coordinate of the bottom of the object
     * Unit: m
     * Scale: 0.1
     * Min: -40
     * Max: 40
     */
    int16_t z;
    /** ZStdDev
     * Standard deviation of Z
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 5
     */
    uint8_t zStdDev;
    /** YawAngle
     * Angle of the object
     * Unit: rad
     * Scale: 0.01
     * Min: -3.14
     * Max: 3.14
     */
    int16_t yawAngle;
    /** YawAngleStdDev
     * Standard deviation of YawAngle
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 6.28
     */
    uint16_t yawAngleStdDev;
} VisionCore_TrafficParticipants_ObjectPosition_Raw;

typedef struct _VisionCore_TrafficParticipants_ObjectPosition {
    /** X
     * x coordinate of the center point of the object
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 250
     */
    float x;
    /** XStdDev
     * Standard deviation of X
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 25
     */
    float xStdDev;
    /** Y
     * y coordinate of the center point of the object
     * Unit: m
     * Resolution: 0.01
     * Min: -100
     * Max: 100
     */
    float y;
    /** YStdDev
     * Standard deviation of Y
     * Unit: m
     * Resolution: 0.02
     * Min: 0
     * Max: 5
     */
    float yStdDev;
    /** XyCorrCoeff
     * The Pearson's correlation coefficient between X and Y
     * Resolution: 0.01
     * Min: -1
     * Max: 1
     */
    float xyCorrCoeff;
    /** Z
     * Z-coordinate of the bottom of the object
     * Unit: m
     * Resolution: 0.1
     * Min: -40
     * Max: 40
     */
    float z;
    /** ZStdDev
     * Standard deviation of Z
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 5
     */
    float zStdDev;
    /** YawAngle
     * Angle of the object
     * Unit: rad
     * Resolution: 0.01
     * Min: -3.14
     * Max: 3.14
     */
    float yawAngle;
    /** YawAngleStdDev
     * Standard deviation of YawAngle
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 6.28
     */
    float yawAngleStdDev;
} VisionCore_TrafficParticipants_ObjectPosition;

typedef struct _VisionCore_TrafficParticipants_ObjectQuality_Raw {
    /** ClassificationConfidence
     * The estimated probability that the classification is correct
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t classificationConfidence;
    /** DetectionConfidence
     * A measure of the confidence that the detection is correct
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t detectionConfidence;
    /** ClassificationHistory
     * History of classification, indicates if the object had the same objectClass the last 8 frames. (0 when not the same classification, 1 otherwise)
     * Min: 0
     * Max: 255
     */
    uint8_t classificationHistory;
    /** DetectionHistory
     * History of detection, indicates if the object has been observed (independent of objectClass) the last 8 frames. (0 when no measurement, 1 otherwise)
     * Min: 0
     * Max: 255
     */
    uint8_t detectionHistory;
    /** TrackingStatus
     * Indicates the tracking status of the object
     */
    VisionCore_TrafficParticipants_ObjectTrackingStatus trackingStatus;
    /** TrackAge
     * The number of consecutive measurement cycles that the object has been transmitted (same id).
     * Min: 0
     * Max: 65535
     */
    uint16_t trackAge;
    /** TrackDelay
     * The step response delay of sudden changes in speed or position of the object
     * Unit: ms
     * Min: 0
     * Max: 65535
     */
    uint16_t trackDelay;
    /** ObjectStatus
     * Status flags for the object, can be interpreted as a bit mask.
     */
    VisionCore_TrafficParticipants_ObjectQualityStatus objectStatus;
} VisionCore_TrafficParticipants_ObjectQuality_Raw;

#define VisionCore_TrafficParticipants_ObjectQuality VisionCore_TrafficParticipants_ObjectQuality_Raw

typedef struct _VisionCore_TrafficParticipants_ObjectSize_Raw {
    /** Height
     * Object height
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 5
     */
    uint8_t height;
    /** HeightStdDev
     * Standard deviation of height
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 5
     */
    uint8_t heightStdDev;
    /** Width
     * Object width
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 10
     */
    uint8_t width;
    /** WidthStdDev
     * Standard deviation of width
     * Unit: m
     * Scale: 0.02
     * Min: 0
     * Max: 5
     */
    uint8_t widthStdDev;
    /** Length
     * Object length
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 50
     */
    uint16_t length;
    /** LengthStdDev
     * Standard deviation of length
     * Unit: m
     * Scale: 0.2
     * Min: 0
     * Max: 10
     */
    uint8_t lengthStdDev;
} VisionCore_TrafficParticipants_ObjectSize_Raw;

typedef struct _VisionCore_TrafficParticipants_ObjectSize {
    /** Height
     * Object height
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 5
     */
    float height;
    /** HeightStdDev
     * Standard deviation of height
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 5
     */
    float heightStdDev;
    /** Width
     * Object width
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 10
     */
    float width;
    /** WidthStdDev
     * Standard deviation of width
     * Unit: m
     * Resolution: 0.02
     * Min: 0
     * Max: 5
     */
    float widthStdDev;
    /** Length
     * Object length
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 50
     */
    float length;
    /** LengthStdDev
     * Standard deviation of length
     * Unit: m
     * Resolution: 0.2
     * Min: 0
     * Max: 10
     */
    float lengthStdDev;
} VisionCore_TrafficParticipants_ObjectSize;

typedef struct _VisionCore_TrafficParticipants_ObjectVelocity_Raw {
    /** XVelocity
     * Object absolute velocity, x coordinate
     * Unit: m/s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t xVelocity;
    /** YVelocity
     * Object absolute velocity, y coordinate
     * Unit: m/s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t yVelocity;
    /** XVelocityStdDev
     * Standard deviation of X velocity
     * Unit: m/s
     * Scale: 0.1
     * Min: 0
     * Max: 20
     */
    uint8_t xVelocityStdDev;
    /** YVelocityStdDev
     * Standard deviation of Y velocity
     * Unit: m/s
     * Scale: 0.1
     * Min: 0
     * Max: 20
     */
    uint8_t yVelocityStdDev;
    /** YawRate
     * Rotation velocity of the object
     * Unit: rad/s
     * Scale: 0.01
     * Min: -2.5
     * Max: 2.5
     */
    int16_t yawRate;
} VisionCore_TrafficParticipants_ObjectVelocity_Raw;

typedef struct _VisionCore_TrafficParticipants_ObjectVelocity {
    /** XVelocity
     * Object absolute velocity, x coordinate
     * Unit: m/s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float xVelocity;
    /** YVelocity
     * Object absolute velocity, y coordinate
     * Unit: m/s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float yVelocity;
    /** XVelocityStdDev
     * Standard deviation of X velocity
     * Unit: m/s
     * Resolution: 0.1
     * Min: 0
     * Max: 20
     */
    float xVelocityStdDev;
    /** YVelocityStdDev
     * Standard deviation of Y velocity
     * Unit: m/s
     * Resolution: 0.1
     * Min: 0
     * Max: 20
     */
    float yVelocityStdDev;
    /** YawRate
     * Rotation velocity of the object
     * Unit: rad/s
     * Resolution: 0.01
     * Min: -2.5
     * Max: 2.5
     */
    float yawRate;
} VisionCore_TrafficParticipants_ObjectVelocity;

typedef struct _VisionCore_TrafficParticipants_ObjectVisibility_Raw {
    /** LeftEdgeVisibility
     * Describes the visibility of the left edge of the object
     */
    VisionCore_TrafficParticipants_ObjectEdgeVisibility leftEdgeVisibility;
    /** RightEdgeVisibility
     * Describes the visibility of the right edge of the object
     */
    VisionCore_TrafficParticipants_ObjectEdgeVisibility rightEdgeVisibility;
} VisionCore_TrafficParticipants_ObjectVisibility_Raw;

#define VisionCore_TrafficParticipants_ObjectVisibility VisionCore_TrafficParticipants_ObjectVisibility_Raw

typedef struct _VisionCore_TrafficParticipants_Object_Raw {
    /** Id
     * A unique ID in the range of [0, 254], which is constant as long as the object is tracked. Note! A value of 0 indicates 'no object'
     * Min: 0
     * Max: 255
     */
    uint8_t id;
    /** ObjectClass
     * Describes the type of object
     */
    VisionCore_TrafficParticipants_ObjectClass objectClass;
    /** MotionMode
     * Describes how the object moves
     */
    VisionCore_TrafficParticipants_ObjectMotionMode motionMode;
    /** ObjectPose
     * Describes the pose of the object
     */
    VisionCore_TrafficParticipants_ObjectPose objectPose;
    /** PositionAclc
     * Position data in ACLC
     */
    VisionCore_TrafficParticipants_ObjectPosition_Raw positionAclc;
    /** VelocityAclc
     * Velocity data in ACLC
     */
    VisionCore_TrafficParticipants_ObjectVelocity_Raw velocityAclc;
    /** AccelerationAclc
     * Acceleration data in ACLC
     */
    VisionCore_TrafficParticipants_ObjectAcceleration_Raw accelerationAclc;
    /** Size
     * Size data
     */
    VisionCore_TrafficParticipants_ObjectSize_Raw size;
    /** LaneProperties
     * Object state relative to lane
     */
    VisionCore_TrafficParticipants_LaneProperties_Raw laneProperties;
    /** Quality
     * Signal quality estimates
     */
    VisionCore_TrafficParticipants_ObjectQuality_Raw quality;
    /** Visibility
     * Signals about object visibility
     */
    VisionCore_TrafficParticipants_ObjectVisibility_Raw visibility;
    /** ExistsStereoMeasurement
     * Indicates if the object has stereo measurements
     */
    bool existsStereoMeasurement;
    /** ExistsClusterMeasurement
     * Indicates if the object has cluster measurements
     */
    bool existsClusterMeasurement;
    /** BlockageRegionIds
     * Signal representing blockage regions that the object is located in
     * Min: 0
     * Max: 65535
     */
    uint16_t blockageRegionIds;
    /** TurnIndicatorStatus
     * Describes the turn indicator status in case of vehicles
     */
    VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus turnIndicatorStatus;
    /** VerificationStatus
     * Verification signals bitmask, described by ObjectVerificationStatusBitMask enum
     * Min: 0
     * Max: 4.29497e+09
     */
    uint32_t verificationStatus;
} VisionCore_TrafficParticipants_Object_Raw;

typedef struct _VisionCore_TrafficParticipants_Object {
    /** Id
     * A unique ID in the range of [0, 254], which is constant as long as the object is tracked. Note! A value of 0 indicates 'no object'
     * Min: 0
     * Max: 255
     */
    uint8_t id;
    /** ObjectClass
     * Describes the type of object
     */
    VisionCore_TrafficParticipants_ObjectClass objectClass;
    /** MotionMode
     * Describes how the object moves
     */
    VisionCore_TrafficParticipants_ObjectMotionMode motionMode;
    /** ObjectPose
     * Describes the pose of the object
     */
    VisionCore_TrafficParticipants_ObjectPose objectPose;
    /** PositionAclc
     * Position data in ACLC
     */
    VisionCore_TrafficParticipants_ObjectPosition positionAclc;
    /** VelocityAclc
     * Velocity data in ACLC
     */
    VisionCore_TrafficParticipants_ObjectVelocity velocityAclc;
    /** AccelerationAclc
     * Acceleration data in ACLC
     */
    VisionCore_TrafficParticipants_ObjectAcceleration accelerationAclc;
    /** Size
     * Size data
     */
    VisionCore_TrafficParticipants_ObjectSize size;
    /** LaneProperties
     * Object state relative to lane
     */
    VisionCore_TrafficParticipants_LaneProperties laneProperties;
    /** Quality
     * Signal quality estimates
     */
    VisionCore_TrafficParticipants_ObjectQuality quality;
    /** Visibility
     * Signals about object visibility
     */
    VisionCore_TrafficParticipants_ObjectVisibility visibility;
    /** ExistsStereoMeasurement
     * Indicates if the object has stereo measurements
     */
    bool existsStereoMeasurement;
    /** ExistsClusterMeasurement
     * Indicates if the object has cluster measurements
     */
    bool existsClusterMeasurement;
    /** BlockageRegionIds
     * Signal representing blockage regions that the object is located in
     * Min: 0
     * Max: 65535
     */
    uint16_t blockageRegionIds;
    /** TurnIndicatorStatus
     * Describes the turn indicator status in case of vehicles
     */
    VisionCore_TrafficParticipants_ObjectTurnIndicatorStatus turnIndicatorStatus;
    /** VerificationStatus
     * Verification signals bitmask, described by ObjectVerificationStatusBitMask enum
     * Min: 0
     * Max: 4.29497e+09
     */
    uint32_t verificationStatus;
} VisionCore_TrafficParticipants_Object;

typedef struct _VisionCore_TrafficParticipants_ObjectsOutput_Raw {
    qpb_size_t objects_count;
    /** Objects
     * List of detected objects
     */
    VisionCore_TrafficParticipants_Object_Raw objects[25];
} VisionCore_TrafficParticipants_ObjectsOutput_Raw;

typedef struct _VisionCore_TrafficParticipants_ObjectsOutput {
    qpb_size_t objects_count;
    /** Objects
     * List of detected objects
     */
    VisionCore_TrafficParticipants_Object objects[25];
} VisionCore_TrafficParticipants_ObjectsOutput;

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_TRAFFICPARTICIPANTS_OBJECTSOUTPUT_TYPES_INCLUDED */
