/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef VISIONCORE_ROAD_FREESPACE_INCLUDED
#define VISIONCORE_ROAD_FREESPACE_INCLUDED

#include "VisionCore/Road/Freespace_types.qpb.h"

#include "VisionCore/Common/Coords.qpb.h"

#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define VisionCore_Road_FreespaceSector_size                                             ((7 + VisionCore_Common_Coord2_m_0_01_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_Freespace_size                                                   (1020)

/* Message IDs (where set with "identifier" option) */
#define VisionCore_Road_Freespace_source                                                 2U
#define VisionCore_Road_Freespace_identifier                                             206U
#define VisionCore_Road_Freespace_majorVersion                                           1U
#define VisionCore_Road_Freespace_minorVersion                                           0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_VisionCore_Road_FreespaceSector_Raw(qpb_ostream_t *const stream, const VisionCore_Road_FreespaceSector_Raw *const data);
bool decode_VisionCore_Road_FreespaceSector_Raw(qpb_istream_t *const stream, VisionCore_Road_FreespaceSector_Raw *const data);
bool encode_VisionCore_Road_FreespaceSector(qpb_ostream_t *const stream, const VisionCore_Road_FreespaceSector *const data);
bool decode_VisionCore_Road_FreespaceSector(qpb_istream_t *const stream, VisionCore_Road_FreespaceSector *const data);

bool encode_VisionCore_Road_Freespace_Raw(qpb_ostream_t *const stream, const VisionCore_Road_Freespace_Raw *const data);
bool decode_VisionCore_Road_Freespace_Raw(qpb_istream_t *const stream, VisionCore_Road_Freespace_Raw *const data);
bool encode_VisionCore_Road_Freespace(qpb_ostream_t *const stream, const VisionCore_Road_Freespace *const data);
bool decode_VisionCore_Road_Freespace(qpb_istream_t *const stream, VisionCore_Road_Freespace *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_ROAD_FREESPACE_INCLUDED */
