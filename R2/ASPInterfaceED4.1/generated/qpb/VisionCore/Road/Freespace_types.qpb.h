/* Automatically generated qpb types header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef VISIONCORE_ROAD_FREESPACE_TYPES_INCLUDED
#define VISIONCORE_ROAD_FREESPACE_TYPES_INCLUDED

#include "Tools/QuickProtobuf/qpb_types.h"

#include "VisionCore/Common/Coords_types.qpb.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _VisionCore_Road_FreespaceBoundaryType {
    VisionCore_Road_FreespaceBoundaryType_None = 0,
    VisionCore_Road_FreespaceBoundaryType_RoadUser = 1,
    VisionCore_Road_FreespaceBoundaryType_Traversable = 2,
    VisionCore_Road_FreespaceBoundaryType_NonTraversable = 3,
    VisionCore_Road_FreespaceBoundaryType_Unknown = 4
} VisionCore_Road_FreespaceBoundaryType;
#define VisionCore_Road_FreespaceBoundaryType_MIN VisionCore_Road_FreespaceBoundaryType_None
#define VisionCore_Road_FreespaceBoundaryType_MAX VisionCore_Road_FreespaceBoundaryType_Unknown
#define VisionCore_Road_FreespaceBoundaryType_ARRAYSIZE ((VisionCore_Road_FreespaceBoundaryType)(VisionCore_Road_FreespaceBoundaryType_Unknown+1))

/* Struct definitions */
typedef struct _VisionCore_Road_FreespaceSector_Raw {
    /** BoundaryPosition
     * Position of the closest boundary in the sector
     */
    VisionCore_Common_Coord2_m_0_01_Raw boundaryPosition;
    /** Type
     * Type of limitation
     */
    VisionCore_Road_FreespaceBoundaryType type;
    /** Confidence
     * Detection confidence based on CNN classification
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t confidence;
} VisionCore_Road_FreespaceSector_Raw;

typedef struct _VisionCore_Road_FreespaceSector {
    /** BoundaryPosition
     * Position of the closest boundary in the sector
     */
    VisionCore_Common_Coord2_m_0_01 boundaryPosition;
    /** Type
     * Type of limitation
     */
    VisionCore_Road_FreespaceBoundaryType type;
    /** Confidence
     * Detection confidence based on CNN classification
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t confidence;
} VisionCore_Road_FreespaceSector;

typedef struct _VisionCore_Road_Freespace_Raw {
    qpb_size_t sectors_count;
    /** Sectors
     * All freespace sectors, from negative to positive angle / right to left in Vertical FoV. ±30°.
     */
    VisionCore_Road_FreespaceSector_Raw sectors[60];
} VisionCore_Road_Freespace_Raw;

typedef struct _VisionCore_Road_Freespace {
    qpb_size_t sectors_count;
    /** Sectors
     * All freespace sectors, from negative to positive angle / right to left in Vertical FoV. ±30°.
     */
    VisionCore_Road_FreespaceSector sectors[60];
} VisionCore_Road_Freespace;

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_ROAD_FREESPACE_TYPES_INCLUDED */
