/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef VISIONCORE_ROAD_LANEOUTPUT_INCLUDED
#define VISIONCORE_ROAD_LANEOUTPUT_INCLUDED

#include "VisionCore/Road/LaneOutput_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define VisionCore_Road_Clothoid_size                                                    (26)
#define VisionCore_Road_ClothoidVariance_size                                            (20)
#define VisionCore_Road_LaneEvent_size                                                   (14)
#define VisionCore_Road_TemporaryMarkings_size                                           (6)
#define VisionCore_Road_LaneTrack_size                                                   ((57 + VisionCore_Road_Clothoid_size + VisionCore_Road_ClothoidVariance_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_EgoLane_size                                                     ((8 + VisionCore_Road_LaneTrack_size + VisionCore_Road_LaneTrack_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_LaneOutput_size                                                  ((92 + VisionCore_Road_EgoLane_size + VisionCore_Road_EgoLane_size + VisionCore_Road_LaneTrack_size + VisionCore_Road_LaneTrack_size + VisionCore_Road_TemporaryMarkings_size) + QPB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define VisionCore_Road_LaneOutput_source                                                2U
#define VisionCore_Road_LaneOutput_identifier                                            201U
#define VisionCore_Road_LaneOutput_majorVersion                                          2U
#define VisionCore_Road_LaneOutput_minorVersion                                          0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_VisionCore_Road_Clothoid_Raw(qpb_ostream_t *const stream, const VisionCore_Road_Clothoid_Raw *const data);
bool decode_VisionCore_Road_Clothoid_Raw(qpb_istream_t *const stream, VisionCore_Road_Clothoid_Raw *const data);
bool encode_VisionCore_Road_Clothoid(qpb_ostream_t *const stream, const VisionCore_Road_Clothoid *const data);
bool decode_VisionCore_Road_Clothoid(qpb_istream_t *const stream, VisionCore_Road_Clothoid *const data);

bool encode_VisionCore_Road_ClothoidVariance_Raw(qpb_ostream_t *const stream, const VisionCore_Road_ClothoidVariance_Raw *const data);
bool decode_VisionCore_Road_ClothoidVariance_Raw(qpb_istream_t *const stream, VisionCore_Road_ClothoidVariance_Raw *const data);
bool encode_VisionCore_Road_ClothoidVariance(qpb_ostream_t *const stream, const VisionCore_Road_ClothoidVariance *const data);
bool decode_VisionCore_Road_ClothoidVariance(qpb_istream_t *const stream, VisionCore_Road_ClothoidVariance *const data);

bool encode_VisionCore_Road_LaneEvent_Raw(qpb_ostream_t *const stream, const VisionCore_Road_LaneEvent_Raw *const data);
bool decode_VisionCore_Road_LaneEvent_Raw(qpb_istream_t *const stream, VisionCore_Road_LaneEvent_Raw *const data);
bool encode_VisionCore_Road_LaneEvent(qpb_ostream_t *const stream, const VisionCore_Road_LaneEvent *const data);
bool decode_VisionCore_Road_LaneEvent(qpb_istream_t *const stream, VisionCore_Road_LaneEvent *const data);

bool encode_VisionCore_Road_TemporaryMarkings_Raw(qpb_ostream_t *const stream, const VisionCore_Road_TemporaryMarkings_Raw *const data);
bool decode_VisionCore_Road_TemporaryMarkings_Raw(qpb_istream_t *const stream, VisionCore_Road_TemporaryMarkings_Raw *const data);
bool encode_VisionCore_Road_TemporaryMarkings(qpb_ostream_t *const stream, const VisionCore_Road_TemporaryMarkings *const data);
bool decode_VisionCore_Road_TemporaryMarkings(qpb_istream_t *const stream, VisionCore_Road_TemporaryMarkings *const data);

bool encode_VisionCore_Road_LaneTrack_Raw(qpb_ostream_t *const stream, const VisionCore_Road_LaneTrack_Raw *const data);
bool decode_VisionCore_Road_LaneTrack_Raw(qpb_istream_t *const stream, VisionCore_Road_LaneTrack_Raw *const data);
bool encode_VisionCore_Road_LaneTrack(qpb_ostream_t *const stream, const VisionCore_Road_LaneTrack *const data);
bool decode_VisionCore_Road_LaneTrack(qpb_istream_t *const stream, VisionCore_Road_LaneTrack *const data);

bool encode_VisionCore_Road_EgoLane_Raw(qpb_ostream_t *const stream, const VisionCore_Road_EgoLane_Raw *const data);
bool decode_VisionCore_Road_EgoLane_Raw(qpb_istream_t *const stream, VisionCore_Road_EgoLane_Raw *const data);
bool encode_VisionCore_Road_EgoLane(qpb_ostream_t *const stream, const VisionCore_Road_EgoLane *const data);
bool decode_VisionCore_Road_EgoLane(qpb_istream_t *const stream, VisionCore_Road_EgoLane *const data);

bool encode_VisionCore_Road_LaneOutput_Raw(qpb_ostream_t *const stream, const VisionCore_Road_LaneOutput_Raw *const data);
bool decode_VisionCore_Road_LaneOutput_Raw(qpb_istream_t *const stream, VisionCore_Road_LaneOutput_Raw *const data);
bool encode_VisionCore_Road_LaneOutput(qpb_ostream_t *const stream, const VisionCore_Road_LaneOutput *const data);
bool decode_VisionCore_Road_LaneOutput(qpb_istream_t *const stream, VisionCore_Road_LaneOutput *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_ROAD_LANEOUTPUT_INCLUDED */
