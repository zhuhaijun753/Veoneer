/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef VISIONCORE_ROAD_SCENECLASSIFICATION_INCLUDED
#define VISIONCORE_ROAD_SCENECLASSIFICATION_INCLUDED

#include "VisionCore/Road/SceneClassification_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define VisionCore_Road_RoadClassificationResult_size                                    (5)
#define VisionCore_Road_RoadCover_size                                                   ((6 + VisionCore_Road_RoadClassificationResult_size + VisionCore_Road_RoadClassificationResult_size + VisionCore_Road_RoadClassificationResult_size) + QPB_VARINT_MAX_ENCODED_SIZE)
#define VisionCore_Road_SceneClassification_size                                         ((6 + VisionCore_Road_RoadCover_size + VisionCore_Road_RoadClassificationResult_size + VisionCore_Road_RoadClassificationResult_size) + QPB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define VisionCore_Road_SceneClassification_source                                       2U
#define VisionCore_Road_SceneClassification_identifier                                   510U
#define VisionCore_Road_SceneClassification_majorVersion                                 1U
#define VisionCore_Road_SceneClassification_minorVersion                                 0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_VisionCore_Road_RoadClassificationResult_Raw(qpb_ostream_t *const stream, const VisionCore_Road_RoadClassificationResult_Raw *const data);
bool decode_VisionCore_Road_RoadClassificationResult_Raw(qpb_istream_t *const stream, VisionCore_Road_RoadClassificationResult_Raw *const data);
#define encode_VisionCore_Road_RoadClassificationResult encode_VisionCore_Road_RoadClassificationResult_Raw
#define decode_VisionCore_Road_RoadClassificationResult decode_VisionCore_Road_RoadClassificationResult_Raw

bool encode_VisionCore_Road_RoadCover_Raw(qpb_ostream_t *const stream, const VisionCore_Road_RoadCover_Raw *const data);
bool decode_VisionCore_Road_RoadCover_Raw(qpb_istream_t *const stream, VisionCore_Road_RoadCover_Raw *const data);
#define encode_VisionCore_Road_RoadCover encode_VisionCore_Road_RoadCover_Raw
#define decode_VisionCore_Road_RoadCover decode_VisionCore_Road_RoadCover_Raw

bool encode_VisionCore_Road_SceneClassification_Raw(qpb_ostream_t *const stream, const VisionCore_Road_SceneClassification_Raw *const data);
bool decode_VisionCore_Road_SceneClassification_Raw(qpb_istream_t *const stream, VisionCore_Road_SceneClassification_Raw *const data);
#define encode_VisionCore_Road_SceneClassification encode_VisionCore_Road_SceneClassification_Raw
#define decode_VisionCore_Road_SceneClassification decode_VisionCore_Road_SceneClassification_Raw

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* VISIONCORE_ROAD_SCENECLASSIFICATION_INCLUDED */
