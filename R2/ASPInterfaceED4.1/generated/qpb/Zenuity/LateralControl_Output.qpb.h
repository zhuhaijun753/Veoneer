/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef ZENUITY_LATERALCONTROL_OUTPUT_INCLUDED
#define ZENUITY_LATERALCONTROL_OUTPUT_INCLUDED

#include "Zenuity/LateralControl_Output_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define Zenuity_LateralControl_FrontWheelRequest_size                                    (36)
#define Zenuity_LateralControl_LateralControlOutput_size                                 ((4 + Zenuity_LateralControl_FrontWheelRequest_size) + QPB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define Zenuity_LateralControl_LateralControlOutput_source                               1U
#define Zenuity_LateralControl_LateralControlOutput_identifier                           10U
#define Zenuity_LateralControl_LateralControlOutput_majorVersion                         1U
#define Zenuity_LateralControl_LateralControlOutput_minorVersion                         0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_Zenuity_LateralControl_FrontWheelRequest_Raw(qpb_ostream_t *const stream, const Zenuity_LateralControl_FrontWheelRequest_Raw *const data);
bool decode_Zenuity_LateralControl_FrontWheelRequest_Raw(qpb_istream_t *const stream, Zenuity_LateralControl_FrontWheelRequest_Raw *const data);
bool encode_Zenuity_LateralControl_FrontWheelRequest(qpb_ostream_t *const stream, const Zenuity_LateralControl_FrontWheelRequest *const data);
bool decode_Zenuity_LateralControl_FrontWheelRequest(qpb_istream_t *const stream, Zenuity_LateralControl_FrontWheelRequest *const data);

bool encode_Zenuity_LateralControl_LateralControlOutput_Raw(qpb_ostream_t *const stream, const Zenuity_LateralControl_LateralControlOutput_Raw *const data);
bool decode_Zenuity_LateralControl_LateralControlOutput_Raw(qpb_istream_t *const stream, Zenuity_LateralControl_LateralControlOutput_Raw *const data);
bool encode_Zenuity_LateralControl_LateralControlOutput(qpb_ostream_t *const stream, const Zenuity_LateralControl_LateralControlOutput *const data);
bool decode_Zenuity_LateralControl_LateralControlOutput(qpb_istream_t *const stream, Zenuity_LateralControl_LateralControlOutput *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ZENUITY_LATERALCONTROL_OUTPUT_INCLUDED */
