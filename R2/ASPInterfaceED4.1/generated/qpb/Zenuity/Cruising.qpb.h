/* Automatically generated qpb header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef ZENUITY_CRUISING_INCLUDED
#define ZENUITY_CRUISING_INCLUDED

#include "Zenuity/Cruising_types.qpb.h"


#include "Tools/QuickProtobuf/qpb.h"

#if QPB_PROTO_HEADER_VERSION != 2
#error Regenerate this file with the current version of qpb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Maximum encoded size of messages (where known) */
#define Zenuity_Crusing_AccelerationRequest_size                                         (16)
#define Zenuity_Crusing_CancelReasonAcc_size                                             (4)
#define Zenuity_Crusing_InformationToDriverFromTrafficAssist_size                        (10)
#define Zenuity_Crusing_SelectedTarget_size                                              (16)
#define Zenuity_Crusing_TrafficAssistOutput_size                                         (2)
#define Zenuity_Crusing_TargetsSelectedByAcc_size                                        ((10 + Zenuity_Crusing_SelectedTarget_size + Zenuity_Crusing_SelectedTarget_size + Zenuity_Crusing_SelectedTarget_size + Zenuity_Crusing_SelectedTarget_size + Zenuity_Crusing_SelectedTarget_size) + QPB_VARINT_MAX_ENCODED_SIZE)

/* Message IDs (where set with "identifier" option) */
#define Zenuity_Crusing_CancelReasonAcc_source                                           1U
#define Zenuity_Crusing_CancelReasonAcc_identifier                                       30U
#define Zenuity_Crusing_CancelReasonAcc_majorVersion                                     1U
#define Zenuity_Crusing_CancelReasonAcc_minorVersion                                     0U
#define Zenuity_Crusing_AccelerationRequest_source                                       1U
#define Zenuity_Crusing_AccelerationRequest_identifier                                   31U
#define Zenuity_Crusing_AccelerationRequest_majorVersion                                 1U
#define Zenuity_Crusing_AccelerationRequest_minorVersion                                 0U
#define Zenuity_Crusing_TargetsSelectedByAcc_source                                      1U
#define Zenuity_Crusing_TargetsSelectedByAcc_identifier                                  32U
#define Zenuity_Crusing_TargetsSelectedByAcc_majorVersion                                1U
#define Zenuity_Crusing_TargetsSelectedByAcc_minorVersion                                0U
#define Zenuity_Crusing_TrafficAssistOutput_source                                       1U
#define Zenuity_Crusing_TrafficAssistOutput_identifier                                   666U
#define Zenuity_Crusing_TrafficAssistOutput_majorVersion                                 1U
#define Zenuity_Crusing_TrafficAssistOutput_minorVersion                                 0U
#define Zenuity_Crusing_InformationToDriverFromTrafficAssist_source                      1U
#define Zenuity_Crusing_InformationToDriverFromTrafficAssist_identifier                  667U
#define Zenuity_Crusing_InformationToDriverFromTrafficAssist_majorVersion                1U
#define Zenuity_Crusing_InformationToDriverFromTrafficAssist_minorVersion                0U

/* Encoding / decoding functions
 * Returns true on success, false on any failure.
 * Notes on Decode:
 * User is expected to provide a struct with wanted/default values (all zeroes).
 * A case where default values are not wanted is if you want to merge two messages
 * i.e. update only the fields that exist in the new message.
 * Note: These functions supports NULL termination of messages which most other
 *       protobuf implementations do not just so you know
 */
bool encode_Zenuity_Crusing_AccelerationRequest_Raw(qpb_ostream_t *const stream, const Zenuity_Crusing_AccelerationRequest_Raw *const data);
bool decode_Zenuity_Crusing_AccelerationRequest_Raw(qpb_istream_t *const stream, Zenuity_Crusing_AccelerationRequest_Raw *const data);
bool encode_Zenuity_Crusing_AccelerationRequest(qpb_ostream_t *const stream, const Zenuity_Crusing_AccelerationRequest *const data);
bool decode_Zenuity_Crusing_AccelerationRequest(qpb_istream_t *const stream, Zenuity_Crusing_AccelerationRequest *const data);

bool encode_Zenuity_Crusing_CancelReasonAcc_Raw(qpb_ostream_t *const stream, const Zenuity_Crusing_CancelReasonAcc_Raw *const data);
bool decode_Zenuity_Crusing_CancelReasonAcc_Raw(qpb_istream_t *const stream, Zenuity_Crusing_CancelReasonAcc_Raw *const data);
#define encode_Zenuity_Crusing_CancelReasonAcc encode_Zenuity_Crusing_CancelReasonAcc_Raw
#define decode_Zenuity_Crusing_CancelReasonAcc decode_Zenuity_Crusing_CancelReasonAcc_Raw

bool encode_Zenuity_Crusing_InformationToDriverFromTrafficAssist_Raw(qpb_ostream_t *const stream, const Zenuity_Crusing_InformationToDriverFromTrafficAssist_Raw *const data);
bool decode_Zenuity_Crusing_InformationToDriverFromTrafficAssist_Raw(qpb_istream_t *const stream, Zenuity_Crusing_InformationToDriverFromTrafficAssist_Raw *const data);
#define encode_Zenuity_Crusing_InformationToDriverFromTrafficAssist encode_Zenuity_Crusing_InformationToDriverFromTrafficAssist_Raw
#define decode_Zenuity_Crusing_InformationToDriverFromTrafficAssist decode_Zenuity_Crusing_InformationToDriverFromTrafficAssist_Raw

bool encode_Zenuity_Crusing_SelectedTarget_Raw(qpb_ostream_t *const stream, const Zenuity_Crusing_SelectedTarget_Raw *const data);
bool decode_Zenuity_Crusing_SelectedTarget_Raw(qpb_istream_t *const stream, Zenuity_Crusing_SelectedTarget_Raw *const data);
bool encode_Zenuity_Crusing_SelectedTarget(qpb_ostream_t *const stream, const Zenuity_Crusing_SelectedTarget *const data);
bool decode_Zenuity_Crusing_SelectedTarget(qpb_istream_t *const stream, Zenuity_Crusing_SelectedTarget *const data);

bool encode_Zenuity_Crusing_TrafficAssistOutput_Raw(qpb_ostream_t *const stream, const Zenuity_Crusing_TrafficAssistOutput_Raw *const data);
bool decode_Zenuity_Crusing_TrafficAssistOutput_Raw(qpb_istream_t *const stream, Zenuity_Crusing_TrafficAssistOutput_Raw *const data);
#define encode_Zenuity_Crusing_TrafficAssistOutput encode_Zenuity_Crusing_TrafficAssistOutput_Raw
#define decode_Zenuity_Crusing_TrafficAssistOutput decode_Zenuity_Crusing_TrafficAssistOutput_Raw

bool encode_Zenuity_Crusing_TargetsSelectedByAcc_Raw(qpb_ostream_t *const stream, const Zenuity_Crusing_TargetsSelectedByAcc_Raw *const data);
bool decode_Zenuity_Crusing_TargetsSelectedByAcc_Raw(qpb_istream_t *const stream, Zenuity_Crusing_TargetsSelectedByAcc_Raw *const data);
bool encode_Zenuity_Crusing_TargetsSelectedByAcc(qpb_ostream_t *const stream, const Zenuity_Crusing_TargetsSelectedByAcc *const data);
bool decode_Zenuity_Crusing_TargetsSelectedByAcc(qpb_istream_t *const stream, Zenuity_Crusing_TargetsSelectedByAcc *const data);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ZENUITY_CRUISING_INCLUDED */
