/* Automatically generated qpb types header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef SYSTEMCORE_LONGITUDINALVEHICLECONTROL_LVCINPUT_TYPES_INCLUDED
#define SYSTEMCORE_LONGITUDINALVEHICLECONTROL_LVCINPUT_TYPES_INCLUDED

#include "Tools/QuickProtobuf/qpb_types.h"

#include "SystemCore/Common/VehicleInput_types.qpb.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SystemCore_LongitudinalVehicleControl_UsageMode {
    SystemCore_LongitudinalVehicleControl_UsageMode_Abandoned = 0,
    SystemCore_LongitudinalVehicleControl_UsageMode_Inactive = 1,
    SystemCore_LongitudinalVehicleControl_UsageMode_Convenience = 2,
    SystemCore_LongitudinalVehicleControl_UsageMode_Active = 11,
    SystemCore_LongitudinalVehicleControl_UsageMode_Driving = 13
} SystemCore_LongitudinalVehicleControl_UsageMode;
#define SystemCore_LongitudinalVehicleControl_UsageMode_MIN SystemCore_LongitudinalVehicleControl_UsageMode_Abandoned
#define SystemCore_LongitudinalVehicleControl_UsageMode_MAX SystemCore_LongitudinalVehicleControl_UsageMode_Driving
#define SystemCore_LongitudinalVehicleControl_UsageMode_ARRAYSIZE ((SystemCore_LongitudinalVehicleControl_UsageMode)(SystemCore_LongitudinalVehicleControl_UsageMode_Driving+1))

typedef enum _SystemCore_LongitudinalVehicleControl_EpbStatus {
    SystemCore_LongitudinalVehicleControl_EpbStatus_Unknown = 0,
    SystemCore_LongitudinalVehicleControl_EpbStatus_AllApplied = 3,
    SystemCore_LongitudinalVehicleControl_EpbStatus_AllInTransition = 5,
    SystemCore_LongitudinalVehicleControl_EpbStatus_ParkingBrakeReleased = 9
} SystemCore_LongitudinalVehicleControl_EpbStatus;
#define SystemCore_LongitudinalVehicleControl_EpbStatus_MIN SystemCore_LongitudinalVehicleControl_EpbStatus_Unknown
#define SystemCore_LongitudinalVehicleControl_EpbStatus_MAX SystemCore_LongitudinalVehicleControl_EpbStatus_ParkingBrakeReleased
#define SystemCore_LongitudinalVehicleControl_EpbStatus_ARRAYSIZE ((SystemCore_LongitudinalVehicleControl_EpbStatus)(SystemCore_LongitudinalVehicleControl_EpbStatus_ParkingBrakeReleased+1))

typedef enum _SystemCore_LongitudinalVehicleControl_StandStillManagerStatus {
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_NonActive = 0,
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_SoftStop = 1,
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_DriverAwayRelease = 2,
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_AcbHoldActive = 3,
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_AhHoldActive = 4,
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_HsaHoldActive = 5
} SystemCore_LongitudinalVehicleControl_StandStillManagerStatus;
#define SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_MIN SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_NonActive
#define SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_MAX SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_HsaHoldActive
#define SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_ARRAYSIZE ((SystemCore_LongitudinalVehicleControl_StandStillManagerStatus)(SystemCore_LongitudinalVehicleControl_StandStillManagerStatus_HsaHoldActive+1))

typedef enum _SystemCore_LongitudinalVehicleControl_MotionState {
    SystemCore_LongitudinalVehicleControl_MotionState_Unknown = 0,
    SystemCore_LongitudinalVehicleControl_MotionState_StandstillQm = 1,
    SystemCore_LongitudinalVehicleControl_MotionState_StandstillAsilB = 2,
    SystemCore_LongitudinalVehicleControl_MotionState_StandstillAsilC = 3,
    SystemCore_LongitudinalVehicleControl_MotionState_RollingForwardAsilB = 4,
    SystemCore_LongitudinalVehicleControl_MotionState_RollingForwardAsilC = 5,
    SystemCore_LongitudinalVehicleControl_MotionState_RollingBackAsilB = 6,
    SystemCore_LongitudinalVehicleControl_MotionState_RollingBackAsilC = 7
} SystemCore_LongitudinalVehicleControl_MotionState;
#define SystemCore_LongitudinalVehicleControl_MotionState_MIN SystemCore_LongitudinalVehicleControl_MotionState_Unknown
#define SystemCore_LongitudinalVehicleControl_MotionState_MAX SystemCore_LongitudinalVehicleControl_MotionState_RollingBackAsilC
#define SystemCore_LongitudinalVehicleControl_MotionState_ARRAYSIZE ((SystemCore_LongitudinalVehicleControl_MotionState)(SystemCore_LongitudinalVehicleControl_MotionState_RollingBackAsilC+1))

/* Struct definitions */
typedef struct _SystemCore_LongitudinalVehicleControl_DriverInteraction_Raw {
    /** DriverPropulsionTorqueRequest
     * Torque request from driver via accelerator pedal.
     * Unit: Nm
     * Min: -20000
     * Max: 20000
     */
    int16_t driverPropulsionTorqueRequest;
} SystemCore_LongitudinalVehicleControl_DriverInteraction_Raw;

#define SystemCore_LongitudinalVehicleControl_DriverInteraction SystemCore_LongitudinalVehicleControl_DriverInteraction_Raw

typedef struct _SystemCore_LongitudinalVehicleControl_FeatureEnabledLCP_Raw {
    /** FeatureEnabled
     * Degradation input which disables the LCP feature. True if feature is ON, otherwise false
     */
    bool featureEnabled;
} SystemCore_LongitudinalVehicleControl_FeatureEnabledLCP_Raw;

#define SystemCore_LongitudinalVehicleControl_FeatureEnabledLCP SystemCore_LongitudinalVehicleControl_FeatureEnabledLCP_Raw

typedef struct _SystemCore_LongitudinalVehicleControl_FeedbackInfo_Raw {
    /** AbsCtrlActv
     * Indicates if ABS is active
     */
    bool absCtrlActv;
    /** BrakeActuatorActiveForComfort
     * Indicates if the brakes are braking as a result of a comfort functions request or not
     */
    bool brakeActuatorActiveForComfort;
    /** RequestedBrakeTorque
     * indicates what the corresponding torque is of the request that the brakes are acting on at the moment
     */
    SystemCore_Common_BrakeSystem_Raw requestedBrakeTorque;
    /** ActualBrakeTorque
     * Indicates what the actual brake torque is at the moment
     * Unit: Nm
     * Min: 0
     * Max: 65535
     */
    uint16_t actualBrakeTorque;
    /** BrakePrefillActive
     * Indicates that brake pre fill is active or not
     */
    bool brakePrefillActive;
    /** ElectricParkBrakeStatus
     * indicates the status of the electric parking brake
     */
    SystemCore_LongitudinalVehicleControl_EpbStatus electricParkBrakeStatus;
    /** DragTorque
     * indicates what torque would be acting on the wheels if no autonomous functions where active and neither brake nor accelerator pedal was pressed
     * Unit: Nm
     * Min: -20000
     * Max: 20000
     */
    int16_t dragTorque;
    /** WheelPropulsionTorqueActual
     * Indicates the actual torque on the wheels from powertrain
     * Unit: Nm
     * Min: -20000
     * Max: 20000
     */
    int16_t wheelPropulsionTorqueActual;
    /** SsmHold
     * Indicates if vehicle is in hold state
     */
    bool ssmHold;
    /** StandStillManagerStatus
     * describes standstill manager status
     */
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus standStillManagerStatus;
    /** VehicleMotionStatus
     * indicates if the vehicle is in motion or not and if it is, in which direction
     */
    SystemCore_LongitudinalVehicleControl_MotionState vehicleMotionStatus;
    /** WarmBrakes
     * Indication of warm brakes. Reduced brake capacity depending on brake system HW
     */
    bool warmBrakes;
} SystemCore_LongitudinalVehicleControl_FeedbackInfo_Raw;

typedef struct _SystemCore_LongitudinalVehicleControl_FeedbackInfo {
    /** AbsCtrlActv
     * Indicates if ABS is active
     */
    bool absCtrlActv;
    /** BrakeActuatorActiveForComfort
     * Indicates if the brakes are braking as a result of a comfort functions request or not
     */
    bool brakeActuatorActiveForComfort;
    /** RequestedBrakeTorque
     * indicates what the corresponding torque is of the request that the brakes are acting on at the moment
     */
    SystemCore_Common_BrakeSystem requestedBrakeTorque;
    /** ActualBrakeTorque
     * Indicates what the actual brake torque is at the moment
     * Unit: Nm
     * Min: 0
     * Max: 65535
     */
    uint16_t actualBrakeTorque;
    /** BrakePrefillActive
     * Indicates that brake pre fill is active or not
     */
    bool brakePrefillActive;
    /** ElectricParkBrakeStatus
     * indicates the status of the electric parking brake
     */
    SystemCore_LongitudinalVehicleControl_EpbStatus electricParkBrakeStatus;
    /** DragTorque
     * indicates what torque would be acting on the wheels if no autonomous functions where active and neither brake nor accelerator pedal was pressed
     * Unit: Nm
     * Min: -20000
     * Max: 20000
     */
    int16_t dragTorque;
    /** WheelPropulsionTorqueActual
     * Indicates the actual torque on the wheels from powertrain
     * Unit: Nm
     * Min: -20000
     * Max: 20000
     */
    int16_t wheelPropulsionTorqueActual;
    /** SsmHold
     * Indicates if vehicle is in hold state
     */
    bool ssmHold;
    /** StandStillManagerStatus
     * describes standstill manager status
     */
    SystemCore_LongitudinalVehicleControl_StandStillManagerStatus standStillManagerStatus;
    /** VehicleMotionStatus
     * indicates if the vehicle is in motion or not and if it is, in which direction
     */
    SystemCore_LongitudinalVehicleControl_MotionState vehicleMotionStatus;
    /** WarmBrakes
     * Indication of warm brakes. Reduced brake capacity depending on brake system HW
     */
    bool warmBrakes;
} SystemCore_LongitudinalVehicleControl_FeedbackInfo;

typedef struct _SystemCore_LongitudinalVehicleControl_FunctionStatusInfo_Raw {
    /** DriverCruiseControlRequest
     * Indicates if driver wants to resume ACC
     */
    bool driverCruiseControlRequest;
    /** UsageMode
     * Vehicle usage mode
     */
    SystemCore_LongitudinalVehicleControl_UsageMode usageMode;
} SystemCore_LongitudinalVehicleControl_FunctionStatusInfo_Raw;

#define SystemCore_LongitudinalVehicleControl_FunctionStatusInfo SystemCore_LongitudinalVehicleControl_FunctionStatusInfo_Raw

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* SYSTEMCORE_LONGITUDINALVEHICLECONTROL_LVCINPUT_TYPES_INCLUDED */
