/* Automatically generated qpb types header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef SYSTEMCORE_COLLISIONAVOIDANCE_SETTINGSINPUT_TYPES_INCLUDED
#define SYSTEMCORE_COLLISIONAVOIDANCE_SETTINGSINPUT_TYPES_INCLUDED

#include "Tools/QuickProtobuf/qpb_types.h"


#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SystemCore_CollisionAvoidance_SensitivitySettings {
    SystemCore_CollisionAvoidance_SensitivitySettings_NoChange = 0,
    SystemCore_CollisionAvoidance_SensitivitySettings_Low = 1,
    SystemCore_CollisionAvoidance_SensitivitySettings_Normal = 2,
    SystemCore_CollisionAvoidance_SensitivitySettings_High = 3
} SystemCore_CollisionAvoidance_SensitivitySettings;
#define SystemCore_CollisionAvoidance_SensitivitySettings_MIN SystemCore_CollisionAvoidance_SensitivitySettings_NoChange
#define SystemCore_CollisionAvoidance_SensitivitySettings_MAX SystemCore_CollisionAvoidance_SensitivitySettings_High
#define SystemCore_CollisionAvoidance_SensitivitySettings_ARRAYSIZE ((SystemCore_CollisionAvoidance_SensitivitySettings)(SystemCore_CollisionAvoidance_SensitivitySettings_High+1))

typedef enum _SystemCore_CollisionAvoidance_Switch {
    SystemCore_CollisionAvoidance_Switch_NoChange = 0,
    SystemCore_CollisionAvoidance_Switch_On = 1,
    SystemCore_CollisionAvoidance_Switch_Off = 2
} SystemCore_CollisionAvoidance_Switch;
#define SystemCore_CollisionAvoidance_Switch_MIN SystemCore_CollisionAvoidance_Switch_NoChange
#define SystemCore_CollisionAvoidance_Switch_MAX SystemCore_CollisionAvoidance_Switch_Off
#define SystemCore_CollisionAvoidance_Switch_ARRAYSIZE ((SystemCore_CollisionAvoidance_Switch)(SystemCore_CollisionAvoidance_Switch_Off+1))

typedef enum _SystemCore_CollisionAvoidance_LssSideStatus {
    SystemCore_CollisionAvoidance_LssSideStatus_None = 0,
    SystemCore_CollisionAvoidance_LssSideStatus_Left = 1,
    SystemCore_CollisionAvoidance_LssSideStatus_Right = 2,
    SystemCore_CollisionAvoidance_LssSideStatus_LeftAndRight = 3
} SystemCore_CollisionAvoidance_LssSideStatus;
#define SystemCore_CollisionAvoidance_LssSideStatus_MIN SystemCore_CollisionAvoidance_LssSideStatus_None
#define SystemCore_CollisionAvoidance_LssSideStatus_MAX SystemCore_CollisionAvoidance_LssSideStatus_LeftAndRight
#define SystemCore_CollisionAvoidance_LssSideStatus_ARRAYSIZE ((SystemCore_CollisionAvoidance_LssSideStatus)(SystemCore_CollisionAvoidance_LssSideStatus_LeftAndRight+1))

typedef enum _SystemCore_CollisionAvoidance_CaLongObjectBitmask {
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Unspecified = 0,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_GeneralObject = 1,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Car = 2,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Truck = 3,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Motorcycle = 4,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Pedestrian = 5,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Bicycle = 6,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_Animal = 7,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_RoadConstructionMarker = 8,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_ConstructionWorkTrailer = 9,
    SystemCore_CollisionAvoidance_CaLongObjectBitmask_OtherVehicle = 10
} SystemCore_CollisionAvoidance_CaLongObjectBitmask;
#define SystemCore_CollisionAvoidance_CaLongObjectBitmask_MIN SystemCore_CollisionAvoidance_CaLongObjectBitmask_Unspecified
#define SystemCore_CollisionAvoidance_CaLongObjectBitmask_MAX SystemCore_CollisionAvoidance_CaLongObjectBitmask_OtherVehicle
#define SystemCore_CollisionAvoidance_CaLongObjectBitmask_ARRAYSIZE ((SystemCore_CollisionAvoidance_CaLongObjectBitmask)(SystemCore_CollisionAvoidance_CaLongObjectBitmask_OtherVehicle+1))

/* Struct definitions */
typedef struct _SystemCore_CollisionAvoidance_AebDeactivationParameters_Raw {
    /** TimeWithHighTtc
     * Time after which braking should be disabled when TTC has been large
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 3
     */
    uint16_t timeWithHighTtc;
    /** StandstillTime
     * Time after which braking should be disabled when standstill is enabled
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 3
     */
    uint16_t standstillTime;
} SystemCore_CollisionAvoidance_AebDeactivationParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_AebDeactivationParameters {
    /** TimeWithHighTtc
     * Time after which braking should be disabled when TTC has been large
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 3
     */
    float timeWithHighTtc;
    /** StandstillTime
     * Time after which braking should be disabled when standstill is enabled
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 3
     */
    float standstillTime;
} SystemCore_CollisionAvoidance_AebDeactivationParameters;

typedef struct _SystemCore_CollisionAvoidance_AebScenarioActivationParameters_Raw {
    /** ActivateAebOncoming
     * When false, deactivates the vehicle oncoming scenarios for AEB.
     */
    bool activateAebOncoming;
    /** ActivateAebCrossing
     * When false, deactivates the vehicle crossing scenarios for AEB.
     */
    bool activateAebCrossing;
} SystemCore_CollisionAvoidance_AebScenarioActivationParameters_Raw;

#define SystemCore_CollisionAvoidance_AebScenarioActivationParameters SystemCore_CollisionAvoidance_AebScenarioActivationParameters_Raw

typedef struct _SystemCore_CollisionAvoidance_AebTimingParameters_Raw {
    /** BeltActivationDelay
     * Duration that AEB shall be active before electrical reversible retractor is requested
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 2
     */
    uint8_t beltActivationDelay;
    /** PostEventMessageActivationDelay
     * Duration that AEB is active before sending a HMI message
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 1
     */
    uint8_t postEventMessageActivationDelay;
    /** StandstillRequestHoldTime
     * The time to keep stand still request high after AEB request has ended
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 2.5
     */
    uint8_t standstillRequestHoldTime;
} SystemCore_CollisionAvoidance_AebTimingParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_AebTimingParameters {
    /** BeltActivationDelay
     * Duration that AEB shall be active before electrical reversible retractor is requested
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 2
     */
    float beltActivationDelay;
    /** PostEventMessageActivationDelay
     * Duration that AEB is active before sending a HMI message
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 1
     */
    float postEventMessageActivationDelay;
    /** StandstillRequestHoldTime
     * The time to keep stand still request high after AEB request has ended
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 2.5
     */
    float standstillRequestHoldTime;
} SystemCore_CollisionAvoidance_AebTimingParameters;

typedef struct _SystemCore_CollisionAvoidance_CaLongActivationParameters_Raw {
    /** ActivateActuatingFunctions
     * When false, all actuating functions related to longitudinal collision avoidance are disabled. Examples of disabled functions are: AEB, Dynamic Brake Support and Evasive Maneuver Assist.
     */
    bool activateActuatingFunctions;
    /** ActivateSteeringThreat
     * When false, steering threat will be disabled for AEB, i.e. the driver's ability to avoid collision by applying steering is disregarded.
     */
    bool activateSteeringThreat;
    /** ActivateVruObjects
     * When false, AEB and FCW functions will be disabled for VRU objects.VRU objects consist of pedestrians and bicyclists.
     */
    bool activateVruObjects;
} SystemCore_CollisionAvoidance_CaLongActivationParameters_Raw;

#define SystemCore_CollisionAvoidance_CaLongActivationParameters SystemCore_CollisionAvoidance_CaLongActivationParameters_Raw

typedef struct _SystemCore_CollisionAvoidance_EmaParameters_Raw {
    /** LateralJerkActivationThreshold
     * The jerk threshold for triggering EMA when using required curvature rates as conditions
     * Unit: m/s³
     * Scale: 0.01
     * Min: 5
     * Max: 30
     */
    uint16_t lateralJerkActivationThreshold;
} SystemCore_CollisionAvoidance_EmaParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_EmaParameters {
    /** LateralJerkActivationThreshold
     * The jerk threshold for triggering EMA when using required curvature rates as conditions
     * Unit: m/s³
     * Resolution: 0.01
     * Min: 5
     * Max: 30
     */
    float lateralJerkActivationThreshold;
} SystemCore_CollisionAvoidance_EmaParameters;

typedef struct _SystemCore_CollisionAvoidance_LSSDevelopmentOverrideParameters_Raw {
    /** ElkaBlisInjectedTargetLeft
     * Enable blis injected target left
     */
    bool elkaBlisInjectedTargetLeft;
    /** ElkaBlisInjectedTargetRight
     * Enable blis injected target right
     */
    bool elkaBlisInjectedTargetRight;
    /** ElkaFrontObjectsInjectedTargetLeft
     * Enable injected oncoming vehicle threat left
     */
    bool elkaFrontObjectsInjectedTargetLeft;
    /** ElkaFrontObjectsInjectedTargetRight
     * Enable injected oncoming vehicle threat right
     */
    bool elkaFrontObjectsInjectedTargetRight;
    /** LkaEnableStraightTestPath
     * Enable straight test path for LKA
     */
    bool lkaEnableStraightTestPath;
    /** VirtualRoadEdge
     * Enable virtual road edge on lane markers
     */
    bool virtualRoadEdge;
    /** SaturateLateralPositionForCriticalObjects
     * Enable saturation for the lateral position of critical objects
     */
    bool saturateLateralPositionForCriticalObjects;
} SystemCore_CollisionAvoidance_LSSDevelopmentOverrideParameters_Raw;

#define SystemCore_CollisionAvoidance_LSSDevelopmentOverrideParameters SystemCore_CollisionAvoidance_LSSDevelopmentOverrideParameters_Raw

typedef struct _SystemCore_CollisionAvoidance_LSSTunableParameters_Raw {
    /** LkaMaxTimeNeeded
     * Time based trig level for LKA. Default 3.1.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 5
     */
    uint16_t lkaMaxTimeNeeded;
    /** ElkaRoadEdgeMaxTimeNeeded
     * Time based trig level for eLKA Road Edge. Default 2.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 5
     */
    uint16_t elkaRoadEdgeMaxTimeNeeded;
    /** LkaLaneWidthEnableMargin
     * Minimum lane width margin to enable LKA. Lane width needs to be at least car width plus margin. Default 0.6.
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 10
     */
    uint16_t lkaLaneWidthEnableMargin;
    /** LssEnableObjectTypeSuppression
     * [For features eLKA Road Edge and LKA] Bitfield for enabling LSS object suppression for different object types. All bits being zero disables object suppression. bit 0 = LSB.  bit 0 = enable for objects with any UNKNOWN type. bit 1 = CAR. bit 2 = MOTORCYCLE. bit 3 = TRUCK. bit 4 = PEDESTRIAN. bit 5 = OBJECTGENERAL. bit 6 = BICYCLE. Default 126.
     * Min: 0
     * Max: 255
     */
    uint8_t lssEnableObjectTypeSuppression;
    /** LssOncomingObjectSuppressionSensitivity
     * [For features eLKA Road Edge and LKA] Value for the propensity of LSS suppression based on oncoming objects to be activated. 0 = disabled suppression, and a higher value gives a more frequent object suppression. Default 128.
     * Min: 0
     * Max: 255
     */
    uint8_t lssOncomingObjectSuppressionSensitivity;
    /** LssOvertakeObjectSuppressionSensitivity
     * [For features eLKA Road Edge and LKA] Value for the propensity of LSS object suppression to be activated. 0 = disabled suppression, and a higher value gives a more frequent object suppression. Default 128.
     * Min: 0
     * Max: 255
     */
    uint8_t lssOvertakeObjectSuppressionSensitivity;
    /** LssOncomingObjectSuppressionTime
     * [For features eLKA Road Edge and LKA] Time the oncoming object suppression is held high after conditions are fulfilled. Default 2.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 50
     */
    uint16_t lssOncomingObjectSuppressionTime;
    /** LssOvertakeObjectSuppressionTime
     * [For features eLKA Road Edge and LKA] Time the overtake object suppression is held high after conditions are fulfilled. Default 3.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 50
     */
    uint16_t lssOvertakeObjectSuppressionTime;
    /** LssAccelerationExtrapolationTimeForObjectSuppression
     * [For features eLKA Road Edge and LKA] When time-to-reach is calculated, the ego longitudinal acceleration is extrapolated with this time (estimated v-long = v-long + acc * dT, where dT is this value). Default 3.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 10
     */
    uint16_t lssAccelerationExtrapolationTimeForObjectSuppression;
    /** LssOncomingObjectSuppressionTimeToReachLimit
     * [For features eLKA Road Edge and LKA] Maximum time-to-reach for oncoming object suppression. Default 3.5
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 10
     */
    uint16_t lssOncomingObjectSuppressionTimeToReachLimit;
    /** LssOvertakeObjectSuppressionTimeToReachLimit
     * [For features eLKA Road Edge and LKA] Maximum time-to-reach for oncoming object suppression. Default 5.
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 10
     */
    uint16_t lssOvertakeObjectSuppressionTimeToReachLimit;
    /** LssOvertakeObjectSuppressionLateralPositionLimit
     * [For features eLKA Road Edge and LKA] Maximum lateral position of object -relative to ego vehicle- for overtake object suppression. Default 1.5.
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 20
     */
    uint16_t lssOvertakeObjectSuppressionLateralPositionLimit;
    /** LssOncomingObjectSuppressionLateralGapLimit
     * [For features eLKA Road Edge and LKA] Maximum lateral gap between ego vehicle and object for oncoming object suppression. Default 1.5.
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 20
     */
    uint16_t lssOncomingObjectSuppressionLateralGapLimit;
    /** LssObjectSuppressionNarrowRoadLimit
     * [For features eLKA Road Edge and LKA] Maximum road width for it to be considered narrow, for object suppression. Default 5.5.
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 20
     */
    uint16_t lssObjectSuppressionNarrowRoadLimit;
} SystemCore_CollisionAvoidance_LSSTunableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_LSSTunableParameters {
    /** LkaMaxTimeNeeded
     * Time based trig level for LKA. Default 3.1.
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 5
     */
    float lkaMaxTimeNeeded;
    /** ElkaRoadEdgeMaxTimeNeeded
     * Time based trig level for eLKA Road Edge. Default 2.
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 5
     */
    float elkaRoadEdgeMaxTimeNeeded;
    /** LkaLaneWidthEnableMargin
     * Minimum lane width margin to enable LKA. Lane width needs to be at least car width plus margin. Default 0.6.
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 10
     */
    float lkaLaneWidthEnableMargin;
    /** LssEnableObjectTypeSuppression
     * [For features eLKA Road Edge and LKA] Bitfield for enabling LSS object suppression for different object types. All bits being zero disables object suppression. bit 0 = LSB.  bit 0 = enable for objects with any UNKNOWN type. bit 1 = CAR. bit 2 = MOTORCYCLE. bit 3 = TRUCK. bit 4 = PEDESTRIAN. bit 5 = OBJECTGENERAL. bit 6 = BICYCLE. Default 126.
     * Min: 0
     * Max: 255
     */
    uint8_t lssEnableObjectTypeSuppression;
    /** LssOncomingObjectSuppressionSensitivity
     * [For features eLKA Road Edge and LKA] Value for the propensity of LSS suppression based on oncoming objects to be activated. 0 = disabled suppression, and a higher value gives a more frequent object suppression. Default 128.
     * Min: 0
     * Max: 255
     */
    uint8_t lssOncomingObjectSuppressionSensitivity;
    /** LssOvertakeObjectSuppressionSensitivity
     * [For features eLKA Road Edge and LKA] Value for the propensity of LSS object suppression to be activated. 0 = disabled suppression, and a higher value gives a more frequent object suppression. Default 128.
     * Min: 0
     * Max: 255
     */
    uint8_t lssOvertakeObjectSuppressionSensitivity;
    /** LssOncomingObjectSuppressionTime
     * [For features eLKA Road Edge and LKA] Time the oncoming object suppression is held high after conditions are fulfilled. Default 2.
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 50
     */
    float lssOncomingObjectSuppressionTime;
    /** LssOvertakeObjectSuppressionTime
     * [For features eLKA Road Edge and LKA] Time the overtake object suppression is held high after conditions are fulfilled. Default 3.
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 50
     */
    float lssOvertakeObjectSuppressionTime;
    /** LssAccelerationExtrapolationTimeForObjectSuppression
     * [For features eLKA Road Edge and LKA] When time-to-reach is calculated, the ego longitudinal acceleration is extrapolated with this time (estimated v-long = v-long + acc * dT, where dT is this value). Default 3.
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 10
     */
    float lssAccelerationExtrapolationTimeForObjectSuppression;
    /** LssOncomingObjectSuppressionTimeToReachLimit
     * [For features eLKA Road Edge and LKA] Maximum time-to-reach for oncoming object suppression. Default 3.5
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 10
     */
    float lssOncomingObjectSuppressionTimeToReachLimit;
    /** LssOvertakeObjectSuppressionTimeToReachLimit
     * [For features eLKA Road Edge and LKA] Maximum time-to-reach for oncoming object suppression. Default 5.
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 10
     */
    float lssOvertakeObjectSuppressionTimeToReachLimit;
    /** LssOvertakeObjectSuppressionLateralPositionLimit
     * [For features eLKA Road Edge and LKA] Maximum lateral position of object -relative to ego vehicle- for overtake object suppression. Default 1.5.
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 20
     */
    float lssOvertakeObjectSuppressionLateralPositionLimit;
    /** LssOncomingObjectSuppressionLateralGapLimit
     * [For features eLKA Road Edge and LKA] Maximum lateral gap between ego vehicle and object for oncoming object suppression. Default 1.5.
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 20
     */
    float lssOncomingObjectSuppressionLateralGapLimit;
    /** LssObjectSuppressionNarrowRoadLimit
     * [For features eLKA Road Edge and LKA] Maximum road width for it to be considered narrow, for object suppression. Default 5.5.
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 20
     */
    float lssObjectSuppressionNarrowRoadLimit;
} SystemCore_CollisionAvoidance_LSSTunableParameters;

typedef struct _SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw {
    /** Offset
     * Offset applied to the baseline
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t offset;
    /** Correction
     * Down correction applied to the baseline as a factor of the velocity
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t correction;
} SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw;

typedef struct _SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection {
    /** Offset
     * Offset applied to the baseline
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float offset;
    /** Correction
     * Down correction applied to the baseline as a factor of the velocity
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float correction;
} SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection;

typedef struct _SystemCore_CollisionAvoidance_LongitudinalTaTunableParameters_Raw {
    qpb_size_t brakeDelayEstimate_count;
    /** BrakeDelayEstimate
     * Delay values in lookup table for brake delay calculation
     * Unit: s
     * Scale: 0.01
     * Min: 0
     * Max: 1.5
     */
    uint8_t brakeDelayEstimate[10];
    /** LongitudinalMarginWhenAebActive
     * Longitudinal safety margin when AEB is active
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 2
     */
    uint8_t longitudinalMarginWhenAebActive;
} SystemCore_CollisionAvoidance_LongitudinalTaTunableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_LongitudinalTaTunableParameters {
    qpb_size_t brakeDelayEstimate_count;
    /** BrakeDelayEstimate
     * Delay values in lookup table for brake delay calculation
     * Unit: s
     * Resolution: 0.01
     * Min: 0
     * Max: 1.5
     */
    float brakeDelayEstimate[10];
    /** LongitudinalMarginWhenAebActive
     * Longitudinal safety margin when AEB is active
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 2
     */
    float longitudinalMarginWhenAebActive;
} SystemCore_CollisionAvoidance_LongitudinalTaTunableParameters;

typedef struct _SystemCore_CollisionAvoidance_LssFeatureInput_Raw {
    /** Enable
     * Determines if function is enabled
     */
    bool enable;
    /** Suppress
     * Suppress function on the specified side(s)
     */
    SystemCore_CollisionAvoidance_LssSideStatus suppress;
    /** Abort
     * Abort function on the specified side(s)
     */
    SystemCore_CollisionAvoidance_LssSideStatus abort;
} SystemCore_CollisionAvoidance_LssFeatureInput_Raw;

#define SystemCore_CollisionAvoidance_LssFeatureInput SystemCore_CollisionAvoidance_LssFeatureInput_Raw

typedef struct _SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable_Raw {
    qpb_size_t values_count;
    /** Values
     * Predicted driver deceleration.
     * Unit: m/s2
     * Scale: 0.1
     * Min: -12
     * Max: 12.7
     */
    int8_t values[4];
    qpb_size_t breakpoints_count;
    /** Breakpoints
     * Ego velocity.
     * Unit: m/s
     * Scale: 0.1
     * Min: 0
     * Max: 40
     */
    uint16_t breakpoints[4];
} SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable_Raw;

typedef struct _SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable {
    qpb_size_t values_count;
    /** Values
     * Predicted driver deceleration.
     * Unit: m/s2
     * Resolution: 0.1
     * Min: -12
     * Max: 12.7
     */
    float values[4];
    qpb_size_t breakpoints_count;
    /** Breakpoints
     * Ego velocity.
     * Unit: m/s
     * Resolution: 0.1
     * Min: 0
     * Max: 40
     */
    float breakpoints[4];
} SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable;

typedef struct _SystemCore_CollisionAvoidance_ReactionTimeLookupTable_Raw {
    qpb_size_t values_count;
    /** Values
     * Base reaction time.
     * Unit: s
     * Scale: 0.01
     * Min: 2
     * Max: 2.55
     */
    uint8_t values[4];
    qpb_size_t breakpoints_count;
    /** Breakpoints
     * Ego velocity.
     * Unit: m/s
     * Scale: 0.1
     * Min: 0
     * Max: 40
     */
    uint16_t breakpoints[4];
} SystemCore_CollisionAvoidance_ReactionTimeLookupTable_Raw;

typedef struct _SystemCore_CollisionAvoidance_ReactionTimeLookupTable {
    qpb_size_t values_count;
    /** Values
     * Base reaction time.
     * Unit: s
     * Resolution: 0.01
     * Min: 2
     * Max: 2.55
     */
    float values[4];
    qpb_size_t breakpoints_count;
    /** Breakpoints
     * Ego velocity.
     * Unit: m/s
     * Resolution: 0.1
     * Min: 0
     * Max: 40
     */
    float breakpoints[4];
} SystemCore_CollisionAvoidance_ReactionTimeLookupTable;

typedef struct _SystemCore_CollisionAvoidance_StaticDistanceWarningParameters_Raw {
    /** EnableSdw
     * Request to activate static distance warning against forward object.
     */
    bool enableSdw;
} SystemCore_CollisionAvoidance_StaticDistanceWarningParameters_Raw;

#define SystemCore_CollisionAvoidance_StaticDistanceWarningParameters SystemCore_CollisionAvoidance_StaticDistanceWarningParameters_Raw

typedef struct _SystemCore_CollisionAvoidance_TargetSelectionParameters_Raw {
    qpb_size_t funnelBreakpoints_count;
    /** FunnelBreakpoints
     * Breakpoints for target selection funnel.
     * Unit: m
     * Scale: 0.01
     * Min: 0
     * Max: 250
     */
    uint16_t funnelBreakpoints[10];
    qpb_size_t innerFunnelWidths_count;
    /** InnerFunnelWidths
     * Target selection inner funnel width Target has to be inside this to be selected. Vehicle width in number, 0.01 represents 100%.
     * Scale: 0.01
     * Min: 0
     * Max: 25
     */
    uint16_t innerFunnelWidths[10];
    qpb_size_t outerFunnelWidths_count;
    /** OuterFunnelWidths
     * Target selection outer funnel width. Target has to be outside this to be deselected. Vehicle width in number, 0.01 represents 100%.
     * Scale: 0.01
     * Min: 0
     * Max: 25
     */
    uint16_t outerFunnelWidths[10];
    /** EnabledObjectTypes
     * Enable the given object types to be  selected as a target. Bitmask value described by enum CalongObjectBitmask.
     * Min: 0
     * Max: 255
     */
    uint8_t enabledObjectTypes;
    /** CutInTimeThreshold
     * Time threshold for object prediction within path.
     * Unit: s
     * Scale: 0.05
     * Min: 0
     * Max: 7
     */
    uint8_t cutInTimeThreshold;
    /** EnableCutIn
     * Request to activate object prediction within path.
     */
    bool enableCutIn;
} SystemCore_CollisionAvoidance_TargetSelectionParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_TargetSelectionParameters {
    qpb_size_t funnelBreakpoints_count;
    /** FunnelBreakpoints
     * Breakpoints for target selection funnel.
     * Unit: m
     * Resolution: 0.01
     * Min: 0
     * Max: 250
     */
    float funnelBreakpoints[10];
    qpb_size_t innerFunnelWidths_count;
    /** InnerFunnelWidths
     * Target selection inner funnel width Target has to be inside this to be selected. Vehicle width in number, 0.01 represents 100%.
     * Resolution: 0.01
     * Min: 0
     * Max: 25
     */
    float innerFunnelWidths[10];
    qpb_size_t outerFunnelWidths_count;
    /** OuterFunnelWidths
     * Target selection outer funnel width. Target has to be outside this to be deselected. Vehicle width in number, 0.01 represents 100%.
     * Resolution: 0.01
     * Min: 0
     * Max: 25
     */
    float outerFunnelWidths[10];
    /** EnabledObjectTypes
     * Enable the given object types to be  selected as a target. Bitmask value described by enum CalongObjectBitmask.
     * Min: 0
     * Max: 255
     */
    uint8_t enabledObjectTypes;
    /** CutInTimeThreshold
     * Time threshold for object prediction within path.
     * Unit: s
     * Resolution: 0.05
     * Min: 0
     * Max: 7
     */
    float cutInTimeThreshold;
    /** EnableCutIn
     * Request to activate object prediction within path.
     */
    bool enableCutIn;
} SystemCore_CollisionAvoidance_TargetSelectionParameters;

typedef struct _SystemCore_CollisionAvoidance_ThreatThresholdLookupTable_Raw {
    qpb_size_t values_count;
    /** Values
     * Threat thresholds for longitudinal deceleration.
     * Unit: m/s2
     * Scale: 0.1
     * Min: -20
     * Max: 3276.7
     */
    int16_t values[10];
    qpb_size_t breakpoints_count;
    /** Breakpoints
     * Target longitudinal position.
     * Unit: m
     * Scale: 0.1
     * Min: 0
     * Max: 50
     */
    uint16_t breakpoints[10];
} SystemCore_CollisionAvoidance_ThreatThresholdLookupTable_Raw;

typedef struct _SystemCore_CollisionAvoidance_ThreatThresholdLookupTable {
    qpb_size_t values_count;
    /** Values
     * Threat thresholds for longitudinal deceleration.
     * Unit: m/s2
     * Resolution: 0.1
     * Min: -20
     * Max: 3276.7
     */
    float values[10];
    qpb_size_t breakpoints_count;
    /** Breakpoints
     * Target longitudinal position.
     * Unit: m
     * Resolution: 0.1
     * Min: 0
     * Max: 50
     */
    float breakpoints[10];
} SystemCore_CollisionAvoidance_ThreatThresholdLookupTable;

typedef struct _SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw {
    /** Offset
     * Offset applied to the baseline
     * Unit: s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t offset;
    /** Correction
     * Down correction applied to the baseline as a factor of the velocity
     * Unit: s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t correction;
} SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw;

typedef struct _SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection {
    /** Offset
     * Offset applied to the baseline
     * Unit: s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float offset;
    /** Correction
     * Down correction applied to the baseline as a factor of the velocity
     * Unit: s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float correction;
} SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection;

typedef struct _SystemCore_CollisionAvoidance_VruDecelerationRequestParameters_Raw {
    /** ClosedLoopEnable
     * Closed loop braking enable
     */
    bool closedLoopEnable;
    /** AvoidanceDecelerationLag
     * Velocity correction to compensate for lag
     * Unit: m/s
     * Scale: 0.01
     * Min: 0
     * Max: 2
     */
    uint8_t avoidanceDecelerationLag;
    /** AvoidanceDistance
     * Target avoidance distance
     * Unit: m
     * Scale: 0.1
     * Min: 0.4
     * Max: 2
     */
    uint8_t avoidanceDistance;
} SystemCore_CollisionAvoidance_VruDecelerationRequestParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_VruDecelerationRequestParameters {
    /** ClosedLoopEnable
     * Closed loop braking enable
     */
    bool closedLoopEnable;
    /** AvoidanceDecelerationLag
     * Velocity correction to compensate for lag
     * Unit: m/s
     * Resolution: 0.01
     * Min: 0
     * Max: 2
     */
    float avoidanceDecelerationLag;
    /** AvoidanceDistance
     * Target avoidance distance
     * Unit: m
     * Resolution: 0.1
     * Min: 0.4
     * Max: 2
     */
    float avoidanceDistance;
} SystemCore_CollisionAvoidance_VruDecelerationRequestParameters;

typedef struct _SystemCore_CollisionAvoidance_LateralMarginModifications_Raw {
    qpb_size_t light_count;
    /** Light
     * Modification offsets due to light
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw light[3];
    qpb_size_t steeringWheelAngle_count;
    /** SteeringWheelAngle
     * Modification offsets due to steering wheel angle
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw steeringWheelAngle[3];
    qpb_size_t yawRate_count;
    /** YawRate
     * Modification offsets due to yaw rate
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw yawRate[3];
    qpb_size_t brakePedalPosition_count;
    /** BrakePedalPosition
     * Modification offsets due to brake pedal position
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw brakePedalPosition[3];
    qpb_size_t numberOfPedestrians_count;
    /** NumberOfPedestrians
     * Modification offsets due to number of pedestrians
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw numberOfPedestrians[3];
    qpb_size_t wiperStatus_count;
    /** WiperStatus
     * Modification offsets due to wiper status
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw wiperStatus[3];
    qpb_size_t pedestrianSize_count;
    /** PedestrianSize
     * Modification offsets due to pedestrian size
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection_Raw pedestrianSize[3];
} SystemCore_CollisionAvoidance_LateralMarginModifications_Raw;

typedef struct _SystemCore_CollisionAvoidance_LateralMarginModifications {
    qpb_size_t light_count;
    /** Light
     * Modification offsets due to light
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection light[3];
    qpb_size_t steeringWheelAngle_count;
    /** SteeringWheelAngle
     * Modification offsets due to steering wheel angle
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection steeringWheelAngle[3];
    qpb_size_t yawRate_count;
    /** YawRate
     * Modification offsets due to yaw rate
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection yawRate[3];
    qpb_size_t brakePedalPosition_count;
    /** BrakePedalPosition
     * Modification offsets due to brake pedal position
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection brakePedalPosition[3];
    qpb_size_t numberOfPedestrians_count;
    /** NumberOfPedestrians
     * Modification offsets due to number of pedestrians
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection numberOfPedestrians[3];
    qpb_size_t wiperStatus_count;
    /** WiperStatus
     * Modification offsets due to wiper status
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection wiperStatus[3];
    qpb_size_t pedestrianSize_count;
    /** PedestrianSize
     * Modification offsets due to pedestrian size
     */
    SystemCore_CollisionAvoidance_LateralMarginOffsetAndCorrection pedestrianSize[3];
} SystemCore_CollisionAvoidance_LateralMarginModifications;

typedef struct _SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityTableParameters_Raw {
    /** LowSensitivity
     * Low sensitivity table parameter for CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable_Raw lowSensitivity;
    /** NormalSensitivity
     * Normal sensitivity table parameter for CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable_Raw normalSensitivity;
    /** HighSensitivity
     * High sensitivity table parameter for CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable_Raw highSensitivity;
} SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityTableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityTableParameters {
    /** LowSensitivity
     * Low sensitivity table parameter for CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable lowSensitivity;
    /** NormalSensitivity
     * Normal sensitivity table parameter for CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable normalSensitivity;
    /** HighSensitivity
     * High sensitivity table parameter for CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityLookupTable highSensitivity;
} SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityTableParameters;

typedef struct _SystemCore_CollisionAvoidance_ReactionTimeLookupTableParameters_Raw {
    /** LowSensitivity
     * Table parameter for low sensitivity driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTable_Raw lowSensitivity;
    /** NormalSensitivity
     * Table parameter for normal sensitivity driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTable_Raw normalSensitivity;
    /** HighSensitivity
     * Table parameter for high sensitivity driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTable_Raw highSensitivity;
} SystemCore_CollisionAvoidance_ReactionTimeLookupTableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_ReactionTimeLookupTableParameters {
    /** LowSensitivity
     * Table parameter for low sensitivity driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTable lowSensitivity;
    /** NormalSensitivity
     * Table parameter for normal sensitivity driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTable normalSensitivity;
    /** HighSensitivity
     * Table parameter for high sensitivity driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTable highSensitivity;
} SystemCore_CollisionAvoidance_ReactionTimeLookupTableParameters;

typedef struct _SystemCore_CollisionAvoidance_ThreatThresholdTableParameters_Raw {
    /** LowThreatThreshold
     * Low threat thresholds in full-brake and pre-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdLookupTable_Raw lowThreatThreshold;
    /** HighThreatThreshold
     * High threat thresholds in full-brake and pre-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdLookupTable_Raw highThreatThreshold;
} SystemCore_CollisionAvoidance_ThreatThresholdTableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_ThreatThresholdTableParameters {
    /** LowThreatThreshold
     * Low threat thresholds in full-brake and pre-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdLookupTable lowThreatThreshold;
    /** HighThreatThreshold
     * High threat thresholds in full-brake and pre-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdLookupTable highThreatThreshold;
} SystemCore_CollisionAvoidance_ThreatThresholdTableParameters;

typedef struct _SystemCore_CollisionAvoidance_TimeToCollisionModifications_Raw {
    qpb_size_t light_count;
    /** Light
     * Modification offsets due to light
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw light[3];
    qpb_size_t steeringWheelAngle_count;
    /** SteeringWheelAngle
     * Modification offsets due to steering wheel angle
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw steeringWheelAngle[3];
    qpb_size_t yawRate_count;
    /** YawRate
     * Modification offsets due to yaw rate
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw yawRate[3];
    qpb_size_t brakePedalPosition_count;
    /** BrakePedalPosition
     * Modification offsets due to brake pedal position
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw brakePedalPosition[3];
    qpb_size_t numberOfPedestrians_count;
    /** NumberOfPedestrians
     * Modification offsets due to number of pedestrians
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw numberOfPedestrians[3];
    qpb_size_t wiperStatus_count;
    /** WiperStatus
     * Modification offsets due to wiper status
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw wiperStatus[3];
    qpb_size_t pedestrianSize_count;
    /** PedestrianSize
     * Modification offsets due to pedestrian size
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection_Raw pedestrianSize[3];
} SystemCore_CollisionAvoidance_TimeToCollisionModifications_Raw;

typedef struct _SystemCore_CollisionAvoidance_TimeToCollisionModifications {
    qpb_size_t light_count;
    /** Light
     * Modification offsets due to light
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection light[3];
    qpb_size_t steeringWheelAngle_count;
    /** SteeringWheelAngle
     * Modification offsets due to steering wheel angle
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection steeringWheelAngle[3];
    qpb_size_t yawRate_count;
    /** YawRate
     * Modification offsets due to yaw rate
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection yawRate[3];
    qpb_size_t brakePedalPosition_count;
    /** BrakePedalPosition
     * Modification offsets due to brake pedal position
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection brakePedalPosition[3];
    qpb_size_t numberOfPedestrians_count;
    /** NumberOfPedestrians
     * Modification offsets due to number of pedestrians
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection numberOfPedestrians[3];
    qpb_size_t wiperStatus_count;
    /** WiperStatus
     * Modification offsets due to wiper status
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection wiperStatus[3];
    qpb_size_t pedestrianSize_count;
    /** PedestrianSize
     * Modification offsets due to pedestrian size
     */
    SystemCore_CollisionAvoidance_TimeToCollisionOffsetAndCorrection pedestrianSize[3];
} SystemCore_CollisionAvoidance_TimeToCollisionModifications;

typedef struct _SystemCore_CollisionAvoidance_CollisionWarning_Raw {
    /** PredictedDeceleration
     * CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityTableParameters_Raw predictedDeceleration;
    /** ReactionTime
     * CW driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTableParameters_Raw reactionTime;
    /** DisableAdjustments
     * Parameter for disabling reaction time component.
     */
    bool disableAdjustments;
} SystemCore_CollisionAvoidance_CollisionWarning_Raw;

typedef struct _SystemCore_CollisionAvoidance_CollisionWarning {
    /** PredictedDeceleration
     * CW predicted driver deceleration.
     */
    SystemCore_CollisionAvoidance_PredictedDecelerationSensitivityTableParameters predictedDeceleration;
    /** ReactionTime
     * CW driver reaction time.
     */
    SystemCore_CollisionAvoidance_ReactionTimeLookupTableParameters reactionTime;
    /** DisableAdjustments
     * Parameter for disabling reaction time component.
     */
    bool disableAdjustments;
} SystemCore_CollisionAvoidance_CollisionWarning;

typedef struct _SystemCore_CollisionAvoidance_FullBrakeParameters_Raw {
    /** NegativeAccelerationMaximum
     * Maximum negative acceleration that can be requested for full brake
     * Unit: m/s²
     * Scale: 0.1
     * Min: -12
     * Max: 0
     */
    int8_t negativeAccelerationMaximum;
    /** NominalAccelerationFactor
     * Weight factor for the current nominal acceleration
     * Scale: 0.01
     * Min: -1
     * Max: 1
     */
    int8_t nominalAccelerationFactor;
    /** PreviousAccelerationRequestFactor
     * Weight factor for the previous requested acceleration
     * Scale: 0.01
     * Min: -1
     * Max: 1
     */
    int8_t previousAccelerationRequestFactor;
    /** PreviousNominalRequestFactor
     * Weight factor for the previous nominal requested acceleration
     * Scale: 0.01
     * Min: -1
     * Max: 1
     */
    int8_t previousNominalRequestFactor;
    /** ThreatThreshold
     * Threat thresholds in full-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdTableParameters_Raw threatThreshold;
} SystemCore_CollisionAvoidance_FullBrakeParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_FullBrakeParameters {
    /** NegativeAccelerationMaximum
     * Maximum negative acceleration that can be requested for full brake
     * Unit: m/s²
     * Resolution: 0.1
     * Min: -12
     * Max: 0
     */
    float negativeAccelerationMaximum;
    /** NominalAccelerationFactor
     * Weight factor for the current nominal acceleration
     * Resolution: 0.01
     * Min: -1
     * Max: 1
     */
    float nominalAccelerationFactor;
    /** PreviousAccelerationRequestFactor
     * Weight factor for the previous requested acceleration
     * Resolution: 0.01
     * Min: -1
     * Max: 1
     */
    float previousAccelerationRequestFactor;
    /** PreviousNominalRequestFactor
     * Weight factor for the previous nominal requested acceleration
     * Resolution: 0.01
     * Min: -1
     * Max: 1
     */
    float previousNominalRequestFactor;
    /** ThreatThreshold
     * Threat thresholds in full-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdTableParameters threatThreshold;
} SystemCore_CollisionAvoidance_FullBrakeParameters;

typedef struct _SystemCore_CollisionAvoidance_LateralMarginCalibrationTable_Raw {
    /** Min
     * Minimum value of the lateral margin for the activation of the function
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t min;
    /** Max
     * Maximum value of the lateral margin for the activation of the function
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t max;
    qpb_size_t baseline_count;
    /** Baseline
     * Lateral margin baseline
     * Unit: m
     * Scale: 0.01
     * Min: -10
     * Max: 10
     */
    int16_t baseline[6];
    /** Modifications
     * Offsets and down corrections according to multiple modification conditions
     */
    SystemCore_CollisionAvoidance_LateralMarginModifications_Raw modifications;
} SystemCore_CollisionAvoidance_LateralMarginCalibrationTable_Raw;

typedef struct _SystemCore_CollisionAvoidance_LateralMarginCalibrationTable {
    /** Min
     * Minimum value of the lateral margin for the activation of the function
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float min;
    /** Max
     * Maximum value of the lateral margin for the activation of the function
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float max;
    qpb_size_t baseline_count;
    /** Baseline
     * Lateral margin baseline
     * Unit: m
     * Resolution: 0.01
     * Min: -10
     * Max: 10
     */
    float baseline[6];
    /** Modifications
     * Offsets and down corrections according to multiple modification conditions
     */
    SystemCore_CollisionAvoidance_LateralMarginModifications modifications;
} SystemCore_CollisionAvoidance_LateralMarginCalibrationTable;

typedef struct _SystemCore_CollisionAvoidance_PreBrakeParameters_Raw {
    /** NegativeAccelerationMaximum
     * Maximum negative acceleration that can be requested for pre brake
     * Unit: m/s²
     * Scale: 0.1
     * Min: -12
     * Max: 0
     */
    int8_t negativeAccelerationMaximum;
    /** NominalRequestFactor
     * Scaling factor for AEB pre brake nominal deceleration request
     * Scale: 0.01
     * Min: 0
     * Max: 1
     */
    uint8_t nominalRequestFactor;
    /** NegativeJerkMinimum
     * Most negative jerk allowed when AEB is in pre brake
     * Unit: m/s³
     * Scale: 0.01
     * Min: -30
     * Max: 0
     */
    int16_t negativeJerkMinimum;
    /** ThreatThreshold
     * Threat thresholds in pre-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdTableParameters_Raw threatThreshold;
} SystemCore_CollisionAvoidance_PreBrakeParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_PreBrakeParameters {
    /** NegativeAccelerationMaximum
     * Maximum negative acceleration that can be requested for pre brake
     * Unit: m/s²
     * Resolution: 0.1
     * Min: -12
     * Max: 0
     */
    float negativeAccelerationMaximum;
    /** NominalRequestFactor
     * Scaling factor for AEB pre brake nominal deceleration request
     * Resolution: 0.01
     * Min: 0
     * Max: 1
     */
    float nominalRequestFactor;
    /** NegativeJerkMinimum
     * Most negative jerk allowed when AEB is in pre brake
     * Unit: m/s³
     * Resolution: 0.01
     * Min: -30
     * Max: 0
     */
    float negativeJerkMinimum;
    /** ThreatThreshold
     * Threat thresholds in pre-brake.
     */
    SystemCore_CollisionAvoidance_ThreatThresholdTableParameters threatThreshold;
} SystemCore_CollisionAvoidance_PreBrakeParameters;

typedef struct _SystemCore_CollisionAvoidance_TimeToCollisionCalibrationTable_Raw {
    /** Min
     * Minimum value of the TTC for the activation of the function
     * Unit: s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t min;
    /** Max
     * Maximum value of the TCC for the activation of the function
     * Unit: s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t max;
    qpb_size_t baseline_count;
    /** Baseline
     * TTC baseline
     * Unit: s
     * Scale: 0.1
     * Min: -100
     * Max: 100
     */
    int16_t baseline[6];
    /** Modifications
     * Offsets and down corrections according to multiple modification conditions
     */
    SystemCore_CollisionAvoidance_TimeToCollisionModifications_Raw modifications;
} SystemCore_CollisionAvoidance_TimeToCollisionCalibrationTable_Raw;

typedef struct _SystemCore_CollisionAvoidance_TimeToCollisionCalibrationTable {
    /** Min
     * Minimum value of the TTC for the activation of the function
     * Unit: s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float min;
    /** Max
     * Maximum value of the TCC for the activation of the function
     * Unit: s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float max;
    qpb_size_t baseline_count;
    /** Baseline
     * TTC baseline
     * Unit: s
     * Resolution: 0.1
     * Min: -100
     * Max: 100
     */
    float baseline[6];
    /** Modifications
     * Offsets and down corrections according to multiple modification conditions
     */
    SystemCore_CollisionAvoidance_TimeToCollisionModifications modifications;
} SystemCore_CollisionAvoidance_TimeToCollisionCalibrationTable;

typedef struct _SystemCore_CollisionAvoidance_TunableParameters_Raw {
    /** FullBrake
     * Collection of tunable parameters for full brake AEB
     */
    SystemCore_CollisionAvoidance_FullBrakeParameters_Raw fullBrake;
    /** PreBrake
     * Collection of tunable parameters for pre brake AEB
     */
    SystemCore_CollisionAvoidance_PreBrakeParameters_Raw preBrake;
    /** AebTiming
     * Collection of tunable parameters for autonomous emergency braking timing
     */
    SystemCore_CollisionAvoidance_AebTimingParameters_Raw aebTiming;
    /** AebDeactivation
     * Collection of tunable parameters for autonomous emergency braking deactivation conditions
     */
    SystemCore_CollisionAvoidance_AebDeactivationParameters_Raw aebDeactivation;
    /** Ema
     * Collection of tunable parameters for evasive maneuver assist
     */
    SystemCore_CollisionAvoidance_EmaParameters_Raw ema;
    /** CaLongActivation
     * Collection of tunable parameters for longitudinal collision avoidance
     */
    SystemCore_CollisionAvoidance_CaLongActivationParameters_Raw caLongActivation;
    /** LongitudinalTaTunable
     * Collection of tunable parameters for longitudinal threat assessment
     */
    SystemCore_CollisionAvoidance_LongitudinalTaTunableParameters_Raw longitudinalTaTunable;
    /** AebScenarioActivation
     * Collection of tunable parameters for activating AEB scenarios
     */
    SystemCore_CollisionAvoidance_AebScenarioActivationParameters_Raw aebScenarioActivation;
    /** LssDevelopmentOverrideParameters
     * Collection of development override parameters for LSS
     */
    SystemCore_CollisionAvoidance_LSSDevelopmentOverrideParameters_Raw lssDevelopmentOverrideParameters;
    /** LssTunableParameters
     * Collection of tunable parameters for LSS
     */
    SystemCore_CollisionAvoidance_LSSTunableParameters_Raw lssTunableParameters;
    /** CollisionWarning
     * Collection of tunable parameters for collision warning
     */
    SystemCore_CollisionAvoidance_CollisionWarning_Raw collisionWarning;
} SystemCore_CollisionAvoidance_TunableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_TunableParameters {
    /** FullBrake
     * Collection of tunable parameters for full brake AEB
     */
    SystemCore_CollisionAvoidance_FullBrakeParameters fullBrake;
    /** PreBrake
     * Collection of tunable parameters for pre brake AEB
     */
    SystemCore_CollisionAvoidance_PreBrakeParameters preBrake;
    /** AebTiming
     * Collection of tunable parameters for autonomous emergency braking timing
     */
    SystemCore_CollisionAvoidance_AebTimingParameters aebTiming;
    /** AebDeactivation
     * Collection of tunable parameters for autonomous emergency braking deactivation conditions
     */
    SystemCore_CollisionAvoidance_AebDeactivationParameters aebDeactivation;
    /** Ema
     * Collection of tunable parameters for evasive maneuver assist
     */
    SystemCore_CollisionAvoidance_EmaParameters ema;
    /** CaLongActivation
     * Collection of tunable parameters for longitudinal collision avoidance
     */
    SystemCore_CollisionAvoidance_CaLongActivationParameters caLongActivation;
    /** LongitudinalTaTunable
     * Collection of tunable parameters for longitudinal threat assessment
     */
    SystemCore_CollisionAvoidance_LongitudinalTaTunableParameters longitudinalTaTunable;
    /** AebScenarioActivation
     * Collection of tunable parameters for activating AEB scenarios
     */
    SystemCore_CollisionAvoidance_AebScenarioActivationParameters aebScenarioActivation;
    /** LssDevelopmentOverrideParameters
     * Collection of development override parameters for LSS
     */
    SystemCore_CollisionAvoidance_LSSDevelopmentOverrideParameters lssDevelopmentOverrideParameters;
    /** LssTunableParameters
     * Collection of tunable parameters for LSS
     */
    SystemCore_CollisionAvoidance_LSSTunableParameters lssTunableParameters;
    /** CollisionWarning
     * Collection of tunable parameters for collision warning
     */
    SystemCore_CollisionAvoidance_CollisionWarning collisionWarning;
} SystemCore_CollisionAvoidance_TunableParameters;

typedef struct _SystemCore_CollisionAvoidance_ZoneCalibration_Raw {
    /** TimeToCollision
     * Zone calibration according to TTC, in seconds
     */
    SystemCore_CollisionAvoidance_TimeToCollisionCalibrationTable_Raw timeToCollision;
    /** LateralMargin
     * Zone calibration according to lateral margin, in centimeters
     */
    SystemCore_CollisionAvoidance_LateralMarginCalibrationTable_Raw lateralMargin;
} SystemCore_CollisionAvoidance_ZoneCalibration_Raw;

typedef struct _SystemCore_CollisionAvoidance_ZoneCalibration {
    /** TimeToCollision
     * Zone calibration according to TTC, in seconds
     */
    SystemCore_CollisionAvoidance_TimeToCollisionCalibrationTable timeToCollision;
    /** LateralMargin
     * Zone calibration according to lateral margin, in centimeters
     */
    SystemCore_CollisionAvoidance_LateralMarginCalibrationTable lateralMargin;
} SystemCore_CollisionAvoidance_ZoneCalibration;

typedef struct _SystemCore_CollisionAvoidance_CollisionAvoidanceSettings_Raw {
    /** AebSensitivity
     * Sensitivity level for Autonomous Emergency Braking
     */
    SystemCore_CollisionAvoidance_SensitivitySettings aebSensitivity;
    /** EnableAeb
     * On/off for Autonomous Emergency Braking
     */
    SystemCore_CollisionAvoidance_Switch enableAeb;
    /** EnableEma
     * On/off for Evasive Maneuver Assist
     */
    SystemCore_CollisionAvoidance_Switch enableEma;
    /** EnableOsp
     * On/off for Occupant Safety Protection
     */
    SystemCore_CollisionAvoidance_Switch enableOsp;
    /** EnableCw
     * On/off for Collision Warning
     */
    SystemCore_CollisionAvoidance_Switch enableCw;
    /** TunableParameters
     * Collection of all FCA tunable parameters
     */
    SystemCore_CollisionAvoidance_TunableParameters_Raw tunableParameters;
    /** EnableDbs
     * On/off for Dynamic Brake Support
     */
    SystemCore_CollisionAvoidance_Switch enableDbs;
    /** Lka
     * Feature input for LKA function
     */
    SystemCore_CollisionAvoidance_LssFeatureInput_Raw lka;
    /** Ldw
     * Feature input for LDW function
     */
    SystemCore_CollisionAvoidance_LssFeatureInput_Raw ldw;
    /** ElkaRoadEdge
     * Feature input for eLKA road edge function
     */
    SystemCore_CollisionAvoidance_LssFeatureInput_Raw elkaRoadEdge;
    /** ElkaFrontObjects
     * Feature input for eLKA front objects function (e.g. oncoming)
     */
    SystemCore_CollisionAvoidance_LssFeatureInput_Raw elkaFrontObjects;
    /** ElkaRearObjects
     * Feature input for eLKA rear objects function (e.g. Blind Spot)
     */
    SystemCore_CollisionAvoidance_LssFeatureInput_Raw elkaRearObjects;
} SystemCore_CollisionAvoidance_CollisionAvoidanceSettings_Raw;

typedef struct _SystemCore_CollisionAvoidance_CollisionAvoidanceSettings {
    /** AebSensitivity
     * Sensitivity level for Autonomous Emergency Braking
     */
    SystemCore_CollisionAvoidance_SensitivitySettings aebSensitivity;
    /** EnableAeb
     * On/off for Autonomous Emergency Braking
     */
    SystemCore_CollisionAvoidance_Switch enableAeb;
    /** EnableEma
     * On/off for Evasive Maneuver Assist
     */
    SystemCore_CollisionAvoidance_Switch enableEma;
    /** EnableOsp
     * On/off for Occupant Safety Protection
     */
    SystemCore_CollisionAvoidance_Switch enableOsp;
    /** EnableCw
     * On/off for Collision Warning
     */
    SystemCore_CollisionAvoidance_Switch enableCw;
    /** TunableParameters
     * Collection of all FCA tunable parameters
     */
    SystemCore_CollisionAvoidance_TunableParameters tunableParameters;
    /** EnableDbs
     * On/off for Dynamic Brake Support
     */
    SystemCore_CollisionAvoidance_Switch enableDbs;
    /** Lka
     * Feature input for LKA function
     */
    SystemCore_CollisionAvoidance_LssFeatureInput lka;
    /** Ldw
     * Feature input for LDW function
     */
    SystemCore_CollisionAvoidance_LssFeatureInput ldw;
    /** ElkaRoadEdge
     * Feature input for eLKA road edge function
     */
    SystemCore_CollisionAvoidance_LssFeatureInput elkaRoadEdge;
    /** ElkaFrontObjects
     * Feature input for eLKA front objects function (e.g. oncoming)
     */
    SystemCore_CollisionAvoidance_LssFeatureInput elkaFrontObjects;
    /** ElkaRearObjects
     * Feature input for eLKA rear objects function (e.g. Blind Spot)
     */
    SystemCore_CollisionAvoidance_LssFeatureInput elkaRearObjects;
} SystemCore_CollisionAvoidance_CollisionAvoidanceSettings;

typedef struct _SystemCore_CollisionAvoidance_VruZoneCalibrationTableParameters_Raw {
    /** Cib
     * Zone calibration for CIB functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration_Raw cib;
    /** Prefill
     * Zone calibration for prefill functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration_Raw prefill;
    /** Fca
     * Zone calibration for FCA functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration_Raw fca;
    /** Notification
     * Zone calibration for notification functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration_Raw notification;
    qpb_size_t speedNodes_count;
    /** SpeedNodes
     * Values for the speed nodes of the TTC and lateral margin baselines
     * Unit: m/s
     * Scale: 0.1
     * Min: 0
     * Max: 100
     */
    uint16_t speedNodes[6];
} SystemCore_CollisionAvoidance_VruZoneCalibrationTableParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_VruZoneCalibrationTableParameters {
    /** Cib
     * Zone calibration for CIB functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration cib;
    /** Prefill
     * Zone calibration for prefill functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration prefill;
    /** Fca
     * Zone calibration for FCA functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration fca;
    /** Notification
     * Zone calibration for notification functionality
     */
    SystemCore_CollisionAvoidance_ZoneCalibration notification;
    qpb_size_t speedNodes_count;
    /** SpeedNodes
     * Values for the speed nodes of the TTC and lateral margin baselines
     * Unit: m/s
     * Resolution: 0.1
     * Min: 0
     * Max: 100
     */
    float speedNodes[6];
} SystemCore_CollisionAvoidance_VruZoneCalibrationTableParameters;

typedef struct _SystemCore_CollisionAvoidance_VruCollisionAvoidanceParameters_Raw {
    /** ZoneCalibration
     * Tunable parameters for the zone calibration table
     */
    SystemCore_CollisionAvoidance_VruZoneCalibrationTableParameters_Raw zoneCalibration;
    /** DecelerationRequest
     * Tunable parameters for the deceleration request
     */
    SystemCore_CollisionAvoidance_VruDecelerationRequestParameters_Raw decelerationRequest;
} SystemCore_CollisionAvoidance_VruCollisionAvoidanceParameters_Raw;

typedef struct _SystemCore_CollisionAvoidance_VruCollisionAvoidanceParameters {
    /** ZoneCalibration
     * Tunable parameters for the zone calibration table
     */
    SystemCore_CollisionAvoidance_VruZoneCalibrationTableParameters zoneCalibration;
    /** DecelerationRequest
     * Tunable parameters for the deceleration request
     */
    SystemCore_CollisionAvoidance_VruDecelerationRequestParameters decelerationRequest;
} SystemCore_CollisionAvoidance_VruCollisionAvoidanceParameters;

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* SYSTEMCORE_COLLISIONAVOIDANCE_SETTINGSINPUT_TYPES_INCLUDED */
