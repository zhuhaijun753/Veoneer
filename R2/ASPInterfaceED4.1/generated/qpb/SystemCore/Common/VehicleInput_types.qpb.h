/* Automatically generated qpb types header */
/* SPP version 2.0.0 */
/* Generated by Quick Protocol Buffers - 2 */

#ifndef SYSTEMCORE_COMMON_VEHICLEINPUT_TYPES_INCLUDED
#define SYSTEMCORE_COMMON_VEHICLEINPUT_TYPES_INCLUDED

#include "Tools/QuickProtobuf/qpb_types.h"


#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SystemCore_Common_AngleControlLimitState {
    SystemCore_Common_AngleControlLimitState_NotLimited = 0,
    SystemCore_Common_AngleControlLimitState_TorqueLimitUpperReached = 1,
    SystemCore_Common_AngleControlLimitState_TorqueLimitLowerReached = 2,
    SystemCore_Common_AngleControlLimitState_RateLimitReached = 3
} SystemCore_Common_AngleControlLimitState;
#define SystemCore_Common_AngleControlLimitState_MIN SystemCore_Common_AngleControlLimitState_NotLimited
#define SystemCore_Common_AngleControlLimitState_MAX SystemCore_Common_AngleControlLimitState_RateLimitReached
#define SystemCore_Common_AngleControlLimitState_ARRAYSIZE ((SystemCore_Common_AngleControlLimitState)(SystemCore_Common_AngleControlLimitState_RateLimitReached+1))

typedef enum _SystemCore_Common_BrakePedalState {
    SystemCore_Common_BrakePedalState_Undefined = 0,
    SystemCore_Common_BrakePedalState_NotPressed = 1,
    SystemCore_Common_BrakePedalState_Pressed = 2
} SystemCore_Common_BrakePedalState;
#define SystemCore_Common_BrakePedalState_MIN SystemCore_Common_BrakePedalState_Undefined
#define SystemCore_Common_BrakePedalState_MAX SystemCore_Common_BrakePedalState_Pressed
#define SystemCore_Common_BrakePedalState_ARRAYSIZE ((SystemCore_Common_BrakePedalState)(SystemCore_Common_BrakePedalState_Pressed+1))

typedef enum _SystemCore_Common_TurnIndicatorState {
    SystemCore_Common_TurnIndicatorState_Idle = 0,
    SystemCore_Common_TurnIndicatorState_Left = 1,
    SystemCore_Common_TurnIndicatorState_Right = 2
} SystemCore_Common_TurnIndicatorState;
#define SystemCore_Common_TurnIndicatorState_MIN SystemCore_Common_TurnIndicatorState_Idle
#define SystemCore_Common_TurnIndicatorState_MAX SystemCore_Common_TurnIndicatorState_Right
#define SystemCore_Common_TurnIndicatorState_ARRAYSIZE ((SystemCore_Common_TurnIndicatorState)(SystemCore_Common_TurnIndicatorState_Right+1))

/* Struct definitions */
typedef struct _SystemCore_Common_AcceleratorPedal_Raw {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** PressedAmount
     * Percentage describing the state of the accelerator pedal
     * Unit: %
     * Min: 0
     * Max: 100
     */
    uint8_t pressedAmount;
} SystemCore_Common_AcceleratorPedal_Raw;

#define SystemCore_Common_AcceleratorPedal SystemCore_Common_AcceleratorPedal_Raw

typedef struct _SystemCore_Common_BrakeSystem_Raw {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** BrakePedalState
     * State of the brake pedal
     */
    SystemCore_Common_BrakePedalState brakePedalState;
    /** DecelerationRequest
     * Requested deceleration by driver, positive since it is deceleration and not acceleration
     * Unit: m/s²
     * Scale: 0.01
     * Min: 0
     * Max: 25
     */
    uint16_t decelerationRequest;
} SystemCore_Common_BrakeSystem_Raw;

typedef struct _SystemCore_Common_BrakeSystem {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** BrakePedalState
     * State of the brake pedal
     */
    SystemCore_Common_BrakePedalState brakePedalState;
    /** DecelerationRequest
     * Requested deceleration by driver, positive since it is deceleration and not acceleration
     * Unit: m/s²
     * Resolution: 0.01
     * Min: 0
     * Max: 25
     */
    float decelerationRequest;
} SystemCore_Common_BrakeSystem;

typedef struct _SystemCore_Common_FrontWheel_Raw {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** Angle
     * The front wheel angle of the car
     * Unit: rad
     * Scale: 0.0001
     * Min: -1.5
     * Max: 1.5
     */
    int32_t angle;
    /** AngleRate
     * The front wheel angle rate of the car
     * Unit: rad/s
     * Scale: 0.0001
     * Min: -1.5
     * Max: 1.5
     */
    int32_t angleRate;
} SystemCore_Common_FrontWheel_Raw;

typedef struct _SystemCore_Common_FrontWheel {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** Angle
     * The front wheel angle of the car
     * Unit: rad
     * Resolution: 0.0001
     * Min: -1.5
     * Max: 1.5
     */
    float angle;
    /** AngleRate
     * The front wheel angle rate of the car
     * Unit: rad/s
     * Resolution: 0.0001
     * Min: -1.5
     * Max: 1.5
     */
    float angleRate;
} SystemCore_Common_FrontWheel;

typedef struct _SystemCore_Common_SafePositionsFrontSeats_Raw {
    /** Left
     * Indicates that the person in the left front seat is in a safe position
     */
    bool left;
    /** Right
     * Indicates that the person in the right front seat is in a safe position
     */
    bool right;
} SystemCore_Common_SafePositionsFrontSeats_Raw;

#define SystemCore_Common_SafePositionsFrontSeats SystemCore_Common_SafePositionsFrontSeats_Raw

typedef struct _SystemCore_Common_SteeringWheel_Raw {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** Limited
     * If the function output on the steering is limited
     */
    SystemCore_Common_AngleControlLimitState limited;
    /** Torque
     * The steering wheel torque performed by the driver
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t torque;
    /** FunctionAppliedTorque
     * The steering wheel torque performed by the function
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t functionAppliedTorque;
    /** TotalAppliedTorque
     * The total torque performed by electric power assisted steering, defined at the steering wheel.
     * Unit: Nm
     * Scale: 0.01
     * Min: -30
     * Max: 30
     */
    int32_t totalAppliedTorque;
} SystemCore_Common_SteeringWheel_Raw;

typedef struct _SystemCore_Common_SteeringWheel {
    /** Valid
     * Indicates that the information contained in this message can be used
     */
    bool valid;
    /** Limited
     * If the function output on the steering is limited
     */
    SystemCore_Common_AngleControlLimitState limited;
    /** Torque
     * The steering wheel torque performed by the driver
     * Unit: Nm
     * Resolution: 0.01
     * Min: -30
     * Max: 30
     */
    float torque;
    /** FunctionAppliedTorque
     * The steering wheel torque performed by the function
     * Unit: Nm
     * Resolution: 0.01
     * Min: -30
     * Max: 30
     */
    float functionAppliedTorque;
    /** TotalAppliedTorque
     * The total torque performed by electric power assisted steering, defined at the steering wheel.
     * Unit: Nm
     * Resolution: 0.01
     * Min: -30
     * Max: 30
     */
    float totalAppliedTorque;
} SystemCore_Common_SteeringWheel;

typedef struct _SystemCore_Common_VehicleInput_Raw {
    /** AcceleratorPedal
     * Current accelerator pedal information
     */
    SystemCore_Common_AcceleratorPedal_Raw acceleratorPedal;
    /** BrakeSystem
     * Current brake system information
     */
    SystemCore_Common_BrakeSystem_Raw brakeSystem;
    /** SteeringWheel
     * Current steering wheel information
     */
    SystemCore_Common_SteeringWheel_Raw steeringWheel;
    /** FrontWheel
     * Current front wheel information
     */
    SystemCore_Common_FrontWheel_Raw frontWheel;
    /** TurnIndicator
     * Current turn indicator information
     */
    SystemCore_Common_TurnIndicatorState turnIndicator;
    /** DriverDoorOpen
     * Indicates that the driver door is open
     */
    bool driverDoorOpen;
    /** SafePositionsFrontSeats
     * Indicates safety status of driver and passenger seating position
     */
    SystemCore_Common_SafePositionsFrontSeats_Raw safePositionsFrontSeats;
} SystemCore_Common_VehicleInput_Raw;

typedef struct _SystemCore_Common_VehicleInput {
    /** AcceleratorPedal
     * Current accelerator pedal information
     */
    SystemCore_Common_AcceleratorPedal acceleratorPedal;
    /** BrakeSystem
     * Current brake system information
     */
    SystemCore_Common_BrakeSystem brakeSystem;
    /** SteeringWheel
     * Current steering wheel information
     */
    SystemCore_Common_SteeringWheel steeringWheel;
    /** FrontWheel
     * Current front wheel information
     */
    SystemCore_Common_FrontWheel frontWheel;
    /** TurnIndicator
     * Current turn indicator information
     */
    SystemCore_Common_TurnIndicatorState turnIndicator;
    /** DriverDoorOpen
     * Indicates that the driver door is open
     */
    bool driverDoorOpen;
    /** SafePositionsFrontSeats
     * Indicates safety status of driver and passenger seating position
     */
    SystemCore_Common_SafePositionsFrontSeats safePositionsFrontSeats;
} SystemCore_Common_VehicleInput;

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* SYSTEMCORE_COMMON_VEHICLEINPUT_TYPES_INCLUDED */
