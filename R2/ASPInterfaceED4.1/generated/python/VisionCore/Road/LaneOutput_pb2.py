# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: VisionCore/Road/LaneOutput.proto

from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from Tools.Extension import SystemOptions_pb2 as Tools_dot_Extension_dot_SystemOptions__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='VisionCore/Road/LaneOutput.proto',
  package='VisionCore.Road',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n VisionCore/Road/LaneOutput.proto\x12\x0fVisionCore.Road\x1a#Tools/Extension/SystemOptions.proto\"\xb3\x04\n\tLaneEvent\x12q\n\x02id\x18\x01 \x01(\rBe\x92\xb5\x18\x02\x08\x08\x92\xb5\x18[*YUnique for the lane event. The same Id can be reused after one output cycle. 0 means None\x12~\n\rlane_track_id\x18\x02 \x01(\rBg\x92\xb5\x18\x02\x08\x08\x92\xb5\x18]*[Identifier for the Lane_Track to which the lane event is connected. Related to LaneTrack.id\x12~\n\x08\x64istance\x18\x03 \x01(\rBl\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\x05\x32\x03\x30.1\x92\xb5\x18\x03\"\x01m\x92\xb5\x18\tI\x00\x00\x00\x00\x00\x00\x00\x00\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\x00Y@\x92\xb5\x18\x38*6Distance along the longitudinal axis to the lane event\x12U\n\nevent_type\x18\x04 \x01(\x0e\x32\x1e.VisionCore.Road.LaneEventTypeB!\x92\xb5\x18\x1d*\x1b\x44\x65scribes the type of event\x12\\\n\x04side\x18\x05 \x01(\x0e\x32\x1e.VisionCore.Road.LaneEventSideB.\x92\xb5\x18**(Side on which the lane event is detected\"\xaf\x06\n\x08\x43lothoid\x12\x9b\x01\n\x10lateral_distance\x18\x01 \x01(\x11\x42\x80\x01\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x03\"\x01m\x92\xb5\x18\tI\x00\x00\x00\x00\x00\x00$\xc0\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\x00$@\x92\xb5\x18K*ILateral distance to the inside of the lane marking [m] (AFAC)(default: 0)\x12g\n\x07heading\x18\x02 \x01(\x11\x42V\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\n2\x08\x30.000025\x92\xb5\x18\x0b\"\tatan(rad)\x92\xb5\x18/*-The heading coefficient of the clothoid model\x12o\n\tcurvature\x18\x03 \x01(\x11\x42\\\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\x0b\x32\t0.0000025\x92\xb5\x18\x05\"\x03\x31/m\x92\xb5\x18:*8Horizontal curvature for the start of the first clothoid\x12m\n\x0e\x63urvature_rate\x18\x04 \x01(\x11\x42U\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\n2\x08\x30.000001\x92\xb5\x18\x07\"\x05\x31/m\xc2\xb2\x92\xb5\x18\x32*0Horizontal curvature rate for the first clothoid\x12p\n\x13transition_distance\x18\x05 \x01(\rBS\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\xc0\x62@\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x03\"\x01m\x92\xb5\x18+*)Distance for which second clothoid starts\x12~\n\x1e\x63urvature_rate_second_clothoid\x18\x06 \x01(\x11\x42V\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\n2\x08\x30.000001\x92\xb5\x18\x07\"\x05\x31/m\xc2\xb2\x92\xb5\x18\x33*1Horizontal curvature rate for the second clothoid\x12J\n\x16second_clothoid_active\x18\x07 \x01(\x08\x42*\x92\xb5\x18&*$Indicates if second clothoid is used\"\x87\x04\n\x10\x43lothoidVariance\x12\x61\n\x19lateral_distance_variance\x18\x01 \x01(\x11\x42>\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x07\"\x05\x31/m\xc2\xb2\x92\xb5\x18\x1f*\x1dVariance for lateral distance\x12Y\n\x10heading_variance\x18\x02 \x01(\x11\x42?\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\n2\x08\x30.000025\x92\xb5\x18\r\"\x0b\x61tan(rad)\xc2\xb2\x92\xb5\x18\x16*\x14Variance for heading\x12X\n\x12\x63urvature_variance\x18\x03 \x01(\x11\x42<\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\x0b\x32\t0.0000025\x92\xb5\x18\x07\"\x05\x31/m\xc2\xb2\x92\xb5\x18\x18*\x16Variance for curvature\x12\x61\n\x17\x63urvature_rate_variance\x18\x04 \x01(\x11\x42@\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\n2\x08\x30.000001\x92\xb5\x18\x07\"\x05\x31/m^4\x92\xb5\x18\x1d*\x1bVariance for curvature rate\x12x\n\'curvature_rate_second_clothoid_variance\x18\x05 \x01(\x11\x42G\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\n2\x08\x30.000001\x92\xb5\x18\x07\"\x05\x31/m^4\x92\xb5\x18$*\"Variance for second curvature rate\"\xab\x11\n\tLaneTrack\x12M\n\x05valid\x18\x01 \x01(\x08\x42>\x92\xb5\x18:*8True means that LaneTrack describes a valid lane marking\x12G\n\x02id\x18\x02 \x01(\rB;\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\x31*/ID nr (default: 255 = SNA, propose change to 0)\x12y\n\x12\x64\x65tection_distance\x18\x03 \x01(\rB]\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\xc0\x62@\x92\xb5\x18\x05\x32\x03\x30.1\x92\xb5\x18\x03\"\x01m\x92\xb5\x18\x36*4Longitudinal distance for which the lane is detected\x12v\n\x0cmarking_type\x18\x04 \x01(\x0e\x32\x1c.VisionCore.Road.MarkingTypeBB\x92\xb5\x18>*<Marking type for the lane marking closest to the Ego Vehicle\x12w\n\x0emarking_length\x18\x05 \x01(\rB_\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\x06\x32\x04\x30.05\x92\xb5\x18\x03\"\x01m\x92\xb5\x18\x44*BLength of the lane marking, not applicable for continuous markings\x12\x7f\n\ngap_length\x18\x06 \x01(\rBk\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\x05\x32\x03\x30.1\x92\xb5\x18\x03\"\x01m\x92\xb5\x18Q*OLength of the gap between lane markings, not applicable for continuous markings\x12\x84\x01\n\x13second_marking_type\x18\x07 \x01(\x0e\x32\".VisionCore.Road.SecondMarkingTypeBC\x92\xb5\x18?*=Marking type for the second lane marking from the Ego Vehicle\x12y\n\x11marking_structure\x18\x08 \x01(\x0e\x32!.VisionCore.Road.MarkingStructureB;\x92\xb5\x18\x37*5Describes structure of the first detected lane marker\x12^\n\x0ftracking_status\x18\t \x01(\x0e\x32#.VisionCore.Road.LaneTrackingStatusB \x92\xb5\x18\x1c*\x1a\x44\x65scribes detection status\x12O\n\rmarking_width\x18\n \x01(\rB8\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x03\"\x01m\x92\xb5\x18\x1d*\x1bWidth of first lane marking\x12\x87\x01\n\x13total_marking_width\x18\x0b \x01(\rBj\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x03\"\x01m\x92\xb5\x18O*MWidth of all lane markings in the marking configuration, e.g. double markings\x12X\n\x05\x63olor\x18\x0c \x01(\x0e\x32!.VisionCore.Road.LaneMarkingColorB&\x92\xb5\x18\"* Describes the lane marking color\x12\x88\x01\n\x0bmodel_error\x18\r \x01(\rBs\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\tI\x00\x00\x00\x00\x00\x00\x00\x00\x92\xb5\x18\tQffffff\x04@\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x03\"\x01m\x92\xb5\x18>*<Describes how well the measurements are adapted to the model\x12l\n\x13measurement_quality\x18\x0e \x01(\rBO\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\tI\x00\x00\x00\x00\x00\x00\x00\x00\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\x00Y@\x92\xb5\x18\x03\"\x01%\x92\xb5\x18$*\"Describes quality of the detection\x12v\n\x14selection_confidence\x18\x0f \x01(\rBX\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\tI\x00\x00\x00\x00\x00\x00\x00\x00\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\x00Y@\x92\xb5\x18\x03\"\x01%\x92\xb5\x18-*+Describes confidence in the track selection\x12q\n distance_first_to_second_marking\x18\x10 \x01(\rBG\x92\xb5\x18\x02\x08\x08\x92\xb5\x18\x06\x32\x04\x30.01\x92\xb5\x18\x03\"\x01m\x92\xb5\x18,**Distance from first to second lane marking\x12R\n\x08\x63lothoid\x18\x11 \x01(\x0b\x32\x19.VisionCore.Road.ClothoidB%\x92\xb5\x18!*\x1f\x44\x65scribes lane marking clothoid\x12?\n\x07is_safe\x18\x12 \x01(\x08\x42.\x92\xb5\x18**(True means that the track is safe to use\x12\x9a\x01\n\runsafe_reason\x18\x13 \x01(\rB\x82\x01\x92\xb5\x18\x02\x08\x08\x92\xb5\x18x*vBitfield listing the reasons to why the track is considered to be unsafe. For bit definitions, see TrackUnsafeReasons.\x12l\n\x11\x63lothoid_variance\x18\x14 \x01(\x0b\x32!.VisionCore.Road.ClothoidVarianceB.\x92\xb5\x18**(Describes lane marking clothoid variance\"\xf5\x01\n\x11TemporaryMarkings\x12\x63\n\x04type\x18\x01 \x01(\x0e\x32%.VisionCore.Road.TemporaryMarkingTypeB.\x92\xb5\x18**(Describes the type of temporary markings\x12{\n\x15longitudinal_distance\x18\x02 \x01(\rB\\\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\xc0\x62@\x92\xb5\x18\x05\x32\x03\x30.1\x92\xb5\x18\x03\"\x01m\x92\xb5\x18\x35*3Longitudinal distance to dynamic temporary markings\"\xa7\x02\n\x07\x45goLane\x12\x46\n\x04left\x18\x01 \x01(\x0b\x32\x1a.VisionCore.Road.LaneTrackB\x1c\x92\xb5\x18\x18*\x16Left ego lane boundary\x12H\n\x05right\x18\x02 \x01(\x0b\x32\x1a.VisionCore.Road.LaneTrackB\x1d\x92\xb5\x18\x19*\x17Right ego lane boundary\x12\x89\x01\n\x11parallel_distance\x18\x03 \x01(\rBn\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\tQ\x00\x00\x00\x00\x00\xc0\x62@\x92\xb5\x18\x05\x32\x03\x30.1\x92\xb5\x18\x03\"\x01m\x92\xb5\x18G*ELongitudinal distance in which the left and right tracks are parallel\"\xbb\n\n\nLaneOutput\x12>\n\x08\x65go_lane\x18\x01 \x01(\x0b\x32\x18.VisionCore.Road.EgoLaneB\x12\x92\xb5\x18\x0e*\x0cThe ego lane\x12N\n\x10\x63oupled_ego_lane\x18\x02 \x01(\x0b\x32\x18.VisionCore.Road.EgoLaneB\x1a\x92\xb5\x18\x16*\x14The coupled ego lane\x12T\n\rneighbor_left\x18\x03 \x01(\x0b\x32\x1a.VisionCore.Road.LaneTrackB!\x92\xb5\x18\x1d*\x1bLeft neighbor lane boundary\x12V\n\x0eneighbor_right\x18\x04 \x01(\x0b\x32\x1a.VisionCore.Road.LaneTrackB\"\x92\xb5\x18\x1e*\x1cRight neighbor lane boundary\x12Y\n\x06\x65vents\x18\x05 \x03(\x0b\x32\x1a.VisionCore.Road.LaneEventB-\x92\xb5\x18\x02\x18\x04\x92\xb5\x18#*!Describes the current lane events\x12\x62\n\x12temporary_markings\x18\x06 \x01(\x0b\x32\".VisionCore.Road.TemporaryMarkingsB\"\x92\xb5\x18\x1e*\x1c\x44\x65scribes temporary markings\x12\x91\x01\n\x0fside_suggestion\x18\x07 \x01(\x0e\x32\x1f.VisionCore.Road.SideSuggestionBW\x92\xb5\x18S*QRecommendation of output data to be used by steering assist and similar functions\x12\x62\n\x0blane_change\x18\x08 \x01(\x0e\x32\x1b.VisionCore.Road.LaneChangeB0\x92\xb5\x18,**Describes the direction of the lane change\x12R\n\nframe_drop\x18\t \x01(\x08\x42>\x92\xb5\x18:*8True means algorithm has executed without new input data\x12V\n\x11\x62lockage_duration\x18\n \x01(\rB;\x92\xb5\x18\x02\x08\x10\x92\xb5\x18\tQ\x00\x00\x00\x00\x00 \x9c@\x92\xb5\x18\x03\"\x01s\x92\xb5\x18\x1d*\x1bTime with detected blockage\x12j\n\x16self_assessment_failed\x18\x0b \x01(\x08\x42J\x92\xb5\x18\x46*DTrue means that the lane self assessment algorithm detected an error\x12h\n\x11\x61ttention_markers\x18\x0c \x01(\x08\x42M\x92\xb5\x18I*GTrue means that the selection mode attention markings has been detected\x12^\n\x0eoperation_mode\x18\r \x01(\x0e\x32\".VisionCore.Road.LaneOperationModeB\"\x92\xb5\x18\x1e*\x1c\x44\x65scribes the operation mode:V\x8a\xb5\x18\x02(\x02\x8a\xb5\x18\x39\"7Output describing the lane markers ahead of the vehicle\x8a\xb5\x18\x03\x08\xc9\x01\x8a\xb5\x18\x02\x10\x02\x8a\xb5\x18\x02\x18\x00*[\n\x10MarkingStructure\x12%\n!MARKING_STRUCTURE_PAINTED_MARKING\x10\x00\x12 \n\x1cMARKING_STRUCTURE_BOTTS_DOTS\x10\x01*\x81\x01\n\x0bMarkingType\x12\x1c\n\x18MARKING_TYPE_UNSPECIFIED\x10\x00\x12\x16\n\x12MARKING_TYPE_SOLID\x10\x01\x12\x17\n\x13MARKING_TYPE_DASHED\x10\x02\x12#\n\x1fMARKING_TYPE_SEPARATION_MARKING\x10\x03*\xe9\x01\n\x11SecondMarkingType\x12)\n%SECOND_MARKING_TYPE_NO_SECOND_MARKING\x10\x00\x12$\n SECOND_MARKING_TYPE_SECOND_SOLID\x10\x01\x12%\n!SECOND_MARKING_TYPE_SECOND_DASHED\x10\x02\x12\x31\n-SECOND_MARKING_TYPE_SECOND_SEPARATION_MARKING\x10\x03\x12)\n%SECOND_MARKING_TYPE_MULTIPLE_MARKINGS\x10\x04*\x8f\x02\n\x12LaneTrackingStatus\x12,\n(LANE_TRACKING_STATUS_NO_MARKING_DETECTED\x10\x00\x12\x31\n-LANE_TRACKING_STATUS_TRACKED_DETECTED_MARKING\x10\x01\x12\x36\n2LANE_TRACKING_STATUS_CLOSE_RANGE_PREDICTED_MARKING\x10\x02\x12\x34\n0LANE_TRACKING_STATUS_FAR_RANGE_PREDICTED_MARKING\x10\x03\x12*\n&LANE_TRACKING_STATUS_PREDICTED_MARKING\x10\x04*\xd5\x01\n\x0eSideSuggestion\x12\x18\n\x14SIDE_SUGGESTION_NONE\x10\x00\x12\x1d\n\x19SIDE_SUGGESTION_LEFT_SIDE\x10\x01\x12\x1e\n\x1aSIDE_SUGGESTION_RIGHT_SIDE\x10\x02\x12%\n!SIDE_SUGGESTION_BOTH_NON_PARALLEL\x10\x03\x12!\n\x1dSIDE_SUGGESTION_BOTH_PARALLEL\x10\x04\x12 \n\x1cSIDE_SUGGESTION_BOTH_COUPLED\x10\x05*q\n\nLaneChange\x12\x1e\n\x1aLANE_CHANGE_NO_LANE_CHANGE\x10\x00\x12 \n\x1cLANE_CHANGE_LANE_CHANGE_LEFT\x10\x01\x12!\n\x1dLANE_CHANGE_LANE_CHANGE_RIGHT\x10\x02*\xe3\x01\n\x10LaneMarkingColor\x12\x1c\n\x18LANE_MARKING_COLOR_WHITE\x10\x00\x12\x1d\n\x19LANE_MARKING_COLOR_YELLOW\x10\x01\x12\x1a\n\x16LANE_MARKING_COLOR_RED\x10\x02\x12\x1b\n\x17LANE_MARKING_COLOR_BLUE\x10\x03\x12\x1d\n\x19LANE_MARKING_COLOR_ORANGE\x10\x04\x12\x1c\n\x18LANE_MARKING_COLOR_GREEN\x10\x05\x12\x1c\n\x18LANE_MARKING_COLOR_OTHER\x10\x06*\xd4\x02\n\rLaneEventType\x12\x1c\n\x18LANE_EVENT_TYPE_NO_EVENT\x10\x00\x12 \n\x1cLANE_EVENT_TYPE_OPENING_FORK\x10\x01\x12 \n\x1cLANE_EVENT_TYPE_CLOSING_FORK\x10\x02\x12\x37\n3LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_DASHED_TO_SOLID\x10\x03\x12\x37\n3LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_SOLID_TO_DASHED\x10\x04\x12\x37\n3LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_START_OF_DASHED\x10\x05\x12\x36\n2LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_START_OF_SOLID\x10\x06*\xae\x01\n\x14TemporaryMarkingType\x12\x30\n,TEMPORARY_MARKING_TYPE_NO_TEMPORARY_MARKINGS\x10\x00\x12-\n)TEMPORARY_MARKING_TYPE_AMBIGUOUS_MARKINGS\x10\x01\x12\x35\n1TEMPORARY_MARKING_TYPE_DYNAMIC_TEMPORARY_MARKINGS\x10\x02*\xbb\x03\n\x15LaneTrackUnsafeReason\x12(\n$LANE_TRACK_UNSAFE_REASON_UNSPECIFIED\x10\x00\x12-\n)LANE_TRACK_UNSAFE_REASON_INVALID_POSITION\x10\x01\x12\x31\n-LANE_TRACK_UNSAFE_REASON_INVALID_MARKING_TYPE\x10\x02\x12\x37\n3LANE_TRACK_UNSAFE_REASON_INVALID_DETECTION_DISTANCE\x10\x03\x12\x30\n,LANE_TRACK_UNSAFE_REASON_INVALID_CALIBRATION\x10\x04\x12(\n$LANE_TRACK_UNSAFE_REASON_INVALID_CNN\x10\x05\x12*\n&LANE_TRACK_UNSAFE_REASON_INVALID_COLOR\x10\x06\x12\x31\n-LANE_TRACK_UNSAFE_REASON_INVALID_ROAD_PROFILE\x10\x07\x12\"\n\x1eLANE_TRACK_UNSAFE_REASON_OTHER\x10\x08*e\n\rLaneEventSide\x12\x1f\n\x1bLANE_EVENT_SIDE_UNSPECIFIED\x10\x00\x12\x18\n\x14LANE_EVENT_SIDE_LEFT\x10\x01\x12\x19\n\x15LANE_EVENT_SIDE_RIGHT\x10\x02*r\n\x11LaneOperationMode\x12\x1f\n\x1bLANE_OPERATION_MODE_INVALID\x10\x00\x12\x1c\n\x18LANE_OPERATION_MODE_MONO\x10\x01\x12\x1e\n\x1aLANE_OPERATION_MODE_STEREO\x10\x02\x62\x06proto3'
  ,
  dependencies=[Tools_dot_Extension_dot_SystemOptions__pb2.DESCRIPTOR,])

_MARKINGSTRUCTURE = _descriptor.EnumDescriptor(
  name='MarkingStructure',
  full_name='VisionCore.Road.MarkingStructure',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='MARKING_STRUCTURE_PAINTED_MARKING', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='MARKING_STRUCTURE_BOTTS_DOTS', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=6106,
  serialized_end=6197,
)
_sym_db.RegisterEnumDescriptor(_MARKINGSTRUCTURE)

MarkingStructure = enum_type_wrapper.EnumTypeWrapper(_MARKINGSTRUCTURE)
_MARKINGTYPE = _descriptor.EnumDescriptor(
  name='MarkingType',
  full_name='VisionCore.Road.MarkingType',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='MARKING_TYPE_UNSPECIFIED', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='MARKING_TYPE_SOLID', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='MARKING_TYPE_DASHED', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='MARKING_TYPE_SEPARATION_MARKING', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=6200,
  serialized_end=6329,
)
_sym_db.RegisterEnumDescriptor(_MARKINGTYPE)

MarkingType = enum_type_wrapper.EnumTypeWrapper(_MARKINGTYPE)
_SECONDMARKINGTYPE = _descriptor.EnumDescriptor(
  name='SecondMarkingType',
  full_name='VisionCore.Road.SecondMarkingType',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SECOND_MARKING_TYPE_NO_SECOND_MARKING', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SECOND_MARKING_TYPE_SECOND_SOLID', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SECOND_MARKING_TYPE_SECOND_DASHED', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SECOND_MARKING_TYPE_SECOND_SEPARATION_MARKING', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SECOND_MARKING_TYPE_MULTIPLE_MARKINGS', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=6332,
  serialized_end=6565,
)
_sym_db.RegisterEnumDescriptor(_SECONDMARKINGTYPE)

SecondMarkingType = enum_type_wrapper.EnumTypeWrapper(_SECONDMARKINGTYPE)
_LANETRACKINGSTATUS = _descriptor.EnumDescriptor(
  name='LaneTrackingStatus',
  full_name='VisionCore.Road.LaneTrackingStatus',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACKING_STATUS_NO_MARKING_DETECTED', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACKING_STATUS_TRACKED_DETECTED_MARKING', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACKING_STATUS_CLOSE_RANGE_PREDICTED_MARKING', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACKING_STATUS_FAR_RANGE_PREDICTED_MARKING', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACKING_STATUS_PREDICTED_MARKING', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=6568,
  serialized_end=6839,
)
_sym_db.RegisterEnumDescriptor(_LANETRACKINGSTATUS)

LaneTrackingStatus = enum_type_wrapper.EnumTypeWrapper(_LANETRACKINGSTATUS)
_SIDESUGGESTION = _descriptor.EnumDescriptor(
  name='SideSuggestion',
  full_name='VisionCore.Road.SideSuggestion',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SIDE_SUGGESTION_NONE', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SIDE_SUGGESTION_LEFT_SIDE', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SIDE_SUGGESTION_RIGHT_SIDE', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SIDE_SUGGESTION_BOTH_NON_PARALLEL', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SIDE_SUGGESTION_BOTH_PARALLEL', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SIDE_SUGGESTION_BOTH_COUPLED', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=6842,
  serialized_end=7055,
)
_sym_db.RegisterEnumDescriptor(_SIDESUGGESTION)

SideSuggestion = enum_type_wrapper.EnumTypeWrapper(_SIDESUGGESTION)
_LANECHANGE = _descriptor.EnumDescriptor(
  name='LaneChange',
  full_name='VisionCore.Road.LaneChange',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_CHANGE_NO_LANE_CHANGE', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_CHANGE_LANE_CHANGE_LEFT', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_CHANGE_LANE_CHANGE_RIGHT', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=7057,
  serialized_end=7170,
)
_sym_db.RegisterEnumDescriptor(_LANECHANGE)

LaneChange = enum_type_wrapper.EnumTypeWrapper(_LANECHANGE)
_LANEMARKINGCOLOR = _descriptor.EnumDescriptor(
  name='LaneMarkingColor',
  full_name='VisionCore.Road.LaneMarkingColor',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_WHITE', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_YELLOW', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_RED', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_BLUE', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_ORANGE', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_GREEN', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_MARKING_COLOR_OTHER', index=6, number=6,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=7173,
  serialized_end=7400,
)
_sym_db.RegisterEnumDescriptor(_LANEMARKINGCOLOR)

LaneMarkingColor = enum_type_wrapper.EnumTypeWrapper(_LANEMARKINGCOLOR)
_LANEEVENTTYPE = _descriptor.EnumDescriptor(
  name='LaneEventType',
  full_name='VisionCore.Road.LaneEventType',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_NO_EVENT', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_OPENING_FORK', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_CLOSING_FORK', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_DASHED_TO_SOLID', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_SOLID_TO_DASHED', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_START_OF_DASHED', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_START_OF_SOLID', index=6, number=6,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=7403,
  serialized_end=7743,
)
_sym_db.RegisterEnumDescriptor(_LANEEVENTTYPE)

LaneEventType = enum_type_wrapper.EnumTypeWrapper(_LANEEVENTTYPE)
_TEMPORARYMARKINGTYPE = _descriptor.EnumDescriptor(
  name='TemporaryMarkingType',
  full_name='VisionCore.Road.TemporaryMarkingType',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='TEMPORARY_MARKING_TYPE_NO_TEMPORARY_MARKINGS', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='TEMPORARY_MARKING_TYPE_AMBIGUOUS_MARKINGS', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='TEMPORARY_MARKING_TYPE_DYNAMIC_TEMPORARY_MARKINGS', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=7746,
  serialized_end=7920,
)
_sym_db.RegisterEnumDescriptor(_TEMPORARYMARKINGTYPE)

TemporaryMarkingType = enum_type_wrapper.EnumTypeWrapper(_TEMPORARYMARKINGTYPE)
_LANETRACKUNSAFEREASON = _descriptor.EnumDescriptor(
  name='LaneTrackUnsafeReason',
  full_name='VisionCore.Road.LaneTrackUnsafeReason',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_UNSPECIFIED', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_POSITION', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_MARKING_TYPE', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_DETECTION_DISTANCE', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_CALIBRATION', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_CNN', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_COLOR', index=6, number=6,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_INVALID_ROAD_PROFILE', index=7, number=7,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_TRACK_UNSAFE_REASON_OTHER', index=8, number=8,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=7923,
  serialized_end=8366,
)
_sym_db.RegisterEnumDescriptor(_LANETRACKUNSAFEREASON)

LaneTrackUnsafeReason = enum_type_wrapper.EnumTypeWrapper(_LANETRACKUNSAFEREASON)
_LANEEVENTSIDE = _descriptor.EnumDescriptor(
  name='LaneEventSide',
  full_name='VisionCore.Road.LaneEventSide',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_SIDE_UNSPECIFIED', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_SIDE_LEFT', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_EVENT_SIDE_RIGHT', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=8368,
  serialized_end=8469,
)
_sym_db.RegisterEnumDescriptor(_LANEEVENTSIDE)

LaneEventSide = enum_type_wrapper.EnumTypeWrapper(_LANEEVENTSIDE)
_LANEOPERATIONMODE = _descriptor.EnumDescriptor(
  name='LaneOperationMode',
  full_name='VisionCore.Road.LaneOperationMode',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LANE_OPERATION_MODE_INVALID', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_OPERATION_MODE_MONO', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LANE_OPERATION_MODE_STEREO', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=8471,
  serialized_end=8585,
)
_sym_db.RegisterEnumDescriptor(_LANEOPERATIONMODE)

LaneOperationMode = enum_type_wrapper.EnumTypeWrapper(_LANEOPERATIONMODE)
MARKING_STRUCTURE_PAINTED_MARKING = 0
MARKING_STRUCTURE_BOTTS_DOTS = 1
MARKING_TYPE_UNSPECIFIED = 0
MARKING_TYPE_SOLID = 1
MARKING_TYPE_DASHED = 2
MARKING_TYPE_SEPARATION_MARKING = 3
SECOND_MARKING_TYPE_NO_SECOND_MARKING = 0
SECOND_MARKING_TYPE_SECOND_SOLID = 1
SECOND_MARKING_TYPE_SECOND_DASHED = 2
SECOND_MARKING_TYPE_SECOND_SEPARATION_MARKING = 3
SECOND_MARKING_TYPE_MULTIPLE_MARKINGS = 4
LANE_TRACKING_STATUS_NO_MARKING_DETECTED = 0
LANE_TRACKING_STATUS_TRACKED_DETECTED_MARKING = 1
LANE_TRACKING_STATUS_CLOSE_RANGE_PREDICTED_MARKING = 2
LANE_TRACKING_STATUS_FAR_RANGE_PREDICTED_MARKING = 3
LANE_TRACKING_STATUS_PREDICTED_MARKING = 4
SIDE_SUGGESTION_NONE = 0
SIDE_SUGGESTION_LEFT_SIDE = 1
SIDE_SUGGESTION_RIGHT_SIDE = 2
SIDE_SUGGESTION_BOTH_NON_PARALLEL = 3
SIDE_SUGGESTION_BOTH_PARALLEL = 4
SIDE_SUGGESTION_BOTH_COUPLED = 5
LANE_CHANGE_NO_LANE_CHANGE = 0
LANE_CHANGE_LANE_CHANGE_LEFT = 1
LANE_CHANGE_LANE_CHANGE_RIGHT = 2
LANE_MARKING_COLOR_WHITE = 0
LANE_MARKING_COLOR_YELLOW = 1
LANE_MARKING_COLOR_RED = 2
LANE_MARKING_COLOR_BLUE = 3
LANE_MARKING_COLOR_ORANGE = 4
LANE_MARKING_COLOR_GREEN = 5
LANE_MARKING_COLOR_OTHER = 6
LANE_EVENT_TYPE_NO_EVENT = 0
LANE_EVENT_TYPE_OPENING_FORK = 1
LANE_EVENT_TYPE_CLOSING_FORK = 2
LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_DASHED_TO_SOLID = 3
LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_SOLID_TO_DASHED = 4
LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_START_OF_DASHED = 5
LANE_EVENT_TYPE_MARKING_TYPE_CHANGE_START_OF_SOLID = 6
TEMPORARY_MARKING_TYPE_NO_TEMPORARY_MARKINGS = 0
TEMPORARY_MARKING_TYPE_AMBIGUOUS_MARKINGS = 1
TEMPORARY_MARKING_TYPE_DYNAMIC_TEMPORARY_MARKINGS = 2
LANE_TRACK_UNSAFE_REASON_UNSPECIFIED = 0
LANE_TRACK_UNSAFE_REASON_INVALID_POSITION = 1
LANE_TRACK_UNSAFE_REASON_INVALID_MARKING_TYPE = 2
LANE_TRACK_UNSAFE_REASON_INVALID_DETECTION_DISTANCE = 3
LANE_TRACK_UNSAFE_REASON_INVALID_CALIBRATION = 4
LANE_TRACK_UNSAFE_REASON_INVALID_CNN = 5
LANE_TRACK_UNSAFE_REASON_INVALID_COLOR = 6
LANE_TRACK_UNSAFE_REASON_INVALID_ROAD_PROFILE = 7
LANE_TRACK_UNSAFE_REASON_OTHER = 8
LANE_EVENT_SIDE_UNSPECIFIED = 0
LANE_EVENT_SIDE_LEFT = 1
LANE_EVENT_SIDE_RIGHT = 2
LANE_OPERATION_MODE_INVALID = 0
LANE_OPERATION_MODE_MONO = 1
LANE_OPERATION_MODE_STEREO = 2



_LANEEVENT = _descriptor.Descriptor(
  name='LaneEvent',
  full_name='VisionCore.Road.LaneEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='VisionCore.Road.LaneEvent.id', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030[*YUnique for the lane event. The same Id can be reused after one output cycle. 0 means None', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='lane_track_id', full_name='VisionCore.Road.LaneEvent.lane_track_id', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030]*[Identifier for the Lane_Track to which the lane event is connected. Related to LaneTrack.id', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='distance', full_name='VisionCore.Road.LaneEvent.distance', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\0052\0030.1\222\265\030\003\"\001m\222\265\030\tI\000\000\000\000\000\000\000\000\222\265\030\tQ\000\000\000\000\000\000Y@\222\265\0308*6Distance along the longitudinal axis to the lane event', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='event_type', full_name='VisionCore.Road.LaneEvent.event_type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\035*\033Describes the type of event', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='side', full_name='VisionCore.Road.LaneEvent.side', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030**(Side on which the lane event is detected', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=91,
  serialized_end=654,
)


_CLOTHOID = _descriptor.Descriptor(
  name='Clothoid',
  full_name='VisionCore.Road.Clothoid',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='lateral_distance', full_name='VisionCore.Road.Clothoid.lateral_distance', index=0,
      number=1, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\0062\0040.01\222\265\030\003\"\001m\222\265\030\tI\000\000\000\000\000\000$\300\222\265\030\tQ\000\000\000\000\000\000$@\222\265\030K*ILateral distance to the inside of the lane marking [m] (AFAC)(default: 0)', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='heading', full_name='VisionCore.Road.Clothoid.heading', index=1,
      number=2, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\n2\0100.000025\222\265\030\013\"\tatan(rad)\222\265\030/*-The heading coefficient of the clothoid model', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='curvature', full_name='VisionCore.Road.Clothoid.curvature', index=2,
      number=3, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\0132\t0.0000025\222\265\030\005\"\0031/m\222\265\030:*8Horizontal curvature for the start of the first clothoid', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='curvature_rate', full_name='VisionCore.Road.Clothoid.curvature_rate', index=3,
      number=4, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\n2\0100.000001\222\265\030\007\"\0051/m\302\262\222\265\0302*0Horizontal curvature rate for the first clothoid', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='transition_distance', full_name='VisionCore.Road.Clothoid.transition_distance', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\tQ\000\000\000\000\000\300b@\222\265\030\0062\0040.01\222\265\030\003\"\001m\222\265\030+*)Distance for which second clothoid starts', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='curvature_rate_second_clothoid', full_name='VisionCore.Road.Clothoid.curvature_rate_second_clothoid', index=5,
      number=6, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\n2\0100.000001\222\265\030\007\"\0051/m\302\262\222\265\0303*1Horizontal curvature rate for the second clothoid', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='second_clothoid_active', full_name='VisionCore.Road.Clothoid.second_clothoid_active', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030&*$Indicates if second clothoid is used', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=657,
  serialized_end=1472,
)


_CLOTHOIDVARIANCE = _descriptor.Descriptor(
  name='ClothoidVariance',
  full_name='VisionCore.Road.ClothoidVariance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='lateral_distance_variance', full_name='VisionCore.Road.ClothoidVariance.lateral_distance_variance', index=0,
      number=1, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\0062\0040.01\222\265\030\007\"\0051/m\302\262\222\265\030\037*\035Variance for lateral distance', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='heading_variance', full_name='VisionCore.Road.ClothoidVariance.heading_variance', index=1,
      number=2, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\n2\0100.000025\222\265\030\r\"\013atan(rad)\302\262\222\265\030\026*\024Variance for heading', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='curvature_variance', full_name='VisionCore.Road.ClothoidVariance.curvature_variance', index=2,
      number=3, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\0132\t0.0000025\222\265\030\007\"\0051/m\302\262\222\265\030\030*\026Variance for curvature', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='curvature_rate_variance', full_name='VisionCore.Road.ClothoidVariance.curvature_rate_variance', index=3,
      number=4, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\n2\0100.000001\222\265\030\007\"\0051/m^4\222\265\030\035*\033Variance for curvature rate', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='curvature_rate_second_clothoid_variance', full_name='VisionCore.Road.ClothoidVariance.curvature_rate_second_clothoid_variance', index=4,
      number=5, type=17, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\n2\0100.000001\222\265\030\007\"\0051/m^4\222\265\030$*\"Variance for second curvature rate', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1475,
  serialized_end=1994,
)


_LANETRACK = _descriptor.Descriptor(
  name='LaneTrack',
  full_name='VisionCore.Road.LaneTrack',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='valid', full_name='VisionCore.Road.LaneTrack.valid', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030:*8True means that LaneTrack describes a valid lane marking', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='id', full_name='VisionCore.Road.LaneTrack.id', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\0301*/ID nr (default: 255 = SNA, propose change to 0)', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='detection_distance', full_name='VisionCore.Road.LaneTrack.detection_distance', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\tQ\000\000\000\000\000\300b@\222\265\030\0052\0030.1\222\265\030\003\"\001m\222\265\0306*4Longitudinal distance for which the lane is detected', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='marking_type', full_name='VisionCore.Road.LaneTrack.marking_type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030>*<Marking type for the lane marking closest to the Ego Vehicle', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='marking_length', full_name='VisionCore.Road.LaneTrack.marking_length', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\0062\0040.05\222\265\030\003\"\001m\222\265\030D*BLength of the lane marking, not applicable for continuous markings', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='gap_length', full_name='VisionCore.Road.LaneTrack.gap_length', index=5,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\0052\0030.1\222\265\030\003\"\001m\222\265\030Q*OLength of the gap between lane markings, not applicable for continuous markings', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='second_marking_type', full_name='VisionCore.Road.LaneTrack.second_marking_type', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030?*=Marking type for the second lane marking from the Ego Vehicle', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='marking_structure', full_name='VisionCore.Road.LaneTrack.marking_structure', index=7,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\0307*5Describes structure of the first detected lane marker', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='tracking_status', full_name='VisionCore.Road.LaneTrack.tracking_status', index=8,
      number=9, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\034*\032Describes detection status', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='marking_width', full_name='VisionCore.Road.LaneTrack.marking_width', index=9,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\0062\0040.01\222\265\030\003\"\001m\222\265\030\035*\033Width of first lane marking', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='total_marking_width', full_name='VisionCore.Road.LaneTrack.total_marking_width', index=10,
      number=11, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\0062\0040.01\222\265\030\003\"\001m\222\265\030O*MWidth of all lane markings in the marking configuration, e.g. double markings', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='color', full_name='VisionCore.Road.LaneTrack.color', index=11,
      number=12, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\"* Describes the lane marking color', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='model_error', full_name='VisionCore.Road.LaneTrack.model_error', index=12,
      number=13, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\tI\000\000\000\000\000\000\000\000\222\265\030\tQffffff\004@\222\265\030\0062\0040.01\222\265\030\003\"\001m\222\265\030>*<Describes how well the measurements are adapted to the model', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='measurement_quality', full_name='VisionCore.Road.LaneTrack.measurement_quality', index=13,
      number=14, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\tI\000\000\000\000\000\000\000\000\222\265\030\tQ\000\000\000\000\000\000Y@\222\265\030\003\"\001%\222\265\030$*\"Describes quality of the detection', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='selection_confidence', full_name='VisionCore.Road.LaneTrack.selection_confidence', index=14,
      number=15, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\tI\000\000\000\000\000\000\000\000\222\265\030\tQ\000\000\000\000\000\000Y@\222\265\030\003\"\001%\222\265\030-*+Describes confidence in the track selection', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='distance_first_to_second_marking', full_name='VisionCore.Road.LaneTrack.distance_first_to_second_marking', index=15,
      number=16, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030\0062\0040.01\222\265\030\003\"\001m\222\265\030,**Distance from first to second lane marking', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='clothoid', full_name='VisionCore.Road.LaneTrack.clothoid', index=16,
      number=17, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030!*\037Describes lane marking clothoid', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='is_safe', full_name='VisionCore.Road.LaneTrack.is_safe', index=17,
      number=18, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030**(True means that the track is safe to use', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='unsafe_reason', full_name='VisionCore.Road.LaneTrack.unsafe_reason', index=18,
      number=19, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\010\222\265\030x*vBitfield listing the reasons to why the track is considered to be unsafe. For bit definitions, see TrackUnsafeReasons.', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='clothoid_variance', full_name='VisionCore.Road.LaneTrack.clothoid_variance', index=19,
      number=20, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030**(Describes lane marking clothoid variance', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1997,
  serialized_end=4216,
)


_TEMPORARYMARKINGS = _descriptor.Descriptor(
  name='TemporaryMarkings',
  full_name='VisionCore.Road.TemporaryMarkings',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='VisionCore.Road.TemporaryMarkings.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030**(Describes the type of temporary markings', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='longitudinal_distance', full_name='VisionCore.Road.TemporaryMarkings.longitudinal_distance', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\tQ\000\000\000\000\000\300b@\222\265\030\0052\0030.1\222\265\030\003\"\001m\222\265\0305*3Longitudinal distance to dynamic temporary markings', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4219,
  serialized_end=4464,
)


_EGOLANE = _descriptor.Descriptor(
  name='EgoLane',
  full_name='VisionCore.Road.EgoLane',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='left', full_name='VisionCore.Road.EgoLane.left', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\030*\026Left ego lane boundary', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='right', full_name='VisionCore.Road.EgoLane.right', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\031*\027Right ego lane boundary', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='parallel_distance', full_name='VisionCore.Road.EgoLane.parallel_distance', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\tQ\000\000\000\000\000\300b@\222\265\030\0052\0030.1\222\265\030\003\"\001m\222\265\030G*ELongitudinal distance in which the left and right tracks are parallel', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4467,
  serialized_end=4762,
)


_LANEOUTPUT = _descriptor.Descriptor(
  name='LaneOutput',
  full_name='VisionCore.Road.LaneOutput',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='ego_lane', full_name='VisionCore.Road.LaneOutput.ego_lane', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\016*\014The ego lane', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='coupled_ego_lane', full_name='VisionCore.Road.LaneOutput.coupled_ego_lane', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\026*\024The coupled ego lane', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='neighbor_left', full_name='VisionCore.Road.LaneOutput.neighbor_left', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\035*\033Left neighbor lane boundary', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='neighbor_right', full_name='VisionCore.Road.LaneOutput.neighbor_right', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\036*\034Right neighbor lane boundary', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='events', full_name='VisionCore.Road.LaneOutput.events', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\030\004\222\265\030#*!Describes the current lane events', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='temporary_markings', full_name='VisionCore.Road.LaneOutput.temporary_markings', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\036*\034Describes temporary markings', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='side_suggestion', full_name='VisionCore.Road.LaneOutput.side_suggestion', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030S*QRecommendation of output data to be used by steering assist and similar functions', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='lane_change', full_name='VisionCore.Road.LaneOutput.lane_change', index=7,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030,**Describes the direction of the lane change', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='frame_drop', full_name='VisionCore.Road.LaneOutput.frame_drop', index=8,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030:*8True means algorithm has executed without new input data', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='blockage_duration', full_name='VisionCore.Road.LaneOutput.blockage_duration', index=9,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\002\010\020\222\265\030\tQ\000\000\000\000\000 \234@\222\265\030\003\"\001s\222\265\030\035*\033Time with detected blockage', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='self_assessment_failed', full_name='VisionCore.Road.LaneOutput.self_assessment_failed', index=10,
      number=11, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030F*DTrue means that the lane self assessment algorithm detected an error', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='attention_markers', full_name='VisionCore.Road.LaneOutput.attention_markers', index=11,
      number=12, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030I*GTrue means that the selection mode attention markings has been detected', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='operation_mode', full_name='VisionCore.Road.LaneOutput.operation_mode', index=12,
      number=13, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=b'\222\265\030\036*\034Describes the operation mode', file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=b'\212\265\030\002(\002\212\265\0309\"7Output describing the lane markers ahead of the vehicle\212\265\030\003\010\311\001\212\265\030\002\020\002\212\265\030\002\030\000',
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4765,
  serialized_end=6104,
)

_LANEEVENT.fields_by_name['event_type'].enum_type = _LANEEVENTTYPE
_LANEEVENT.fields_by_name['side'].enum_type = _LANEEVENTSIDE
_LANETRACK.fields_by_name['marking_type'].enum_type = _MARKINGTYPE
_LANETRACK.fields_by_name['second_marking_type'].enum_type = _SECONDMARKINGTYPE
_LANETRACK.fields_by_name['marking_structure'].enum_type = _MARKINGSTRUCTURE
_LANETRACK.fields_by_name['tracking_status'].enum_type = _LANETRACKINGSTATUS
_LANETRACK.fields_by_name['color'].enum_type = _LANEMARKINGCOLOR
_LANETRACK.fields_by_name['clothoid'].message_type = _CLOTHOID
_LANETRACK.fields_by_name['clothoid_variance'].message_type = _CLOTHOIDVARIANCE
_TEMPORARYMARKINGS.fields_by_name['type'].enum_type = _TEMPORARYMARKINGTYPE
_EGOLANE.fields_by_name['left'].message_type = _LANETRACK
_EGOLANE.fields_by_name['right'].message_type = _LANETRACK
_LANEOUTPUT.fields_by_name['ego_lane'].message_type = _EGOLANE
_LANEOUTPUT.fields_by_name['coupled_ego_lane'].message_type = _EGOLANE
_LANEOUTPUT.fields_by_name['neighbor_left'].message_type = _LANETRACK
_LANEOUTPUT.fields_by_name['neighbor_right'].message_type = _LANETRACK
_LANEOUTPUT.fields_by_name['events'].message_type = _LANEEVENT
_LANEOUTPUT.fields_by_name['temporary_markings'].message_type = _TEMPORARYMARKINGS
_LANEOUTPUT.fields_by_name['side_suggestion'].enum_type = _SIDESUGGESTION
_LANEOUTPUT.fields_by_name['lane_change'].enum_type = _LANECHANGE
_LANEOUTPUT.fields_by_name['operation_mode'].enum_type = _LANEOPERATIONMODE
DESCRIPTOR.message_types_by_name['LaneEvent'] = _LANEEVENT
DESCRIPTOR.message_types_by_name['Clothoid'] = _CLOTHOID
DESCRIPTOR.message_types_by_name['ClothoidVariance'] = _CLOTHOIDVARIANCE
DESCRIPTOR.message_types_by_name['LaneTrack'] = _LANETRACK
DESCRIPTOR.message_types_by_name['TemporaryMarkings'] = _TEMPORARYMARKINGS
DESCRIPTOR.message_types_by_name['EgoLane'] = _EGOLANE
DESCRIPTOR.message_types_by_name['LaneOutput'] = _LANEOUTPUT
DESCRIPTOR.enum_types_by_name['MarkingStructure'] = _MARKINGSTRUCTURE
DESCRIPTOR.enum_types_by_name['MarkingType'] = _MARKINGTYPE
DESCRIPTOR.enum_types_by_name['SecondMarkingType'] = _SECONDMARKINGTYPE
DESCRIPTOR.enum_types_by_name['LaneTrackingStatus'] = _LANETRACKINGSTATUS
DESCRIPTOR.enum_types_by_name['SideSuggestion'] = _SIDESUGGESTION
DESCRIPTOR.enum_types_by_name['LaneChange'] = _LANECHANGE
DESCRIPTOR.enum_types_by_name['LaneMarkingColor'] = _LANEMARKINGCOLOR
DESCRIPTOR.enum_types_by_name['LaneEventType'] = _LANEEVENTTYPE
DESCRIPTOR.enum_types_by_name['TemporaryMarkingType'] = _TEMPORARYMARKINGTYPE
DESCRIPTOR.enum_types_by_name['LaneTrackUnsafeReason'] = _LANETRACKUNSAFEREASON
DESCRIPTOR.enum_types_by_name['LaneEventSide'] = _LANEEVENTSIDE
DESCRIPTOR.enum_types_by_name['LaneOperationMode'] = _LANEOPERATIONMODE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LaneEvent = _reflection.GeneratedProtocolMessageType('LaneEvent', (_message.Message,), {
  'DESCRIPTOR' : _LANEEVENT,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.LaneEvent)
  })
_sym_db.RegisterMessage(LaneEvent)

Clothoid = _reflection.GeneratedProtocolMessageType('Clothoid', (_message.Message,), {
  'DESCRIPTOR' : _CLOTHOID,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.Clothoid)
  })
_sym_db.RegisterMessage(Clothoid)

ClothoidVariance = _reflection.GeneratedProtocolMessageType('ClothoidVariance', (_message.Message,), {
  'DESCRIPTOR' : _CLOTHOIDVARIANCE,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.ClothoidVariance)
  })
_sym_db.RegisterMessage(ClothoidVariance)

LaneTrack = _reflection.GeneratedProtocolMessageType('LaneTrack', (_message.Message,), {
  'DESCRIPTOR' : _LANETRACK,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.LaneTrack)
  })
_sym_db.RegisterMessage(LaneTrack)

TemporaryMarkings = _reflection.GeneratedProtocolMessageType('TemporaryMarkings', (_message.Message,), {
  'DESCRIPTOR' : _TEMPORARYMARKINGS,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.TemporaryMarkings)
  })
_sym_db.RegisterMessage(TemporaryMarkings)

EgoLane = _reflection.GeneratedProtocolMessageType('EgoLane', (_message.Message,), {
  'DESCRIPTOR' : _EGOLANE,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.EgoLane)
  })
_sym_db.RegisterMessage(EgoLane)

LaneOutput = _reflection.GeneratedProtocolMessageType('LaneOutput', (_message.Message,), {
  'DESCRIPTOR' : _LANEOUTPUT,
  '__module__' : 'VisionCore.Road.LaneOutput_pb2'
  # @@protoc_insertion_point(class_scope:VisionCore.Road.LaneOutput)
  })
_sym_db.RegisterMessage(LaneOutput)


_LANEEVENT.fields_by_name['id']._options = None
_LANEEVENT.fields_by_name['lane_track_id']._options = None
_LANEEVENT.fields_by_name['distance']._options = None
_LANEEVENT.fields_by_name['event_type']._options = None
_LANEEVENT.fields_by_name['side']._options = None
_CLOTHOID.fields_by_name['lateral_distance']._options = None
_CLOTHOID.fields_by_name['heading']._options = None
_CLOTHOID.fields_by_name['curvature']._options = None
_CLOTHOID.fields_by_name['curvature_rate']._options = None
_CLOTHOID.fields_by_name['transition_distance']._options = None
_CLOTHOID.fields_by_name['curvature_rate_second_clothoid']._options = None
_CLOTHOID.fields_by_name['second_clothoid_active']._options = None
_CLOTHOIDVARIANCE.fields_by_name['lateral_distance_variance']._options = None
_CLOTHOIDVARIANCE.fields_by_name['heading_variance']._options = None
_CLOTHOIDVARIANCE.fields_by_name['curvature_variance']._options = None
_CLOTHOIDVARIANCE.fields_by_name['curvature_rate_variance']._options = None
_CLOTHOIDVARIANCE.fields_by_name['curvature_rate_second_clothoid_variance']._options = None
_LANETRACK.fields_by_name['valid']._options = None
_LANETRACK.fields_by_name['id']._options = None
_LANETRACK.fields_by_name['detection_distance']._options = None
_LANETRACK.fields_by_name['marking_type']._options = None
_LANETRACK.fields_by_name['marking_length']._options = None
_LANETRACK.fields_by_name['gap_length']._options = None
_LANETRACK.fields_by_name['second_marking_type']._options = None
_LANETRACK.fields_by_name['marking_structure']._options = None
_LANETRACK.fields_by_name['tracking_status']._options = None
_LANETRACK.fields_by_name['marking_width']._options = None
_LANETRACK.fields_by_name['total_marking_width']._options = None
_LANETRACK.fields_by_name['color']._options = None
_LANETRACK.fields_by_name['model_error']._options = None
_LANETRACK.fields_by_name['measurement_quality']._options = None
_LANETRACK.fields_by_name['selection_confidence']._options = None
_LANETRACK.fields_by_name['distance_first_to_second_marking']._options = None
_LANETRACK.fields_by_name['clothoid']._options = None
_LANETRACK.fields_by_name['is_safe']._options = None
_LANETRACK.fields_by_name['unsafe_reason']._options = None
_LANETRACK.fields_by_name['clothoid_variance']._options = None
_TEMPORARYMARKINGS.fields_by_name['type']._options = None
_TEMPORARYMARKINGS.fields_by_name['longitudinal_distance']._options = None
_EGOLANE.fields_by_name['left']._options = None
_EGOLANE.fields_by_name['right']._options = None
_EGOLANE.fields_by_name['parallel_distance']._options = None
_LANEOUTPUT.fields_by_name['ego_lane']._options = None
_LANEOUTPUT.fields_by_name['coupled_ego_lane']._options = None
_LANEOUTPUT.fields_by_name['neighbor_left']._options = None
_LANEOUTPUT.fields_by_name['neighbor_right']._options = None
_LANEOUTPUT.fields_by_name['events']._options = None
_LANEOUTPUT.fields_by_name['temporary_markings']._options = None
_LANEOUTPUT.fields_by_name['side_suggestion']._options = None
_LANEOUTPUT.fields_by_name['lane_change']._options = None
_LANEOUTPUT.fields_by_name['frame_drop']._options = None
_LANEOUTPUT.fields_by_name['blockage_duration']._options = None
_LANEOUTPUT.fields_by_name['self_assessment_failed']._options = None
_LANEOUTPUT.fields_by_name['attention_markers']._options = None
_LANEOUTPUT.fields_by_name['operation_mode']._options = None
_LANEOUTPUT._options = None
# @@protoc_insertion_point(module_scope)
